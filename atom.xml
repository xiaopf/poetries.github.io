<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Poetry&#39;s Blog</title>
  <subtitle>Choose a gesture to allow yourself to live irreplaceable.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.poetries.top/"/>
  <updated>2017-02-15T11:25:30.948Z</updated>
  <id>http://blog.poetries.top/</id>
  
  <author>
    <name>Poetry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IE6下常见的兼容性问题</title>
    <link href="http://blog.poetries.top/2017/02/07/ie-compatibility-summary/"/>
    <id>http://blog.poetries.top/2017/02/07/ie-compatibility-summary/</id>
    <published>2017-02-07T03:10:43.000Z</published>
    <updated>2017-02-15T11:25:30.948Z</updated>
    
    <content type="html"><![CDATA[<h4 id="常见问题一：在Ie6下，内容会把父元素设置好的宽高撑开。计算一定要精确"><a href="#常见问题一：在Ie6下，内容会把父元素设置好的宽高撑开。计算一定要精确" class="headerlink" title="常见问题一：在Ie6下，内容会把父元素设置好的宽高撑开。计算一定要精确"></a>常见问题一：在Ie6下，内容会把父元素设置好的宽高撑开。计算一定要精确</h4><hr>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">400px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">210px</span>;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">    <span class="attribute">float</span>:left</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">float</span>:right;</div><div class="line">    <span class="attribute">overflow</span>:hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.div</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">180px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">180px</span>;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">25px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/1-1.png" alt=""></p>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/1-2.png" alt=""></p>
<a id="more"></a>
<h4 id="常见问题二：在IE6元素浮动，如果宽度需要内容撑开，里面块级元素的内容也要加浮动"><a href="#常见问题二：在IE6元素浮动，如果宽度需要内容撑开，里面块级元素的内容也要加浮动" class="headerlink" title="常见问题二：在IE6元素浮动，如果宽度需要内容撑开，里面块级元素的内容也要加浮动"></a>常见问题二：在IE6元素浮动，如果宽度需要内容撑开，里面块级元素的内容也要加浮动</h4><hr>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">400px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">    <span class="attribute">float</span>:right;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">h3</span>&#123;</div><div class="line">    <span class="attribute">height</span>:<span class="number">30px</span>;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>左侧<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>右侧<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/2-1.png" alt=""></p>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/2-2.png" alt=""></p>
<hr>
<h4 id="常见问题三：p里面不要套用p标签或者标题标签"><a href="#常见问题三：p里面不要套用p标签或者标题标签" class="headerlink" title="常见问题三：p里面不要套用p标签或者标题标签"></a>常见问题三：p里面不要套用p标签或者标题标签</h4><hr>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/3-1.png" alt=""></p>
<h4 id="常见问题四：IE6下最小高度问题"><a href="#常见问题四：IE6下最小高度问题" class="headerlink" title="常见问题四：IE6下最小高度问题"></a>常见问题四：IE6下最小高度问题</h4><hr>
<ul>
<li><p>当<code>height&lt;19px</code>的时候会被当作19px来处理</p>
</li>
<li><p>解决办法：<code>overflow:hidden</code></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    height:2px;</div><div class="line">    background:red;</div><div class="line">    overflow:hidden</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/4-1.png" alt=""></p>
<h4 id="常见问题五：border-1px-dotted-IE6不支持"><a href="#常见问题五：border-1px-dotted-IE6不支持" class="headerlink" title="常见问题五：border:1px dotted; IE6不支持"></a>常见问题五：<code>border:1px dotted</code>; <code>IE6</code>不支持</h4><hr>
<ul>
<li>解决办法：切背景平铺</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width:100px;</div><div class="line">    height:100px;</div><div class="line">    border:1px dotted red;</div><div class="line">    margin:100px auto;</div><div class="line">&#125;</div><div class="line">        </div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/5-1.png" alt=""></p>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/5-2.png" alt=""></p>
<h4 id="常见问题六：IE6下，父元素用边框，子元素的margin会消失"><a href="#常见问题六：IE6下，父元素用边框，子元素的margin会消失" class="headerlink" title="常见问题六：IE6下，父元素用边框，子元素的margin会消失"></a>常见问题六：IE6下，父元素用边框，子元素的margin会消失</h4><hr>
<ul>
<li>解决办法：触发父元素的<code>haslayout</code>;</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid red;</div><div class="line">    <span class="attribute">zoom</span>:<span class="number">1</span>;</div><div class="line">    <span class="comment">/*padding:1px;*/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.div</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">100px</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p> <img src="http://7xq6al.com1.z0.glb.clouddn.com/6-1.png" alt=""></p>
<p> <img src="http://7xq6al.com1.z0.glb.clouddn.com/6-2.png" alt=""></p>
<h4 id="常见问题七：IE6双边距bug：横向的margin值会被放大为两倍"><a href="#常见问题七：IE6双边距bug：横向的margin值会被放大为两倍" class="headerlink" title="常见问题七：IE6双边距bug：横向的margin值会被放大为两倍"></a>常见问题七：<code>IE6</code>双边距<code>bug</code>：横向的<code>margin</code>值会被放大为两倍</h4><hr>
<ul>
<li>解决方法：<code>display:inline</code>;</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width:200px;</div><div class="line">    height:200px;</div><div class="line">    background:red;</div><div class="line">    float:left;</div><div class="line">    margin:100px;</div><div class="line">    display:inline;</div><div class="line">&#125;</div><div class="line">        </div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/7-1.png" alt=""></p>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/7-2.png" alt=""></p>
<hr>
<h4 id="常见问题八：IE6下外边距消失：当父元素的宽度和一行内容的宽度的差别-gt-3px的时候"><a href="#常见问题八：IE6下外边距消失：当父元素的宽度和一行内容的宽度的差别-gt-3px的时候" class="headerlink" title="常见问题八：IE6下外边距消失：当父元素的宽度和一行内容的宽度的差别&gt;3px的时候"></a>常见问题八：IE6下外边距消失：当父元素的宽度和一行内容的宽度的差别<code>&gt;3px</code>的时候</h4><hr>
<ul>
<li>IE6双边距bug：横向的<code>margin</code>值会被放大为两倍</li>
<li>解决方法：<code>display:inline;</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    float:left;</div><div class="line">    border:10px solid #000;</div><div class="line">    width:600px;</div><div class="line">&#125;</div><div class="line">.box div&#123;</div><div class="line">    width:100px;</div><div class="line">    height:100px;</div><div class="line">    background:red;</div><div class="line">    margin:20px;</div><div class="line">    border:5px solid blue;</div><div class="line">    float:left;</div><div class="line">    display:inline;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/8-1.png" alt=""></p>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/8-2.png" alt=""></p>
<h4 id="常见问题九：IE6，7下-li本身没有浮动，但是li里面的内容有浮动，每个li下边就会产生一个间距"><a href="#常见问题九：IE6，7下-li本身没有浮动，但是li里面的内容有浮动，每个li下边就会产生一个间距" class="headerlink" title="常见问题九：IE6，7下 li本身没有浮动，但是li里面的内容有浮动，每个li下边就会产生一个间距"></a>常见问题九：<code>IE6，7</code>下 <code>li</code>本身没有浮动，但是<code>li</code>里面的内容有浮动，每个<code>li</code>下边就会产生一个间距</h4><hr>
<ul>
<li>解决办法：<ul>
<li>1、给<code>li</code>添加 <code>vertical-align:top</code></li>
<li>2、给<code>li</code>添加浮动</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">ul&#123;</div><div class="line">    width:</div><div class="line">&#125;</div><div class="line">li&#123;</div><div class="line">    list-style:none;</div><div class="line">    height:30px;</div><div class="line">    border:1px solid #000;</div><div class="line">    /*vertical-align:top*/;float:left;</div><div class="line">&#125;</div><div class="line">a&#123;</div><div class="line">    width:100px;</div><div class="line">    height:30px;</div><div class="line">    float:left;</div><div class="line">    background:red;</div><div class="line">&#125;</div><div class="line">span&#123;</div><div class="line">    width:100px;</div><div class="line">    height:30px;</div><div class="line">    float:right;</div><div class="line">    background:blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/9-1.png" alt=""></p>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/9-2.png" alt=""></p>
<h4 id="常见问题十：IE6，7下面让两个块级元素在一行内显示-都用浮动"><a href="#常见问题十：IE6，7下面让两个块级元素在一行内显示-都用浮动" class="headerlink" title="常见问题十：IE6，7下面让两个块级元素在一行内显示 都用浮动"></a>常见问题十：IE6，7下面让两个块级元素在一行内显示 都用浮动</h4><hr>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">    <span class="attribute">float</span>:left;<span class="comment">/*margin-left:100px;*/</span></div><div class="line">&#125;</div><div class="line">```		</div><div class="line"></div><div class="line"></div><div class="line">#### 常见问题十一：<span class="selector-tag">IE6</span>下的文字溢出</div><div class="line"><span class="selector-tag">---</span></div><div class="line"></div><div class="line">&gt; 子元素的宽度和父元素的宽度相差小于3<span class="selector-tag">px</span>的时候，两个浮动元素之间有注释或者行内元素的时候</div><div class="line"></div><div class="line"><span class="selector-tag">-</span> 解决办法：用<span class="selector-tag">div</span>把注释和行内元素包裹起来</div><div class="line"></div><div class="line">```<span class="selector-tag">css</span></div><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">400px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">400px</span>;</div><div class="line">    <span class="attribute">float</span>:right</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="comment">&lt;!--IE6下的文字溢出--&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>@poetries<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="常见问题十二：IE6下，当浮动元素和绝对定位元素是并列关系的时候，绝对定位元素会消失"><a href="#常见问题十二：IE6下，当浮动元素和绝对定位元素是并列关系的时候，绝对定位元素会消失" class="headerlink" title="常见问题十二：IE6下，当浮动元素和绝对定位元素是并列关系的时候，绝对定位元素会消失"></a>常见问题十二：IE6下，当浮动元素和绝对定位元素是并列关系的时候，绝对定位元素会消失</h4><hr>
<ul>
<li>解决办法：给定位元素外面包一个div</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">ul</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">150px</span>; </div><div class="line">    <span class="attribute">height</span>:<span class="number">150px</span>;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">50px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">span</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">50px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">50px</span>;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">    <span class="attribute">right</span>:-<span class="number">20px</span>;</div><div class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="常见问题十三：IE67下，子元素有相对定位属性，父元素的overflow包不住子元素"><a href="#常见问题十三：IE67下，子元素有相对定位属性，父元素的overflow包不住子元素" class="headerlink" title="常见问题十三：IE67下，子元素有相对定位属性，父元素的overflow包不住子元素"></a>常见问题十三：IE67下，子元素有相对定位属性，父元素的overflow包不住子元素</h4><hr>
<ul>
<li>解决办法：给父元素也添加相对定位属性</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">*&#123;margin:0px;padding:0px;&#125;</div><div class="line">.box&#123;</div><div class="line">    width:200px;</div><div class="line">    height:200px;</div><div class="line">    border:1px solid red;</div><div class="line">    overflow:auto;</div><div class="line">    position:relative;</div><div class="line">&#125;</div><div class="line">.con&#123;</div><div class="line">    width:150px;</div><div class="line">    height:300px;</div><div class="line">    background:blue;</div><div class="line">    position:relative;</div><div class="line">&#125;</div><div class="line">```		</div><div class="line"></div><div class="line">```html</div><div class="line">&lt;div class="box"&gt;</div><div class="line">	&lt;div class="con"&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h4 id="常见问题十四：IE6下，绝对定位的父元素的宽高为奇数的时候，元素的right和bottom值会有1px的偏差"><a href="#常见问题十四：IE6下，绝对定位的父元素的宽高为奇数的时候，元素的right和bottom值会有1px的偏差" class="headerlink" title="常见问题十四：IE6下，绝对定位的父元素的宽高为奇数的时候，元素的right和bottom值会有1px的偏差"></a>常见问题十四：IE6下，绝对定位的父元素的宽高为奇数的时候，元素的right和bottom值会有1px的偏差</h4><hr>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">201px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">201px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid red;</div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">span</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">20px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">20px</span>;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">    <span class="attribute">right</span>:-<span class="number">1px</span>;<span class="attribute">bottom</span>:-<span class="number">1px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="常见问题十五：IE6不支持固定定位-css没办法解决"><a href="#常见问题十五：IE6不支持固定定位-css没办法解决" class="headerlink" title="常见问题十五：IE6不支持固定定位  css没办法解决"></a>常见问题十五：IE6不支持固定定位  css没办法解决</h4><hr>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;<span class="comment">/*去除默认外边距、内边距*/</span></div><div class="line"></div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">    <span class="attribute">position</span>:fixed;</div><div class="line">    <span class="attribute">left</span>:<span class="number">50px</span>;</div><div class="line">    <span class="attribute">top</span>:<span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">div class="box"&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="常见问题十六：IE6-7下，输入类型的表单控件上下各有1px间隙"><a href="#常见问题十六：IE6-7下，输入类型的表单控件上下各有1px间隙" class="headerlink" title="常见问题十六：IE6 7下，输入类型的表单控件上下各有1px间隙"></a>常见问题十六：IE6 7下，输入类型的表单控件上下各有1px间隙</h4><hr>
<ul>
<li>解决办法：给input加浮动</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">32px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid red;  </div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">28px</span>;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="常见问题十七：IE6-7下，输入类型的表单控件加border-none没用"><a href="#常见问题十七：IE6-7下，输入类型的表单控件加border-none没用" class="headerlink" title="常见问题十七：IE6 7下，输入类型的表单控件加border:none没用"></a>常见问题十七：IE6 7下，输入类型的表单控件加border:none没用</h4><hr>
<ul>
<li>解决办法：<ul>
<li>1、border:0;</li>
<li>2、给input添加背景颜色</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">32px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid red;  </div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">28px</span>;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">    <span class="attribute">border</span>:none;</div><div class="line">    <span class="attribute">background</span>:<span class="number">#fff</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="常见问题十八："><a href="#常见问题十八：" class="headerlink" title="常见问题十八："></a>常见问题十八：</h4><hr>
<blockquote>
<ul>
<li>1、输入类型的表单控件添加背景图片url和no-repeat之间一定要有空格</li>
<li>2、输入文字时候，背景图片会跟着移动</li>
</ul>
</blockquote>
<ul>
<li>解决办法：2、给背景图片固定定位，但是在IE7下 背景图片显示会错误</li>
<li>最佳办法：把背景图添加给父元素</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">32px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid red; </div><div class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(ball.png) no-repeat; </div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">30px</span>;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">    <span class="attribute">border</span>:none;</div><div class="line">    <span class="attribute">background</span>:none;</div><div class="line">    <span class="comment">/*background:#fff url(ball.png) no-repeat fixed;*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="常见问题十九：IE6不支持tbody"><a href="#常见问题十九：IE6不支持tbody" class="headerlink" title="常见问题十九：IE6不支持tbody"></a>常见问题十九：IE6不支持tbody</h4><hr>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-tag">table</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">border-collapse</span>:collapse;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">tbody</span>&#123;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">tr</span>&#123;</div><div class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(ball.png) no-repeat;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">td</span>&#123;</div><div class="line">    <span class="attribute">height</span>:<span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;常见问题一：在Ie6下，内容会把父元素设置好的宽高撑开。计算一定要精确&quot;&gt;&lt;a href=&quot;#常见问题一：在Ie6下，内容会把父元素设置好的宽高撑开。计算一定要精确&quot; class=&quot;headerlink&quot; title=&quot;常见问题一：在Ie6下，内容会把父元素设置好的宽高撑开。计算一定要精确&quot;&gt;&lt;/a&gt;常见问题一：在Ie6下，内容会把父元素设置好的宽高撑开。计算一定要精确&lt;/h4&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.box&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;400px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.left&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;210px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;:left&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.right&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;:right;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;overflow&lt;/span&gt;:hidden;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.div&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;180px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;180px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:blue;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;25px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;left&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;right&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;div&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq6al.com1.z0.glb.clouddn.com/1-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq6al.com1.z0.glb.clouddn.com/1-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="CSS" scheme="http://blog.poetries.top/tags/CSS/"/>
    
      <category term="csshack" scheme="http://blog.poetries.top/tags/csshack/"/>
    
  </entry>
  
  <entry>
    <title>弹性布局总结</title>
    <link href="http://blog.poetries.top/2017/02/06/flex/"/>
    <id>http://blog.poetries.top/2017/02/06/flex/</id>
    <published>2017-02-06T11:20:43.000Z</published>
    <updated>2017-02-15T11:25:30.948Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><strong>以下6个属性设置在容器上</strong><ul>
<li><code>flex-direction</code></li>
<li><code>flex-wrap</code></li>
<li><code>flex-flow</code></li>
<li><code>justify-content</code></li>
<li><code>align-items</code></li>
<li><code>align-content</code></li>
</ul>
</li>
<li><strong>属性详解</strong><ul>
<li><code>flex-direction: row</code> | <code>row-reverse</code> | <code>column</code> | <code>column-reverse</code>;</li>
<li><code>flex-wrap: nowrap</code> | <code>wrap</code> | <code>wrap-reverse</code>;</li>
<li><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code><ul>
<li><code>flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;</code>;</li>
</ul>
</li>
<li><code>justify-content</code>属性定义了项目在主轴上的对齐方式。<ul>
<li><code>justify-content: flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>space-between</code> | <code>space-around</code>;</li>
</ul>
</li>
<li><code>align-items</code>属性定义项目在交叉轴上如何对齐。<ul>
<li><code>align-items: flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>baseline</code> | <code>stretch</code>;</li>
</ul>
</li>
<li><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。<ul>
<li><code>align-content: flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>space-between</code> | <code>space-around</code> | <code>stretch</code>;</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p><strong>以下6个属性设置在项目上</strong></p>
<ul>
<li><code>order</code></li>
<li><code>flex-grow</code></li>
<li><code>flex-shrink</code></li>
<li><code>flex-basis</code></li>
<li><code>flex</code></li>
<li><code>align-self</code></li>
</ul>
</li>
<li><p><strong>属性详解</strong></p>
<ul>
<li><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为<code>0</code></li>
<li><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</li>
<li><code>flex-shrink</code>属性定义了项目的缩小比例，默认为<code>1</code>，即如果空间不足，该项目将缩小。</li>
<li><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</li>
<li><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</li>
<li><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</li>
<li><code>align-self: auto</code> | <code>flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>baseline</code> | <code>stretch</code>;</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><strong>图解flex布局</strong></li>
</ul>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/0001.jpg" alt="enter description here"></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;以下6个属性设置在容器上&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flex-direction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-wrap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-flow&lt;/code&gt;&lt;/
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="HTML5" scheme="http://blog.poetries.top/tags/HTML5/"/>
    
      <category term="弹性布局" scheme="http://blog.poetries.top/tags/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>ES6新特性</title>
    <link href="http://blog.poetries.top/2017/02/04/es6-new-property/"/>
    <id>http://blog.poetries.top/2017/02/04/es6-new-property/</id>
    <published>2017-02-04T10:20:43.000Z</published>
    <updated>2017-02-15T11:25:30.948Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h4><hr>
<ul>
<li>块级作用域</li>
<li>块级变量<code>let</code></li>
<li>块级常量 <code>const</code></li>
</ul>
<h4 id="二、箭头函数"><a href="#二、箭头函数" class="headerlink" title="二、箭头函数"></a>二、箭头函数</h4><hr>
<ul>
<li><code>sum = (a,b)=&gt; a + b</code></li>
<li><code>nums.forEach(v=&gt; {console.log(v)})</code></li>
<li>词法 <code>this</code></li>
</ul>
<h4 id="三、参数处理"><a href="#三、参数处理" class="headerlink" title="三、参数处理"></a>三、参数处理</h4><hr>
<ul>
<li>默认参数值</li>
<li>剩余参数</li>
<li>展开运算符</li>
</ul>
<h4 id="四、模板字面量"><a href="#四、模板字面量" class="headerlink" title="四、模板字面量"></a>四、模板字面量</h4><hr>
<ul>
<li>多行字符串</li>
<li>字符串插值</li>
<li>带标签的模板字面量</li>
<li>原始字符串</li>
</ul>
<h4 id="五、原有字面量加强"><a href="#五、原有字面量加强" class="headerlink" title="五、原有字面量加强"></a>五、原有字面量加强</h4><hr>
<ul>
<li>更安全的二进制字面量(0b1111101)</li>
<li>更安全的八进制字面量(0o767)</li>
<li>字符串支持<code>Unicode</code><ul>
<li><code>String.fromCodePoint</code></li>
<li><code>String.prototype.codePointAt</code></li>
</ul>
</li>
<li>正则表达式字面量添加 Unicode</li>
<li>正则表达式添加y标记，支持粘滞匹配</li>
<li>对象属性加强<ul>
<li>属性定义支持短语法<code>obj = {x,y}</code></li>
<li>属性名支持表达式 <code>obj = {[&quot;baz&quot;+quux()]:42}</code></li>
<li>添加<code>__proto__</code>属性，但不建议使用</li>
</ul>
</li>
</ul>
<h4 id="六、解构赋值"><a href="#六、解构赋值" class="headerlink" title="六、解构赋值"></a>六、解构赋值</h4><hr>
<ul>
<li>匹配 <code>[b,a] = [a,b]</code></li>
<li>对象匹配 <code>let {a,b,c} = objABC</code></li>
<li>参数匹配 <code>function g({name:n,val:v}){}</code></li>
</ul>
<h4 id="七、模块"><a href="#七、模块" class="headerlink" title="七、模块"></a>七、模块</h4><hr>
<ul>
<li>导入(<code>import</code>)</li>
<li>导出(<code>export</code>)</li>
<li>默认导出(<code>export default</code>)</li>
</ul>
<h4 id="八、类"><a href="#八、类" class="headerlink" title="八、类"></a>八、类</h4><hr>
<ul>
<li>使用<code>extends</code>继承</li>
<li>重写构造器</li>
<li><code>super</code>关键字</li>
</ul>
<h4 id="九、迭代"><a href="#九、迭代" class="headerlink" title="九、迭代"></a>九、迭代</h4><hr>
<ul>
<li>迭代器</li>
<li><code>for of</code></li>
</ul>
<h4 id="十、生成器"><a href="#十、生成器" class="headerlink" title="十、生成器"></a>十、生成器</h4><hr>
<h4 id="十一、promise"><a href="#十一、promise" class="headerlink" title="十一、promise"></a>十一、promise</h4><hr>
<h4 id="十二、元编程"><a href="#十二、元编程" class="headerlink" title="十二、元编程"></a>十二、元编程</h4><hr>
<ul>
<li>代理(<code>proxy</code>)</li>
<li>反射(<code>Reflex</code>)</li>
</ul>
<h4 id="十三、新增数据类型"><a href="#十三、新增数据类型" class="headerlink" title="十三、新增数据类型"></a>十三、新增数据类型</h4><hr>
<ul>
<li><code>Symbol</code>类型</li>
<li><code>Set</code>类型</li>
<li><code>Map</code>类型</li>
<li><code>WeakSet</code>类型</li>
<li><code>WeakMap</code>类型</li>
<li><code>TypedArray</code>类型</li>
</ul>
<h4 id="十四、原有内置对象API增强"><a href="#十四、原有内置对象API增强" class="headerlink" title="十四、原有内置对象API增强"></a>十四、原有内置对象<code>API</code>增强</h4><hr>
<ul>
<li><p><code>Object.assign</code></p>
</li>
<li><p><code>Array.from</code></p>
</li>
<li><p><code>Array.of</code></p>
</li>
<li><p><code>Array.prototype.fill</code></p>
</li>
<li><p><code>Array.prototype.find</code></p>
</li>
<li><p><code>Array.prototype.findIndex</code></p>
</li>
<li><p><code>Array.prototype.copyWithin</code></p>
</li>
<li><p><code>Array.prototype.entries</code></p>
</li>
<li><p><code>Array.prototype.keys</code></p>
</li>
<li><p><code>Array.prototype.values</code></p>
</li>
<li><p><code>String.prototype.includes</code></p>
</li>
<li><p><code>String.prototype.repeat</code></p>
</li>
<li><p><code>String.prototype.startsWidth</code></p>
</li>
<li><p><code>String.prototype.endsWidth()</code></p>
</li>
<li><p><code>Number.EPSILON</code></p>
</li>
<li><p><code>Number.isInteger</code></p>
</li>
<li><p><code>Number.isSafeInteger</code></p>
</li>
<li><p><code>Number.isFinite</code></p>
</li>
<li><p><code>Number.isNaN(&quot;NaN&quot;)</code></p>
</li>
<li><p><code>Math.acosh</code></p>
</li>
<li><p><code>Math.hypot</code></p>
</li>
<li><p><code>Math.imul</code></p>
</li>
<li><p><code>Math.sign</code></p>
</li>
<li><p><code>Math.trunc</code></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、作用域&quot;&gt;&lt;a href=&quot;#一、作用域&quot; class=&quot;headerlink&quot; title=&quot;一、作用域&quot;&gt;&lt;/a&gt;一、作用域&lt;/h4&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;块级作用域&lt;/li&gt;
&lt;li&gt;块级变量&lt;code&gt;let&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;块级
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://blog.poetries.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>基于gulp的工作流配置</title>
    <link href="http://blog.poetries.top/2017/01/21/gulp-works/"/>
    <id>http://blog.poetries.top/2017/01/21/gulp-works/</id>
    <published>2017-01-21T09:40:43.000Z</published>
    <updated>2017-02-15T11:25:30.948Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>配置一套基于<code>gulp</code>的工作流，满足日常的基本开发。</p>
</blockquote>
<a id="more"></a>
<h3 id="一、目录结构"><a href="#一、目录结构" class="headerlink" title="一、目录结构"></a>一、目录结构</h3><hr>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-12325acbb263363b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一套基于gulp的工作流"></p>
<h3 id="二、-package-json"><a href="#二、-package-json" class="headerlink" title="二、 package.json"></a>二、 package.json</h3><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"gulp-project"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"dev"</span>: <span class="string">"gulp dev"</span>, <span class="comment">//npm run dev   开发</span></div><div class="line">    <span class="string">"build"</span>: <span class="string">"gulp build"</span>, <span class="comment">//npm run build   发布</span></div><div class="line">    <span class="string">"upload"</span>: <span class="string">"gulp upload"</span>, <span class="comment">//npm run upload 上传服务器 </span></div><div class="line">    <span class="string">"zip"</span>: <span class="string">"gulp zip"</span> <span class="comment">////npm run zip 打包文件</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.22.0"</span>, <span class="comment">//编译es6</span></div><div class="line">    <span class="string">"browser-sync"</span>: <span class="string">"^2.15.0"</span>,  <span class="comment">//监听改动刷新</span></div><div class="line">    <span class="string">"gulp"</span>: <span class="string">"^3.9.1"</span>, <span class="comment">//gulp</span></div><div class="line">    <span class="string">"gulp-autoprefixer"</span>: <span class="string">"^3.1.1"</span>, <span class="comment">//补齐css浏览器前缀</span></div><div class="line">    <span class="string">"gulp-babel"</span>: <span class="string">"^6.1.2"</span>, <span class="comment">// Es6</span></div><div class="line">    <span class="string">"gulp-clean"</span>: <span class="string">"^0.3.2"</span>, <span class="comment">//删除文件</span></div><div class="line">    <span class="string">"gulp-clean-css"</span>: <span class="string">"^2.0.12"</span>, <span class="comment">//css压缩，gulp-minify-css不更新了</span></div><div class="line">    <span class="string">"gulp-concat"</span>: <span class="string">"^2.6.0"</span>,<span class="comment">//合并文件</span></div><div class="line">    <span class="string">"gulp-ftp"</span>: <span class="string">"^1.1.0"</span>,<span class="comment">//提交到ftp服务器</span></div><div class="line">    <span class="string">"gulp-git"</span>: <span class="string">"^1.11.3"</span>,<span class="comment">//提交到git</span></div><div class="line">    <span class="string">"gulp-htmlmin"</span>: <span class="string">"^2.0.0"</span>,<span class="comment">//压缩html</span></div><div class="line">    <span class="string">"gulp-imagemin"</span>: <span class="string">"^3.0.3"</span>,<span class="comment">//压缩图片</span></div><div class="line">    <span class="string">"gulp-rename"</span>: <span class="string">"^1.2.2"</span>,<span class="comment">//重命名文件</span></div><div class="line">    <span class="string">"gulp-rev-append"</span>: <span class="string">"^0.1.6"</span>, <span class="comment">//添加MD5版本号，这里改成了时间戳</span></div><div class="line">    <span class="string">"gulp-sass"</span>: <span class="string">"^2.3.2"</span>,<span class="comment">//编译SASS</span></div><div class="line">    <span class="string">"gulp-uglify"</span>: <span class="string">"^2.0.0"</span>,<span class="comment">//js压缩</span></div><div class="line">    <span class="string">"gulp-util"</span>: <span class="string">"^3.0.7"</span>, <span class="comment">//说是ftp配套用的，看了下是包装了些常用函数</span></div><div class="line">    <span class="string">"gulp-zip"</span>: <span class="string">"^3.2.0"</span> <span class="comment">// 打包文件</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、-gulpfile-js"><a href="#三、-gulpfile-js" class="headerlink" title="三、 gulpfile.js"></a>三、 gulpfile.js</h3><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//组件</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">	browserSync = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>).create(), <span class="comment">//监听刷新</span></div><div class="line">    reload = browserSync.reload,</div><div class="line">    ftp = <span class="built_in">require</span>(<span class="string">'gulp-ftp'</span>), <span class="comment">// ftp上传</span></div><div class="line">    gutil = <span class="built_in">require</span>(<span class="string">'gulp-util'</span>),</div><div class="line">    sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>), <span class="comment">// sass</span></div><div class="line">    cleancss = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>), <span class="comment">// CSS压缩</span></div><div class="line">    autoprefixer = <span class="built_in">require</span>(<span class="string">"gulp-autoprefixer"</span>),</div><div class="line">    uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>), <span class="comment">// js压缩</span></div><div class="line">    concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>), <span class="comment">// 合并文件</span></div><div class="line">    rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>), <span class="comment">// 重命名</span></div><div class="line">    clean = <span class="built_in">require</span>(<span class="string">'gulp-clean'</span>), <span class="comment">//清空文件夹</span></div><div class="line">    imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>), <span class="comment">//压缩图片</span></div><div class="line">    zip = <span class="built_in">require</span>(<span class="string">'gulp-zip'</span>), <span class="comment">//打包文件</span></div><div class="line">    rev = <span class="built_in">require</span>(<span class="string">'gulp-rev-append'</span>), <span class="comment">//添加MD5</span></div><div class="line">    htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>), <span class="comment">// 压缩html</span></div><div class="line">	git = <span class="built_in">require</span>(<span class="string">'gulp-git'</span>),     <span class="comment">//git</span></div><div class="line">	babel = <span class="built_in">require</span>(<span class="string">"gulp-babel"</span>); <span class="comment">//ES6 转es5</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// =========== 开发构建流程 [多文件输出] ==============</span></div><div class="line"></div><div class="line"><span class="comment">//dev</span></div><div class="line">gulp.task(<span class="string">'sass:dev'</span>, () =&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'src/sass/*.scss'</span>)</div><div class="line">        .pipe(sass())</div><div class="line">        .pipe(gulp.dest(<span class="string">'src/css/'</span>))</div><div class="line">        .pipe(reload(&#123; <span class="attr">stream</span>: <span class="literal">true</span> &#125;))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 合并、重命名css</span></div><div class="line">gulp.task(<span class="string">'css:dev'</span>, [<span class="string">'sass:dev'</span>], () =&gt; &#123;</div><div class="line">    gulp.src([<span class="string">'src/css/*.css'</span>, <span class="string">'!src/css/areaMap.css'</span>])</div><div class="line">        .pipe(concat(<span class="string">'all.css'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/css/'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 合并、重命名js</span></div><div class="line">gulp.task(<span class="string">'js:dev'</span>, () =&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'src/js/*.js'</span>)</div><div class="line">    	.pipe(babel(&#123;</div><div class="line">		      	 	<span class="attr">presets</span>: [<span class="string">'es2015'</span>]</div><div class="line">     			&#125;)) <span class="comment">//ES6转ES5</span></div><div class="line">        <span class="comment">//.pipe(concat('all.js')) 开发阶段分开输出js文件</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/js/'</span>))</div><div class="line">        .pipe(reload(&#123; <span class="attr">stream</span>: <span class="literal">true</span> &#125;))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// HTML</span></div><div class="line"></div><div class="line">gulp.task(<span class="string">'html:dev'</span>, () =&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'src/tpl/*.html'</span>)</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 将lib的库文件对应到指定位置</span></div><div class="line">gulp.task(<span class="string">'lib:dev'</span>, () =&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'./src/lib/*'</span>)</div><div class="line">        .pipe(gulp.dest(<span class="string">'./dist/lib/'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//开发构建</span></div><div class="line">gulp.task(<span class="string">'dev'</span>, [<span class="string">'css:dev'</span>, <span class="string">'js:dev'</span>, <span class="string">'html:dev'</span>, <span class="string">'img'</span>,<span class="string">'copyFonts'</span>,<span class="string">'lib'</span>], () =&gt; &#123;</div><div class="line">    browserSync.init(&#123;</div><div class="line">        <span class="attr">server</span>: &#123;</div><div class="line">            <span class="attr">baseDir</span>: <span class="string">"dist"</span> <span class="comment">// 设置服务器的根目录为dist目录</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">notify</span>: <span class="literal">false</span> <span class="comment">// 开启静默模式</span></div><div class="line">    &#125;);</div><div class="line">    <span class="comment">// 我们使用gulp的文件监听功能，来实时编译修改过后的文件</span></div><div class="line"></div><div class="line">    gulp.watch(<span class="string">'src/js/*.js'</span>, [<span class="string">'js:dev'</span>]);</div><div class="line">    gulp.watch(<span class="string">'src/sass/*.scss'</span>, [<span class="string">'sass:dev'</span>]);</div><div class="line">    gulp.watch(<span class="string">'src/tpl/*.html'</span>, [<span class="string">'html:dev'</span>]);</div><div class="line">    gulp.watch(<span class="string">'src/fonts/**'</span>, [<span class="string">'copyFonts'</span>]);</div><div class="line">    gulp.watch(<span class="string">'src/images/**'</span>, [<span class="string">'img'</span>]);</div><div class="line">    gulp.watch(<span class="string">'src/lib/**'</span>, [<span class="string">'lib'</span>]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// =========== 正式构建 build [单文件输出] ==============</span></div><div class="line"></div><div class="line"><span class="comment">// sass解析</span></div><div class="line">gulp.task(<span class="string">'sass'</span>, () =&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'src/sass/*.scss'</span>)</div><div class="line">        <span class="comment">//输出为压缩</span></div><div class="line">         .pipe(sass(&#123;</div><div class="line">             <span class="attr">outputStyle</span>: <span class="string">'compressed'</span></div><div class="line">         &#125;))</div><div class="line">        .pipe(sass())</div><div class="line">        .pipe(gulp.dest(<span class="string">'src/css/'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 合并、压缩、重命名css</span></div><div class="line"></div><div class="line">gulp.task(<span class="string">'css'</span>, [<span class="string">'sass'</span>], () =&gt; &#123;</div><div class="line">    gulp.src([<span class="string">'src/css/*.css'</span>, <span class="string">'!src/css/areaMap.css'</span>])</div><div class="line">        .pipe(concat(<span class="string">'all.css'</span>))</div><div class="line">        .pipe(autoprefixer(&#123;</div><div class="line">            <span class="attr">browsers</span>: [<span class="string">'last 2 versions'</span>, <span class="string">'Android &gt;= 4.0'</span>],</div><div class="line">            <span class="attr">cascade</span>: <span class="literal">true</span>, <span class="comment">//是否美化属性值 默认：true 像这样：</span></div><div class="line">            remove: <span class="literal">false</span> <span class="comment">//是否去掉不必要的前缀 默认：true </span></div><div class="line">        &#125;))</div><div class="line">        .pipe(cleancss()) <span class="comment">//压缩css</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/css'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 合并，压缩,重命名js文件</span></div><div class="line"></div><div class="line">gulp.task(<span class="string">'js'</span>, () =&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'src/js/*.js'</span>)</div><div class="line">    	.pipe(babel(&#123;</div><div class="line">		      	 	<span class="attr">presets</span>: [<span class="string">'es2015'</span>]</div><div class="line">     			&#125;)) <span class="comment">//ES6转ES5</span></div><div class="line">        .pipe(concat(<span class="string">'all.js'</span>))</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/js'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 压缩HTML</span></div><div class="line"></div><div class="line">gulp.task(<span class="string">'html'</span>, () =&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'src/tpl/*.html'</span>)</div><div class="line">        .pipe(rev())<span class="comment">//记得在引用地址后面加后缀，插件原本是ver=@@hash ,这里改成了v=@@hash</span></div><div class="line">      <span class="comment">//&lt;link rel="stylesheet" href="css/all.css?v=@@hash"&gt;</span></div><div class="line">      <span class="comment">//&lt;script src="js/all.js?v=@@hash"&gt;&lt;/script&gt;</span></div><div class="line">        .pipe(htmlmin(&#123;</div><div class="line">            <span class="attr">removeComments</span>: <span class="literal">true</span>, <span class="comment">//清除HTML注释</span></div><div class="line">            collapseWhitespace: <span class="literal">true</span>, <span class="comment">//压缩HTML</span></div><div class="line">            collapseBooleanAttributes: <span class="literal">true</span>, <span class="comment">//省略布尔属性的值 &lt;input checked="true"/&gt; ==&gt; &lt;input /&gt;</span></div><div class="line">            removeEmptyAttributes: <span class="literal">true</span>, <span class="comment">//删除所有空格作属性值 &lt;input id="" /&gt; ==&gt; &lt;input /&gt;</span></div><div class="line">            removeScriptTypeAttributes: <span class="literal">true</span>, <span class="comment">//删除&lt;script&gt;的type="text/javascript"</span></div><div class="line">            removeStyleLinkTypeAttributes: <span class="literal">true</span>, <span class="comment">//删除&lt;style&gt;和&lt;link&gt;的type="text/css"</span></div><div class="line">            minifyJS: <span class="literal">true</span>, <span class="comment">//压缩页面JS</span></div><div class="line">            minifyCSS: <span class="literal">true</span> <span class="comment">//压缩页面CSS</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//压缩图片</span></div><div class="line"></div><div class="line">gulp.task(<span class="string">'img'</span>, () =&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'src/images/*.&#123;png,jpg,gif,ico&#125;'</span>)</div><div class="line">        .pipe(imagemin(&#123;</div><div class="line">            <span class="attr">optimizationLevel</span>: <span class="number">5</span>, <span class="comment">//类型：Number  默认：3  取值范围：0-7（优化等级）</span></div><div class="line">            progressive: <span class="literal">true</span>, <span class="comment">//类型：Boolean 默认：false 无损压缩jpg图片</span></div><div class="line">            interlaced: <span class="literal">true</span>, <span class="comment">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span></div><div class="line">            multipass: <span class="literal">true</span> <span class="comment">//类型：Boolean 默认：false 多次优化svg直到完全优化</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/images'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//字体文件</span></div><div class="line">gulp.task(<span class="string">'copyFonts'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/fonts/**/*'</span>)</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/fonts/'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 清空图片、样式、js</span></div><div class="line"></div><div class="line">gulp.task(<span class="string">'clean'</span>, () =&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'dist'</span>, &#123; <span class="attr">read</span>: <span class="literal">false</span> &#125;)</div><div class="line">        .pipe(clean(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 将bower的库文件对应到指定位置</span></div><div class="line"></div><div class="line">gulp.task(<span class="string">'lib'</span>, () =&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'/src/lib/*'</span>)</div><div class="line">        .pipe(gulp.dest(<span class="string">'/dist/lib/'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// ================ 打包主体dist 文件夹 zip ====</div><div class="line"></div><div class="line">//打包主体dist 文件夹并按照时间重命名</div><div class="line">gulp.task(&apos;zip&apos;, function()&#123;</div><div class="line">      function checkTime(i) &#123;</div><div class="line">          if (i &lt; 10) &#123;</div><div class="line">              i = &quot;0&quot; + i</div><div class="line">          &#125;</div><div class="line">          return i</div><div class="line">      &#125;</div><div class="line">          </div><div class="line">      var d=new Date();</div><div class="line">      var year=d.getFullYear();</div><div class="line">      var month=checkTime(d.getMonth() + 1);</div><div class="line">      var day=checkTime(d.getDate());</div><div class="line">      var hour=checkTime(d.getHours());</div><div class="line">      var minute=checkTime(d.getMinutes());</div><div class="line"></div><div class="line">  return gulp.src(&apos;./dist/**&apos;)</div><div class="line">        .pipe(zip(year+month+day +hour+minute+&apos;.zip&apos;))</div><div class="line">        .pipe(gulp.dest(&apos;./zip&apos;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//正式构建</span></div><div class="line"></div><div class="line">gulp.task(<span class="string">'build'</span>, [<span class="string">'clean'</span>,<span class="string">'css'</span>, <span class="string">'js'</span>, <span class="string">'img'</span>, <span class="string">'html'</span>,<span class="string">'copyFonts'</span>,<span class="string">'lib'</span>]);</div><div class="line"></div><div class="line"><span class="comment">// ================ 上传 upload ====</span></div><div class="line"></div><div class="line">gulp.task(<span class="string">'upload'</span>, () =&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'dist/**'</span>)</div><div class="line">        .pipe(ftp(&#123;</div><div class="line">            <span class="attr">host</span>: <span class="string">'8.8.8.8'</span>, <span class="comment">// 远程主机ip</span></div><div class="line">            port: <span class="number">22</span>, <span class="comment">// 端口</span></div><div class="line">            user: <span class="string">'username'</span>, <span class="comment">// 帐号</span></div><div class="line">            pass: <span class="string">'password'</span>, <span class="comment">// 密码</span></div><div class="line">            remotePath: <span class="string">'/project'</span> <span class="comment">// 上传路径，不存在则新建</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(gutil.noop())</div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;配置一套基于&lt;code&gt;gulp&lt;/code&gt;的工作流，满足日常的基本开发。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Build" scheme="http://blog.poetries.top/categories/Build/"/>
    
    
      <category term="gulp" scheme="http://blog.poetries.top/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>webpack学习总结(二)</title>
    <link href="http://blog.poetries.top/2017/01/14/webpack-summary/"/>
    <id>http://blog.poetries.top/2017/01/14/webpack-summary/</id>
    <published>2017-01-14T09:40:43.000Z</published>
    <updated>2017-02-15T11:25:30.960Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>声明 本教程整理于互联网</p>
<p><code>webpack</code>是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，到实际需要的时候再异步加载。通过 <code>loader</code> 的转换，任何形式的资源都可以视作模块，比如<code>CommonJs</code>模块、 <code>AMD</code> 模块、 <code>ES6</code> 模块、<code>CSS</code>、图片、 <code>JSON</code>、<code>Coffeescript</code>、 LESS等</p>
</blockquote>
<h2 id="一、模块系统的演进"><a href="#一、模块系统的演进" class="headerlink" title="一、模块系统的演进"></a>一、模块系统的演进</h2><hr>
<ul>
<li><p>模块系统主要解决模块的定义、依赖和导出，先来看看已经存在的模块系统</p>
</li>
<li><p><code>&lt;script&gt;</code>标签</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;module1.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;module2.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;libraryA.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;module3.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>这是最原始的 <code>JavaScript</code> 文件加载方式，如果把每一个文件看做是一个模块，那么他们的接口通常是暴露在全局作用域下，也就是定义在 <code>window</code> 对象中，不同模块的接口调用都是一个作用域中，一些复杂的框架，会使用命名空间的概念来组织这些模块的接口，典型的例子如 <code>YUI</code> 库</p>
</li>
<li><p>这种原始的加载方式暴露了一些显而易见的弊端</p>
<ul>
<li>全局作用域下容易造成变量冲突</li>
<li>文件只能按照 <code>&lt;script&gt;</code>的书写顺序进行加载</li>
<li>开发人员必须主观解决模块和代码库的依赖关系</li>
<li>在大型项目中各种资源难以管理，长期积累的问题导致代码库混乱不堪</li>
</ul>
</li>
</ul>
<h3 id="1-1-CommonJS"><a href="#1-1-CommonJS" class="headerlink" title="1.1 CommonJS"></a>1.1 CommonJS</h3><hr>
<ul>
<li>服务器端的 <code>Node.js</code>遵循 <code>CommonJS</code>规范，该规范的核心思想是允许模块通过<code>require</code>方法来同步加载所要依赖的其他模块，然后通过 <code>exports</code> 或 <code>module.exports</code> 来导出需要暴露的接口</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">require(&quot;module&quot;);</div><div class="line">require(&quot;../file.js&quot;);</div><div class="line">exports.doStuff = function() &#123;&#125;;</div><div class="line">module.exports = someValue;</div></pre></td></tr></table></figure>
<ul>
<li>优点：<ul>
<li>服务器端模块便于重用</li>
<li><code>NPM</code> 中已经有将近<code>20</code>万个可以使用模块包</li>
<li>简单并容易使用</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>同步的模块加载方式不适合在浏览器环境中，同步意味着阻塞加载，浏览器资源是异步加载的</li>
<li>不能非阻塞的并行加载多个模块</li>
</ul>
</li>
<li><p>实现</p>
<ul>
<li>服务器端的 <code>Node.js</code></li>
<li><code>Browserify</code>，浏览器端的 <code>CommonJS</code> 实现，可以使用 <code>NPM</code>的模块，但是编译打包后的文件体积可能很大</li>
<li><code>modules-webmake</code>，类似<code>Browserify</code>，还不如 <code>Browserify</code> 灵活</li>
<li><code>wreq</code>，<code>Browserify</code>的前身</li>
</ul>
</li>
</ul>
<h3 id="1-2-AMD"><a href="#1-2-AMD" class="headerlink" title="1.2 AMD"></a>1.2 AMD</h3><hr>
<blockquote>
<p><code>Asynchronous Module Definition</code> 规范其实只有一个主要接口<code>define(id?, dependencies?,factory)</code> ，它要在声明模块的时候指定所有的依赖 <code>dependencies</code>，并且还要当做形参传到<code>factory</code> 中，对于依赖的模块提前执行，依赖前置</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(&quot;module&quot;, [&quot;dep1&quot;, &quot;dep2&quot;], function(d1, d2) &#123;</div><div class="line">return someExportedValue;</div><div class="line">&#125;);require([&quot;module&quot;, &quot;../file&quot;], function(module, file) &#123; /* ... */ &#125;);</div></pre></td></tr></table></figure>
<ul>
<li><p>优点：</p>
<ul>
<li>适合在浏览器环境中异步加载模块</li>
<li>可以并行加载多个模块</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>提高了开发成本，代码的阅读和书写比较困难，模块定义方式的语义 不顺畅</li>
<li>不符合通用的模块化思维方式，是一种妥协的实现</li>
</ul>
</li>
<li><p>实现：</p>
<ul>
<li><code>RequireJS</code></li>
<li><code>curl</code></li>
</ul>
</li>
</ul>
<h3 id="1-3-CMD"><a href="#1-3-CMD" class="headerlink" title="1.3 CMD"></a>1.3 CMD</h3><hr>
<ul>
<li><code>Common Module Definition</code> 规范和 <code>AMD</code>很相似，尽量保持简单，并与 <code>CommonJS</code> 和<code>Node.js</code> 的 <code>Modules</code>规范保持了很大的兼容性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(function(require, exports, module) &#123;</div><div class="line">var $ = require(&apos;jquery&apos;);</div><div class="line">var Spinning = require(&apos;./spinning&apos;);</div><div class="line">exports.doSomething = ...</div><div class="line">module.exports = ...</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>优点：<ul>
<li>依赖就近，延迟执行</li>
<li>可以很容易在 <code>Node.js</code> 中运行</li>
</ul>
</li>
<li>缺点：<ul>
<li>依赖 <code>SPM</code> 打包，模块的加载逻辑偏重</li>
</ul>
</li>
<li>实现：<ul>
<li><code>Sea.js</code></li>
<li><code>coolie</code></li>
</ul>
</li>
</ul>
<h3 id="1-4-ES6-模块"><a href="#1-4-ES6-模块" class="headerlink" title="1.4 ES6 模块"></a>1.4 ES6 模块</h3><hr>
<ul>
<li><code>EcmaScript6</code> 标准增加了 <code>JavaScript</code>语言层面的模块体系定义。<code>ES6</code> 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。<code>CommonJS</code> 和<code>AMD</code> 模块，都只能在运行时确定这些东西</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import &quot;jquery&quot;;</div><div class="line">export function doStuff() &#123;&#125;</div><div class="line">module &quot;localModule&quot; &#123;&#125;</div></pre></td></tr></table></figure>
<ul>
<li>优点：<ul>
<li>容易进行静态分析</li>
<li>面向未来的 <code>EcmaScript</code>标准</li>
</ul>
</li>
<li>缺点：<ul>
<li>原生浏览器端还没有实现该标准</li>
<li>全新的命令字，新版的 <code>Node.js</code>才支持</li>
</ul>
</li>
<li>实现：<ul>
<li><code>Babel</code></li>
</ul>
</li>
</ul>
<h3 id="1-5-前端模块加载"><a href="#1-5-前端模块加载" class="headerlink" title="1.5 前端模块加载"></a>1.5 前端模块加载</h3><hr>
<ul>
<li>前端模块要在客户端中执行，所以他们需要增量加载到浏览器中</li>
<li>模块的加载和传输，我们首先能想到两种极端的方式，一种是每个模块文件都单独请求，另一种是把所有模块打包成一个文件然后只请求一次。显而易见，每个模块都发起单独的请求造成了请求次数过多，导致应用启动速度慢；一次请求加载所有模块导致流量浪费、初始化过程慢。这两种方式都不是好的解决方案，它们过于简单粗暴</li>
<li>分块传输，按需进行懒加载，在实际用到某些模块的时候再增量更新，才是较为合理的模块加载方案</li>
<li>要实现模块的按需加载，就需要一个对整个代码库中的模块进行静态分析、编译打包的过<br>程</li>
</ul>
<h3 id="1-6-所有资源都是模块"><a href="#1-6-所有资源都是模块" class="headerlink" title="1.6 所有资源都是模块"></a>1.6 所有资源都是模块</h3><hr>
<blockquote>
<p>在上面的分析过程中，我们提到的模块仅仅是指<code>JavaScript</code>模块文件。然而，在前端开发过程中还涉及到样式、图片、字体、<code>HTML</code> 模板等等众多的资源。这些资源还会以各种方言的形式存在，比如 <code>coffeescript</code>、 <code>less</code>、 <code>sass</code>、众多的模板库、多语言系统（<code>i18n</code>）等</p>
</blockquote>
<ul>
<li>如果他们都可以视作模块，并且都可以通过 <code>require</code> 的方式来加载，将带来优雅的开发体验，比如</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">require(&quot;./style.css&quot;);</div><div class="line">require(&quot;./style.less&quot;);</div><div class="line">require(&quot;./template.jade&quot;);</div><div class="line">require(&quot;./image.png&quot;);</div></pre></td></tr></table></figure>
<ul>
<li>那么如何做到让 <code>require</code> 能加载各种资源呢？</li>
</ul>
<h3 id="1-7-静态分析"><a href="#1-7-静态分析" class="headerlink" title="1.7 静态分析"></a>1.7 静态分析</h3><hr>
<blockquote>
<p>在编译的时候，要对整个代码进行静态分析，分析出各个模块的类型和它们依赖关系，然后将不同类型的模块提交给适配的加载器来处理。比如一个用<code>LESS</code> 写的样式模块，可以先用<code>LESS</code> 加载器将它转成一个<code>CSS</code>模块，在通过 <code>CSS</code> 模块把他插入到页面的 <code>&lt;style&gt;</code> 标签中执行。<code>Webpack</code>就是在这样的需求中应运而生</p>
</blockquote>
<h2 id="二、webpack基础知识"><a href="#二、webpack基础知识" class="headerlink" title="二、webpack基础知识"></a>二、webpack基础知识</h2><hr>
<h3 id="2-1-什么是-Webpack"><a href="#2-1-什么是-Webpack" class="headerlink" title="2.1 什么是 Webpack"></a>2.1 什么是 Webpack</h3><hr>
<ul>
<li><code>Webpack</code> 是一个模块打包器。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源</li>
</ul>
<h3 id="2-2-Webpack-的特点"><a href="#2-2-Webpack-的特点" class="headerlink" title="2.2  Webpack 的特点"></a>2.2  Webpack 的特点</h3><hr>
<ul>
<li><p>代码拆分</p>
<ul>
<li><code>Webpack</code>有两种组织模块依赖的方式，同步和异步。异步依赖作为分割点，形成一个新的块。在优化了依赖树后，每一个异步区块都作为一个文件被打包</li>
</ul>
</li>
<li><p>Loader</p>
<ul>
<li><code>Webpack</code> 本身只能处理原生的 <code>JavaScript</code> 模块，但是 <code>loader</code> 转换器可以将各种类型的资源转换成 <code>JavaScript</code> 模块。这样，任何资源都可以成为 <code>Webpack</code>可以处理的模块</li>
</ul>
</li>
<li>智能解析<ul>
<li><code>Webpack</code> 有一个智能解析器，几乎可以处理任何第三方库，无论它们的模块形式是<code>CommonJS</code>、 <code>AMD</code>还是普通的 <code>JS</code> 文件。甚至在加载依赖的时候，允许使用动态表达式<code>require(&quot;./templates/&quot; + name + &quot;.jade&quot;)</code></li>
</ul>
</li>
<li>插件系统<ul>
<li><code>Webpack</code> 还有一个功能丰富的插件系统。大多数内容功能都是基于这个插件系统运行的，还可以开发和使用开源的 <code>Webpack</code> 插件，来满足各式各样的需求</li>
</ul>
</li>
<li>快速运行<ul>
<li><code>Webpack</code> 使用异步 <code>I/O</code> 和多级缓存提高运行效率，这使得 <code>Webpack</code>能够以令人难以置信的速度快速增量编译</li>
</ul>
</li>
</ul>
<h3 id="2-3-总览"><a href="#2-3-总览" class="headerlink" title="2.3 总览"></a>2.3 总览</h3><hr>
<ul>
<li>他的目的就是把有依赖关系的各种文件打包成一系列的静<br>态资源</li>
<li><code>webpack</code>简单点来说就就是一个配置文件，所有的魔力都是在这一个文件中发生的。 这个配置文件主要分<br>为三大块<ul>
<li><code>entry</code> 入口文件 让<code>webpack</code>用哪个文件作为项目的入口</li>
<li><code>output</code> 出口 让<code>webpack</code>把处理完成的文件放在哪里</li>
<li><code>module</code> 模块 要用什么不同的模块来处理各种类型的文件</li>
</ul>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-476c485bbf2af2f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h3 id="2-4-安装"><a href="#2-4-安装" class="headerlink" title="2.4 安装"></a>2.4 安装</h3><hr>
<ul>
<li>先装好node和npm，因为webpack是一个基于node的项目。然后</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g webpack</div></pre></td></tr></table></figure>
<ul>
<li>此时 <code>Webpack</code>已经安装到了全局环境下，可以通过命令行<code>webpack -h</code> 试试</li>
<li>通常我们会将 <code>Webpack</code>安装到项目的依赖中，这样就可以使用项目本地版本的 <code>Webpack</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 进入项目目录</div><div class="line"># 确定已经有 package.json，没有就通过 npm init 创建</div><div class="line"># 安装 webpack 依赖</div><div class="line">$ npm install webpack --save-dev</div></pre></td></tr></table></figure>
<blockquote>
<p><code>Webpack</code> 目前有两个主版本，一个是在 master 主干的稳定版，一个是在 <code>webpack-2</code> 分支的测试版，测试版拥有一些实验性功能并且和稳定版不兼容，在正式项目中应该使用稳定版</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 查看 webpack 版本信息</div><div class="line">$ npm info webpack</div><div class="line"># 安装指定版本的 webpack</div><div class="line">$ npm install webpack@1.12.x --save-dev</div></pre></td></tr></table></figure>
<ul>
<li>如果需要使用 <code>Webpack</code>开发工具，要单独安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install webpack-dev-server --save-dev</div></pre></td></tr></table></figure>
<h3 id="2-5-建立一个项目"><a href="#2-5-建立一个项目" class="headerlink" title="2.5  建立一个项目"></a>2.5  建立一个项目</h3><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir webpack</div><div class="line">cd webpack</div><div class="line">npm init</div></pre></td></tr></table></figure>
<ul>
<li>如果你使用git管理你的这个项目的话，建议你新建一个<code>.gitignore</code>文件，不要让<code>git</code>提交一些<code>node</code>依赖的模<br>块</li>
<li>创建一个静态页面 <code>index.html</code> 和一个 <code>JS</code> 入口文件 <code>entry.js：</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// entry.js</span></div><div class="line"><span class="built_in">document</span>.write(<span class="string">'It works.'</span>)</div></pre></td></tr></table></figure>
<ul>
<li>然后编译 <code>entry.js</code> 并打包到 <code>bundle.js</code>：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ webpack entry.js bundle.js</div></pre></td></tr></table></figure>
<ul>
<li>打包过程会显示日志：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Hash: e964f90ec65eb2c29bb9</div><div class="line">Version: webpack 1.12.2</div><div class="line">Time: 54ms</div><div class="line">Asset Size Chunks Chunk Names</div><div class="line">bundle.js 1.42 kB 0 [emitted] main</div><div class="line">[0] ./entry.js 27 bytes &#123;0&#125; [built]</div></pre></td></tr></table></figure>
<ul>
<li>用浏览器打开 <code>index.html</code> 将会看到 <code>It works.</code></li>
<li>接下来添加一个模块 <code>module.js</code>并修改入口 <code>entry.js</code>：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// module.js</div><div class="line">module.exports = &apos;It works from module.js.&apos;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// entry.js</div><div class="line">document.write(&apos;It works.&apos;)</div><div class="line">document.write(require(&apos;./module.js&apos;)) // 添加模块</div></pre></td></tr></table></figure>
<ul>
<li><p>重新打包 <code>webpack entry.js bundle.js</code>后刷新页面看到变化 <code>It works.It works from module.js.</code></p>
</li>
<li><p><code>Webpack</code> 会分析入口文件，解析包含依赖关系的各个文件。这些文件（模块）都打包到<code>bundle.js</code> 。<code>Webpack</code> 会给每个模块分配一个唯一的<code>id</code>并通过这个<code>id</code> 索引和访问模块。在页面启动时，会先执<code>entry.js</code> 中的代码，其它模块会在运行<code>require</code>的时候再执行</p>
</li>
</ul>
<h2 id="三、Loader"><a href="#三、Loader" class="headerlink" title="三、Loader"></a>三、Loader</h2><hr>
<ul>
<li><code>Webpack</code> 本身只能处理 <code>JavaScript</code> 模块，如果要处理其他类型的文件，就需要使用 <code>loader</code>进行转换</li>
<li><code>Loader</code> 可以理解为是模块和资源的转换器，它本身是一个函数，接受源文件作为参数，返回转换的结果。这样，我们就可以通过 require 来加载任何类型的模块或文件，比如CoffeeScript、 JSX、 LESS </li>
</ul>
<h3 id="3-1-loader-有哪些特性"><a href="#3-1-loader-有哪些特性" class="headerlink" title="3.1  loader 有哪些特性"></a>3.1  loader 有哪些特性</h3><hr>
<ul>
<li><code>Loader</code> 可以通过管道方式链式调用，每个 <code>loader</code> 可以把资源转换成任意格式并传递给下一个 <code>loader</code> ，但是最后一个 <code>loader</code> 必须返回 <code>JavaScript</code></li>
<li><code>Loader</code>可以同步或异步执行。</li>
<li><code>Loader</code> 运行在 <code>node.js</code> 环境中，所以可以做任何可能的事情。</li>
<li><code>Loader</code> 可以接受参数，以此来传递配置项给 <code>loader</code>。</li>
<li><code>Loader</code> 可以通过文件扩展名（或正则表达式）绑定给不同类型的文件。</li>
<li><code>Loader</code>可以通过 <code>npm</code>发布和安装。</li>
<li>除了通过 <code>package.json</code>的 <code>main</code>指定，通常的模块也可以导出一个 <code>loader</code>来使用。</li>
<li><code>Loader</code> 可以访问配置。</li>
<li>插件可以让 <code>loader</code> 拥有更多特性。</li>
<li><code>Loader</code>可以分发出附加的任意文件</li>
</ul>
<blockquote>
<ul>
<li><code>Loader</code>本身也是运行在 <code>node.js</code> 环境中的 <code>JavaScript</code>模块，它通常会返回一个函数。大多数情况下，我们通过 npm 来管理 <code>loader</code>，但是你也可以在项目中自己写 <code>loader</code> 模块</li>
<li>按照惯例，而非必须，<code>loader</code> 一般以 <code>xxx-loader</code> 的方式命名， <code>xxx</code> 代表了这个 <code>loader</code>要做的转换功能，比如 <code>json-loader</code></li>
<li>在引用 <code>loader</code> 的时候可以使用全名 <code>json-loader</code> ，或者使用短名 <code>json</code>。这个命名规则和搜索优先级顺序在<code>webpack</code> 的<code>resolveLoader.moduleTemplates api</code>中定义</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Default: [&quot;*-webpack-loader&quot;, &quot;*-web-loader&quot;, &quot;*-loader&quot;, &quot;*&quot;]</div></pre></td></tr></table></figure>
<ul>
<li><code>Loader</code>可以在 <code>require()</code>引用模块的时候添加，也可以在 <code>webpack</code> 全局配置中进行绑定，还可以通过命令行的方式使用</li>
<li>我们要在页面中引入一个<code>CSS</code>文件<code>style.css</code>，首页将 <code>style.css</code>也看成是一个模块，然后用 <code>css-loader</code> 来读取它，再用<code>style-loader</code>把它插入到页面中</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/* style.css */</div><div class="line">body &#123; </div><div class="line">  background: yellow; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改 entry.js：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">require(&quot;!style!css!./style.css&quot;) // 载入 style.css</div><div class="line">document.write(&apos;It works.&apos;)</div><div class="line">document.write(require(&apos;./module.js&apos;))</div></pre></td></tr></table></figure>
<p>安装 loader：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install css-loader style-loader</div></pre></td></tr></table></figure>
<p>重新编译打包，刷新页面，就可以看到黄色的页面背景了</p>
<blockquote>
<p>如果每次   require CSS   文件的时候都要写   loader   前缀，是一件很繁琐的事情。我们可以根据模块类型（扩展名）来自动绑定需要的   loader  </p>
</blockquote>
<ul>
<li>将   <code>entry.js</code>  中的 <code>require(&quot;!style!css!./style.css&quot;)</code>修改为 <code>require(&quot;./style.css&quot;)</code>，然后执行：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ webpack entry.js bundle.js --module-bind &apos;css=style!css&apos;</div><div class="line"># 有些环境下可能需要使用双引号</div><div class="line">$ webpack entry.js bundle.js --module-bind &quot;css=style!css&quot;</div></pre></td></tr></table></figure>
<ul>
<li>显然，这两种使用 <code>loader</code> 的方式，效果是一样的</li>
</ul>
<h2 id="四、配置webpack"><a href="#四、配置webpack" class="headerlink" title="四、配置webpack"></a>四、配置webpack</h2><hr>
<blockquote>
<p><code>Webpack</code>在执行的时候，除了在命令行传入参数，还可以通过指定的配置文件来执行。默认情况下，会搜索当前目<code>webpack.config.js</code> 文件，这个文件是一个 <code>node.js</code>模块，返回一个<code>json</code> 格式的配置信息对象，或者通过 <code>--config</code> 选项来指定配置文件</p>
</blockquote>
<ul>
<li><p>现在开始配置<code>webpack</code>，目标是把这两个<code>js</code>文件合并成一个文件. 我们可以自己在<code>build</code>文件夹里面手动建一个<code>index.html</code>文件夹，然后再把合并以后的<code>js</code>引用在里面，但是这样有些麻烦，所以我们这里安装一个<code>plugin</code>，可以自动快速的帮我们生成<code>HTML</code></p>
</li>
<li><p>创建一个配置文件 <code>webpack.config.js</code></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var webpack = require(&apos;webpack&apos;)</div><div class="line">module.exports = &#123;</div><div class="line">entry: &apos;./entry.js&apos;,</div><div class="line">output: &#123;</div><div class="line">path: __dirname,</div><div class="line">filename: &apos;bundle.js&apos;</div><div class="line">&#125;,</div><div class="line">module: &#123;</div><div class="line">loaders: [</div><div class="line">&#123;test: /\.css$/, loader: &apos;style!css&apos;&#125;</div><div class="line">]</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>同时简化 <code>entry.js</code> 中的 <code>style.css</code> 加载方式</li>
<li><code>require(&#39;./style.css&#39;)</code></li>
<li>最后运行 <code>webpack</code> ，可以看到 <code>webpack</code> 通过配置文件执行的结果和通过命令行<code>webpack entry.js bundle.js --module-bind &#39;css=style!css&#39;</code>执行的结果是一样的</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install html-webpack-plugin --save-dev</div></pre></td></tr></table></figure>
<ul>
<li>有了这个插件 开始写<code>config</code>文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">var path = require(&apos;path&apos;);</div><div class="line">var HtmlwebpackPlugin = require(&apos;html-webpack-plugin&apos;);</div><div class="line">//定义了一些文件夹的路径</div><div class="line">var ROOT_PATH = path.resolve(__dirname);</div><div class="line">var APP_PATH = path.resolve(ROOT_PATH, &apos;app&apos;);</div><div class="line">var BUILD_PATH = path.resolve(ROOT_PATH, &apos;build&apos;);</div><div class="line">module.exports = &#123;</div><div class="line">//项目的文件夹 可以直接用文件夹名称 默认会找index.js 也可以确定是哪个文件名字</div><div class="line">entry: APP_PATH,</div><div class="line">//输出的文件名 合并以后的js会命名为bundle.js</div><div class="line">output: &#123;</div><div class="line">path: BUILD_PATH,</div><div class="line">filename: &apos;bundle.js&apos;</div><div class="line">&#125;,</div><div class="line">//添加我们的插件 会自动生成一个html文件</div><div class="line">plugins: [</div><div class="line">new HtmlwebpackPlugin(&#123;</div><div class="line">title: &apos;Hello World app&apos;</div><div class="line">&#125;)</div><div class="line">]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>然后在项目根目录运行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure>
<ul>
<li>你会发现多出来一个build文件夹，直接点开里面的html文件，你会发现我们可爱的<code>“hello world”</code>已经插入到页面了。我们的任务完成了，成功生成<code>html</code>，合并<code>js</code>，<code>html</code>引入了<code>js</code>，<code>js</code>被执行了</li>
</ul>
<h3 id="4-1-配置webpack-dev-server"><a href="#4-1-配置webpack-dev-server" class="headerlink" title="4.1 配置webpack-dev-server"></a>4.1 配置webpack-dev-server</h3><hr>
<ul>
<li><p>上面任务虽然完成了，但是我们要不断运行程序然后查看页面，所以最好新建一个开发服务器，可以<code>serve</code>我们<code>pack</code>以后的代码，并且当代码更新的时候自动刷新浏览器</p>
</li>
<li><p>安装<code>webpack-dev-server</code></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install webpack-dev-server --save-dev</div></pre></td></tr></table></figure>
<ul>
<li>安装完毕后在<code>config</code>中添加配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line"></div><div class="line">devServer: &#123;</div><div class="line">historyApiFallback: true,</div><div class="line">hot: true,</div><div class="line">inline: true,</div><div class="line">progress: true,</div><div class="line">&#125;,</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后再<code>package.json</code>里面配置一下运行的命令,<code>npm</code>支持自定义一些命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">&quot;start&quot;: &quot;webpack-dev-server --hot --inline&quot;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<ul>
<li><p>在项目根目录下输入<code>npm start</code>,一堆花花绿绿的信息后server已经起来了，在浏览器里面输入<code>http://localhost:8080</code>发现<code>hello world</code>出现了，在<code>js</code>里面随便修改一些输出,然后保存,浏览器自动刷新，新的结果出现了</p>
</li>
<li><p>拓展阅读 如果你的服务器端使用的是<code>express</code>框架，你还可以直接安装<code>express</code>的<code>middleware</code>，<code>webpack</code>配合<code>express</code>，很好用</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install webpack-dev-middleware --save-dev</div></pre></td></tr></table></figure>
<h3 id="4-2-添加CSS样式"><a href="#4-2-添加CSS样式" class="headerlink" title="4.2 添加CSS样式"></a>4.2 添加CSS样式</h3><ul>
<li><p>现在来添加一些样式，<code>webpack</code>使用<code>loader</code>的方式来处理各种各样的资源，比如说样式文件，我们需要两种<code>loader</code>，<code>css-loader</code>和 <code>style－loader</code>，<code>css-loader</code>会遍历<code>css</code>文件，找到所有的<code>url(...)</code>并且处理。<code>style-loader</code>会把所有的样式插入到你页面的一个<code>style tag</code>中</p>
</li>
<li><p>安装我们的<code>loader</code></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install css-loader style-loader --save-dev</div></pre></td></tr></table></figure>
<ul>
<li>配置<code>loader</code>，在<code>webpack.config.js</code>中</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">devServer: &#123;</div><div class="line">historyApiFallback: true,</div><div class="line">hot: true,</div><div class="line">inline: true,</div><div class="line">progress: true,</div><div class="line">&#125;,</div><div class="line">...</div><div class="line">module: &#123;</div><div class="line">loaders: [</div><div class="line">&#123;</div><div class="line">test: /\.css$/,</div><div class="line">loaders: [&apos;style&apos;, &apos;css&apos;],</div><div class="line">include: APP_PATH</div><div class="line">&#125;</div><div class="line">]</div><div class="line">&#125;,</div><div class="line">...</div><div class="line">plugins: [</div><div class="line">new HtmlwebpackPlugin(&#123;</div><div class="line">title: &apos;Hello World app&apos;</div></pre></td></tr></table></figure>
<ul>
<li><p>看<code>loaders</code>的书写方式，test里面包含一个正则，包含需要匹配的文件，<code>loaders</code>是一个数组，包含要处理这些程序的<code>loaders</code>，这里我们用了<code>css</code>和<code>style</code>，注意<code>loaders</code>的处理顺序是从右到左的，这里就是先运行<code>css-loader</code>然后是<code>style-loader</code></p>
</li>
<li><p>新建一个样式文件 <code>main.css</code></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">h1 &#123;</div><div class="line">color: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>记得在入口文件<code>index.js</code>中引用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">require(&apos;./main.css&apos;);</div></pre></td></tr></table></figure>
<ul>
<li><p>然后发现标题变成红色的了，<code>webpack</code>的理念是基于项目处理的，把对应的文件格式给对应的<code>loader</code>处理，然后你就不用管了，它会决定怎么压缩，编译</p>
</li>
<li><p>那现在想使用一些有爱的<code>css</code>预编译程序，来点<code>sass</code>吧。 你可能已经想到了，再来个loader就行啦，确实是<br>这样简单</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install sass-loader --save-dev</div></pre></td></tr></table></figure>
<ul>
<li>稍微修改一下<code>config</code>，删掉我们先前添加的<code>css</code>规则，加上下面的<code>loader</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">test: /\.scss$/,</div><div class="line">loaders: [&apos;style&apos;, &apos;css&apos;, &apos;sass&apos;],</div><div class="line">include: APP_PATH</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<ul>
<li>添加两个<code>sass</code>文件，<code>variables.scss</code>和<code>main.scss</code></li>
</ul>
<p><code>variables.scss</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$red: red;</div></pre></td></tr></table></figure>
<p><code>main.scss</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@import &quot;./variables.scss&quot;;</div><div class="line">h1 &#123;</div><div class="line">color: $red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>index.js</code>中引用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">require(&apos;./main.scss&apos;);</div></pre></td></tr></table></figure></p>
<ul>
<li>然后发现标题如愿变红</li>
</ul>
<h3 id="4-3-处理图片和其他静态文件"><a href="#4-3-处理图片和其他静态文件" class="headerlink" title="4.3 处理图片和其他静态文件"></a>4.3 处理图片和其他静态文件</h3><hr>
<ul>
<li><p>这个和其他一样，也许你也已经会玩了。安装<code>loader</code>，处理文件。诸如图片，字体等等，不过有个神奇的地方它可以根据你的需求将一些图片自动转成<code>base64</code>编码的，为你减轻很多的网络请求</p>
</li>
<li><p>安装<code>url-loader</code></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install url-loader --save-dev</div></pre></td></tr></table></figure>
<ul>
<li>配置<code>config</code>文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">test: /\.(png|jpg)$/,</div><div class="line">loader: &apos;url?limit=40000&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>注意后面那个limit的参数，当你图片大小小于这个限制的时候，会自动启用base64编码图片</li>
</ul>
<p>新建一个<code>imgs</code>文件夹，往里面添加一张照片。在<code>scss</code>文件中添加如下的东西</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@import &quot;./variables.scss&quot;;</div><div class="line">h1 &#123;</div><div class="line">color: $red;</div><div class="line">background: url(&apos;./imgs/avatar.jpg&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>npm start, 然后查看图片的url</li>
</ul>
<h3 id="4-4-添加第三方库"><a href="#4-4-添加第三方库" class="headerlink" title="4.4 添加第三方库"></a>4.4 添加第三方库</h3><hr>
<ul>
<li>有的时候还想来点<code>jquery</code>，<code>moment</code>，<code>undersocre</code>之类的库<code>webpack</code>可以非常容易的做到这一点</li>
<li>那么我们现在安装在我们的<code>app</code>中添加<code>jquery</code>和<code>moment</code>的支持</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install jquery moment --save-dev</div></pre></td></tr></table></figure>
<ul>
<li>在js中引用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var sub = require(&apos;./sub&apos;);</div><div class="line">var $ = require(&apos;jquery&apos;);</div><div class="line">var moment = require(&apos;moment&apos;);</div><div class="line">var app = document.createElement(&apos;div&apos;);</div><div class="line">app.innerHTML = &apos;&lt;h1&gt;Hello World it&lt;/h1&gt;&apos;;</div><div class="line">document.body.appendChild(app);</div><div class="line">app.appendChild(sub());</div><div class="line">$(&apos;body&apos;).append(&apos;&lt;p&gt;look at me! now is &apos; + moment().format() + &apos;&lt;/p&gt;&apos;);</div></pre></td></tr></table></figure>
<ul>
<li>看看浏览器，成功！ <code>jquery</code>和<code>moment</code>现在都起作用了</li>
</ul>
<h3 id="4-5-添加ES6的支持"><a href="#4-5-添加ES6的支持" class="headerlink" title="4.5 添加ES6的支持"></a>4.5 添加ES6的支持</h3><hr>
<ul>
<li>首先 装各种<code>loader</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install babel-loader babel-preset-es2015 --save-dev</div></pre></td></tr></table></figure>
<ul>
<li>配置我们的<code>config</code>文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">test: /\.jsx?$/,</div><div class="line">loader: &apos;babel&apos;,</div><div class="line">include: APP_PATH,</div><div class="line">query: &#123;</div><div class="line">presets: [&apos;es2015&apos;]</div><div class="line">&#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<ul>
<li><p><code>es2015</code>这个参数是<code>babel</code>的<code>plugin</code>，可以支持各种最新的<code>es6</code>的特性，具体的情况看这个链接</p>
</li>
<li><p>现在我们可以改掉<code>CommonJS</code>风格的文件了</p>
</li>
</ul>
<p><code>sub.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">export default function() &#123;</div><div class="line">  var element = document.createElement(&apos;h2&apos;);</div><div class="line">  element.innerHTML = &quot;Hello h2 world hahaha&quot;;</div><div class="line">  return element;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>index.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import &apos;./main.scss&apos;;</div><div class="line">import generateText from &apos;./sub&apos;;</div><div class="line">import $ from &apos;jquery&apos;;</div><div class="line">import moment from &apos;moment&apos;;</div><div class="line">let app = document.createElement(&apos;div&apos;);</div><div class="line">const myPromise = Promise.resolve(42);</div><div class="line">myPromise.then((number) =&gt; &#123;</div><div class="line">$(&apos;body&apos;).append(&apos;&lt;p&gt;promise result is &apos; + number + &apos; now is &apos; + moment().format() + &apos;&lt;/p&gt;&apos;);</div><div class="line">&#125;);</div><div class="line">app.innerHTML = &apos;&lt;h1&gt;Hello World it&lt;/h1&gt;&apos;;</div><div class="line">document.body.appendChild(app);</div><div class="line">app.appendChild(generateText());</div></pre></td></tr></table></figure>
<ul>
<li>我们上面测试了<code>import</code>,<code>export</code>，<code>const</code>，<code>let</code>，<code>promise</code>等一系列<code>es6</code>的特性</li>
</ul>
<h2 id="五、插件"><a href="#五、插件" class="headerlink" title="五、插件"></a>五、插件</h2><hr>
<blockquote>
<ul>
<li>插件可以完成更多 <code>loader</code> 不能完成的功能</li>
<li>插件的使用一般是在 <code>webpack</code> 的配置信息 <code>plugins</code> 选项中指定</li>
<li><code>Webpack</code> 本身内置了一些常用的插件，还可以通过 <code>npm</code> 安装第三方插件</li>
<li>接下来，我们利用一个最简单的 <code>BannerPlugin</code> 内置插件来实践插件的配置和运行，这个插件的作用是给输出的文件头部添加注释信息</li>
</ul>
</blockquote>
<p>修改 <code>webpack.config.js</code>，添加 <code>plugins</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var webpack = require(&apos;webpack&apos;)</div><div class="line">module.exports = &#123;</div><div class="line">entry: &apos;./entry.js&apos;,</div><div class="line">output: &#123;</div><div class="line">path: __dirname,</div><div class="line">filename: &apos;bundle.js&apos;</div><div class="line">&#125;,</div><div class="line">module: &#123;</div><div class="line">loaders: [</div><div class="line">&#123;test: /\.css$/, loader: &apos;style!css&apos;&#125;</div><div class="line">]</div><div class="line">&#125;,</div><div class="line">plugins: [</div><div class="line">new webpack.BannerPlugin(&apos;This file is created by zhaoda&apos;)</div><div class="line">]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后运行 <code>webpack</code> ，打开 <code>bundle.js</code> ，可以看到文件头部出现了我们指定的注释信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/*! This file is created by zhaoda */</div><div class="line">/******/ (function(modules) &#123; // webpackBootstrap</div><div class="line">/******/ // The module cache</div><div class="line">/******/ var installedModules = &#123;&#125;;</div><div class="line">// 后面代码省略</div></pre></td></tr></table></figure>
<h2 id="六、开发环境"><a href="#六、开发环境" class="headerlink" title="六、开发环境"></a>六、开发环境</h2><hr>
<ul>
<li>当项目逐渐变大，<code>webpack</code> 的编译时间会变长，可以通过参数让编译的输出内容带有进度和颜色</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ webpack --progress --colors</div></pre></td></tr></table></figure>
<ul>
<li>如果不想每次修改模块后都重新编译，那么可以启动监听模式。开启监听模式后，没有变化的模块会在编译后缓存到内存中，而不会每次都被重新编译，所以监听模式的整体速度是很快的</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ webpack --progress --colors --watch</div></pre></td></tr></table></figure>
<blockquote>
<p>当然，使用 <code>webpack-dev-server</code>开发服务是一个更好的选择。它将在 localhost:8080 启动一个 <code>express</code> 静态资源 <code>web</code>服务器，并且会以监听模式自动运行 webpack，在浏览器打开<code>http://localhost:8080/</code>或 <code>http://localhost:8080/webpack-dev-server/</code> 可以浏览项目中的页面和<br>编译后的资源输出，并且通过一个 <code>socket.io</code> 服务实时监听它们的变化并自动刷新页面</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 安装</div><div class="line">$ npm install webpack-dev-server -g</div><div class="line"># 运行</div><div class="line">$ webpack-dev-server --progress --colors</div></pre></td></tr></table></figure>
<h2 id="七、故障处理"><a href="#七、故障处理" class="headerlink" title="七、故障处理"></a>七、故障处理</h2><hr>
<ul>
<li><code>Webpack</code> 的配置比较复杂，很容出现错误，下面是一些通常的故障处理手段</li>
<li>一般情况下，<code>webpack</code>如果出问题，会打印一些简单的错误信息，比如模块没有找到。我们还可以通过参数 <code>--display-error-details</code>来打印错误详情</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">$ webpack --display-error-details</div><div class="line">Hash: a40fbc6d852c51fceadb</div><div class="line">Version: webpack 1.12.2</div><div class="line">Time: 586ms</div><div class="line">Asset Size Chunks Chunk Names</div><div class="line">bundle.js 12.1 kB 0 [emitted] main</div><div class="line">[0] ./entry.js 153 bytes &#123;0&#125; [built] [1 error]</div><div class="line">[5] ./module.js 43 bytes &#123;0&#125; [built]</div><div class="line">+ 4 hidden modules</div><div class="line">ERROR in ./entry.js</div><div class="line">Module not found: Error: Cannot resolve &apos;file&apos; or &apos;directory&apos; ./badpathmodule in /Users/zhaoda/data/projects/webpack-handbook/examples</div><div class="line">resolve file</div><div class="line">/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule doesn&apos;t exist</div><div class="line">/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.webpack.js doesn&apos;t exist</div><div class="line">/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.js doesn&apos;t exist</div><div class="line">/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.web.js doesn&apos;t exist</div><div class="line">/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.json doesn&apos;t exist</div><div class="line">resolve directory</div><div class="line">/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule doesn&apos;t exist (directory default file)</div><div class="line">/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule/package.json doesn&apos;t exist (directory description file)</div><div class="line">[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule]</div><div class="line">[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.webpack.js]</div><div class="line">[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.js]</div><div class="line">[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.web.js]</div><div class="line">[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.json]</div><div class="line">@ ./entry.js 3:0-26</div></pre></td></tr></table></figure>
<ul>
<li><code>Webpack</code>的配置提供了 <code>resolve</code> 和<code>resolveLoader</code> 参数来设置模块解析的处理细节， <code>resolve</code>用来配置应用层的模块（要被打包的模块）解析， <code>resolveLoader</code>用来配置<code>loader</code>模块的解析</li>
<li>当引入通过 <code>npm</code> 安装的 <code>node.js</code> 模块时，可能出现找不到依赖的错误。<code>Node.js</code>模块的依赖解析算法很简单，是通过查看模块的每一层父目录中的 <code>node_modules</code> 文件夹来查询依赖的。当出现 <code>Node.js</code>模块依赖查找失败的时候，可以尝试设置 <code>resolve.fallback</code>和<code>resolveLoader.fallback</code> 来解决问题</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">resolve: &#123; fallback: path.join(__dirname, &quot;node_modules&quot;) &#125;,</div><div class="line">resolveLoader: &#123; fallback: path.join(__dirname, &quot;node_modules&quot;) &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>Webpack</code>中涉及路径配置最好使用绝对路径，建议通过 <code>path.resolve(__dirname,&quot;app/folder&quot;)</code> 或 <code>path.join(__dirname, &quot;app&quot;, &quot;folder&quot;)</code>的方式来配置，以兼容 <code>Windows</code>环境</p>
</blockquote>
<h2 id="八、开发和部署技巧"><a href="#八、开发和部署技巧" class="headerlink" title="八、开发和部署技巧"></a>八、开发和部署技巧</h2><hr>
<h3 id="8-1-启用source-map"><a href="#8-1-启用source-map" class="headerlink" title="8.1 启用source-map"></a>8.1 启用source-map</h3><hr>
<ul>
<li>现在的代码是合并以后的代码，不利于排错和定位，只需要在config中添加</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">devtool: &apos;eval-source-map&apos;,</div></pre></td></tr></table></figure>
<ul>
<li>这样出错以后就会采用source-map的形式直接显示你出错代码的位置</li>
</ul>
<h3 id="8-2-使用preLoaders和postLoaders"><a href="#8-2-使用preLoaders和postLoaders" class="headerlink" title="8.2 使用preLoaders和postLoaders"></a>8.2 使用preLoaders和postLoaders</h3><hr>
<ul>
<li>也许你想在写代码的时候检查自己的<code>js</code>是否符合<code>jshint</code>的规范，那么隆重推荐<code>preLoaders</code>和<code>postLoaders</code></li>
<li><p><code>perLoaders</code>顾名思义就是在<code>loaders</code>执行之前处理的，<code>webpack</code>的处理顺序是<code>perLoaders - loaders - postLoaders</code></p>
</li>
<li><p>安装<code>jshint</code></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install jshint-loader --save-dev</div></pre></td></tr></table></figure>
<ul>
<li>在<code>config</code>文件中配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">module: &#123;</div><div class="line">...</div><div class="line">//和loaders一样的语法，很简单</div><div class="line">perLoaders: [</div><div class="line">&#123;</div><div class="line">test: /\.jsx?$/,</div><div class="line">include: APP_PATH,</div><div class="line">loader: &apos;jshint-loader&apos;</div><div class="line">&#125;</div><div class="line">]</div><div class="line">&#125;</div><div class="line">...</div><div class="line">//配置jshint的选项，支持es6的校验</div><div class="line">jshint: &#123;</div><div class="line">&quot;esnext&quot;: true</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<ul>
<li>好了 现在每次npm run start的时候就可以看到jshint的提示信息啦</li>
</ul>
<h3 id="8-3-部署上线"><a href="#8-3-部署上线" class="headerlink" title="8.3 部署上线"></a>8.3 部署上线</h3><hr>
<ul>
<li><p>刚才说的各种情况都是在开发时候的情况，那么假如项目已经开发完了，需要部署上线了。我们应该新创建一个单独的<code>config</code>文件，因为部署上线使用<code>webpack</code>的时候我们不需要一些<code>dev-tools</code>,<code>dev-server</code>和<code>jshint</code>校验等</p>
</li>
<li><p>复制我们现有的<code>config</code>文件，命名<code>webpack.production.config.js</code>，将里面关于 <code>devServer</code>等和开发有关的东西删掉</p>
</li>
<li><p>在<code>package.json</code>中添加一个命令</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">&quot;start&quot;: &quot;webpack-dev-server --hot --inline&quot;,</div><div class="line">&quot;build&quot;: &quot;webpack --progress --profile --colors --config webpack.production.config.js&quot;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<ul>
<li>当要上线的时候,运行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run build</div></pre></td></tr></table></figure>
<ul>
<li>可以发现<code>build</code>文件夹中生成了所有东西</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;声明 本教程整理于互联网&lt;/p&gt;
&lt;p&gt;&lt;code&gt;webpack&lt;/code&gt;是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，到实际需要的时候再
    
    </summary>
    
      <category term="Build" scheme="http://blog.poetries.top/categories/Build/"/>
    
    
      <category term="webpack" scheme="http://blog.poetries.top/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>原生JS与jQuery操作DOM对比</title>
    <link href="http://blog.poetries.top/2017/01/14/js-and-jquery-dom-compare/"/>
    <id>http://blog.poetries.top/2017/01/14/js-and-jquery-dom-compare/</id>
    <published>2017-01-14T03:30:43.000Z</published>
    <updated>2017-02-15T11:25:30.956Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、创建元素节点"><a href="#一、创建元素节点" class="headerlink" title="一、创建元素节点"></a>一、创建元素节点</h3><hr>
<h4 id="1-1-原生JS创建元素节点"><a href="#1-1-原生JS创建元素节点" class="headerlink" title="1.1 原生JS创建元素节点"></a>1.1 原生<code>JS</code>创建元素节点</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</div></pre></td></tr></table></figure>
<h4 id="1-2-jQuery创建元素节点"><a href="#1-2-jQuery创建元素节点" class="headerlink" title="1.2 jQuery创建元素节点"></a>1.2 <code>jQuery</code>创建元素节点</h4><hr>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'&lt;p&gt;&lt;/p&gt;'</span>);<span class="string">`</span></div></pre></td></tr></table></figure>
<h3 id="二、创建并添加文本节点"><a href="#二、创建并添加文本节点" class="headerlink" title="二、创建并添加文本节点"></a>二、创建并添加文本节点</h3><hr>
<h4 id="2-1-原生JS创建文本节点"><a href="#2-1-原生JS创建文本节点" class="headerlink" title="2.1 原生JS创建文本节点"></a>2.1 原生JS创建文本节点</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">`document.createTextNode("Text Content");</span></div></pre></td></tr></table></figure>
<ul>
<li>通常创建文本节点和创建元素节点配合使用，比如：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> textEl = <span class="built_in">document</span>.createTextNode(<span class="string">"Hello World."</span>);</div><div class="line"><span class="keyword">var</span> pEl = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</div><div class="line">pEl.appendChild(textEl);</div></pre></td></tr></table></figure>
<h4 id="2-2-jQuery创建并添加文本节点："><a href="#2-2-jQuery创建并添加文本节点：" class="headerlink" title="2.2 jQuery创建并添加文本节点："></a>2.2 <code>jQuery</code>创建并添加文本节点：</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $p = $(<span class="string">'&lt;p&gt;Hello World.&lt;/p&gt;'</span>);</div></pre></td></tr></table></figure>
<h3 id="三、复制节点"><a href="#三、复制节点" class="headerlink" title="三、复制节点"></a>三、复制节点</h3><hr>
<h4 id="3-1-原生JS复制节点"><a href="#3-1-原生JS复制节点" class="headerlink" title="3.1 原生JS复制节点:"></a>3.1 原生<code>JS</code>复制节点:</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> newEl = pEl.cloneNode(<span class="literal">true</span>);  <span class="string">`</span></div></pre></td></tr></table></figure>
<ul>
<li><code>true</code>和<code>false</code>的区别：<ul>
<li><code>true</code> ：克隆整个<code>&#39;&lt;p&gt;Hello World.&lt;/p&gt;&#39;</code>节点</li>
<li><code>false</code>：只克隆<code>&#39;&lt;p&gt;&lt;/p&gt;&#39;</code> ，不克隆文本<code>Hello World.&#39;</code></li>
</ul>
</li>
</ul>
<h4 id="3-2-jQuery复制节点"><a href="#3-2-jQuery复制节点" class="headerlink" title="3.2 jQuery复制节点"></a>3.2 <code>jQuery</code>复制节点</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$newEl = $(<span class="string">'#pEl'</span>).clone(<span class="literal">true</span>);</div></pre></td></tr></table></figure>
<ul>
<li>注意：克隆节点要避免`ID重复</li>
</ul>
<h3 id="四、-插入节点"><a href="#四、-插入节点" class="headerlink" title="四、 插入节点"></a>四、 插入节点</h3><hr>
<h4 id="4-1-原生JS向子节点列表的末尾添加新的子节点"><a href="#4-1-原生JS向子节点列表的末尾添加新的子节点" class="headerlink" title="4.1 原生JS向子节点列表的末尾添加新的子节点"></a>4.1 原生JS向子节点列表的末尾添加新的子节点</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">El.appendChild(newNode);</div></pre></td></tr></table></figure>
<ul>
<li>原生JS在节点的已有子节点之前插入一个新的子节点：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">El.insertBefore(newNode, targetNode);</div></pre></td></tr></table></figure>
<h4 id="4-2-在jQuery中，插入节点的方法比原生JS多的多"><a href="#4-2-在jQuery中，插入节点的方法比原生JS多的多" class="headerlink" title="4.2 在jQuery中，插入节点的方法比原生JS多的多"></a>4.2 在jQuery中，插入节点的方法比原生JS多的多</h4><hr>
<ul>
<li>在匹配元素子节点列表结尾添加内容</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#El'</span>).append(<span class="string">'&lt;p&gt;Hello World.&lt;/p&gt;'</span>);</div></pre></td></tr></table></figure>
<ul>
<li>把匹配元素添加到目标元素子节点列表结尾</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'&lt;p&gt;Hello World.&lt;/p&gt;'</span>).appendTo(<span class="string">'#El'</span>);</div></pre></td></tr></table></figure>
<ul>
<li>在匹配元素子节点列表开头添加内容</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#El'</span>).prepend(<span class="string">'&lt;p&gt;Hello World.&lt;/p&gt;'</span>);</div></pre></td></tr></table></figure>
<ul>
<li>把匹配元素添加到目标元素子节点列表开头</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'&lt;p&gt;Hello World.&lt;/p&gt;'</span>).prependTo(<span class="string">'#El'</span>);</div></pre></td></tr></table></figure>
<ul>
<li>在匹配元素之前添加目标内容</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#El'</span>).before(<span class="string">'&lt;p&gt;Hello World.&lt;/p&gt;'</span>);</div></pre></td></tr></table></figure>
<ul>
<li>把匹配元素添加到目标元素之前</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'&lt;p&gt;Hello World.&lt;/p&gt;'</span>).insertBefore(<span class="string">'#El'</span>);</div></pre></td></tr></table></figure>
<ul>
<li>在匹配元素之后添加目标内容</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#El'</span>).after(<span class="string">'&lt;p&gt;Hello World.&lt;/p&gt;'</span>);</div></pre></td></tr></table></figure>
<ul>
<li>把匹配元素添加到目标元素之后</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'&lt;p&gt;Hello World.&lt;/p&gt;'</span>).insertAfter(<span class="string">'#El'</span>);</div></pre></td></tr></table></figure>
<h3 id="五、删除节点"><a href="#五、删除节点" class="headerlink" title="五、删除节点"></a>五、删除节点</h3><hr>
<h4 id="5-1-原生JS删除节点"><a href="#5-1-原生JS删除节点" class="headerlink" title="5.1 原生JS删除节点"></a>5.1 原生JS删除节点</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">El.parentNode.removeChild(El);</div></pre></td></tr></table></figure>
<h4 id="5-2-jQuery删除节点"><a href="#5-2-jQuery删除节点" class="headerlink" title="5.2 jQuery删除节点"></a>5.2 jQuery删除节点</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#El'</span>).remove();</div></pre></td></tr></table></figure>
<h3 id="六、替换节点"><a href="#六、替换节点" class="headerlink" title="六、替换节点"></a>六、替换节点</h3><hr>
<h4 id="6-1-原生JS替换节点"><a href="#6-1-原生JS替换节点" class="headerlink" title="6.1 原生JS替换节点"></a>6.1 原生JS替换节点</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">El.repalceChild(newNode, oldNode);</div></pre></td></tr></table></figure>
<ul>
<li>注意：<code>oldNode</code>必须是<code>parentEl</code>真实存在的一个子节点</li>
</ul>
<h4 id="6-2-jQuery替换节点"><a href="#6-2-jQuery替换节点" class="headerlink" title="6.2 jQuery替换节点"></a>6.2 jQuery替换节点</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'p'</span>).replaceWith(<span class="string">'&lt;p&gt;Hello World.&lt;/p&gt;'</span>);</div></pre></td></tr></table></figure>
<h3 id="七、设置属性-获取属性"><a href="#七、设置属性-获取属性" class="headerlink" title="七、设置属性/获取属性"></a>七、设置属性/获取属性</h3><hr>
<h4 id="7-1-原生JS设置属性-获取属性"><a href="#7-1-原生JS设置属性-获取属性" class="headerlink" title="7.1 原生JS设置属性/获取属性"></a>7.1 原生JS设置属性/获取属性</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">imgEl.setAttribute(<span class="string">"title"</span>, <span class="string">"logo"</span>);</div><div class="line">imgEl.getAttribute(<span class="string">"title"</span>);</div><div class="line">checkboxEl.checked = <span class="literal">true</span>;</div><div class="line">checkboxEl.checked;</div></pre></td></tr></table></figure>
<h4 id="7-2-jQuery设置属性-获取属性"><a href="#7-2-jQuery设置属性-获取属性" class="headerlink" title="7.2 jQuery设置属性/获取属性:"></a>7.2 jQuery设置属性/获取属性:</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#logo"</span>).attr(&#123;<span class="string">"title"</span>: <span class="string">"logo"</span>&#125;);</div><div class="line">$(<span class="string">"#logo"</span>).attr(<span class="string">"title"</span>);</div><div class="line">$(<span class="string">"#checkbox"</span>).prop(&#123;<span class="string">"checked"</span>: <span class="literal">true</span>&#125;);</div><div class="line">$(<span class="string">"#checkbox"</span>).prop(<span class="string">"checked"</span>);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、创建元素节点&quot;&gt;&lt;a href=&quot;#一、创建元素节点&quot; class=&quot;headerlink&quot; title=&quot;一、创建元素节点&quot;&gt;&lt;/a&gt;一、创建元素节点&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;1-1-原生JS创建元素节点&quot;&gt;&lt;a href=&quot;#1-1-原生JS创建元素节点&quot; class=&quot;headerlink&quot; title=&quot;1.1 原生JS创建元素节点&quot;&gt;&lt;/a&gt;1.1 原生&lt;code&gt;JS&lt;/code&gt;创建元素节点&lt;/h4&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&quot;p&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;1-2-jQuery创建元素节点&quot;&gt;&lt;a href=&quot;#1-2-jQuery创建元素节点&quot; class=&quot;headerlink&quot; title=&quot;1.2 jQuery创建元素节点&quot;&gt;&lt;/a&gt;1.2 &lt;code&gt;jQuery&lt;/code&gt;创建元素节点&lt;/h4&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="DOM" scheme="http://blog.poetries.top/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>jQuery之DOM操作小结</title>
    <link href="http://blog.poetries.top/2017/01/14/jQuery-dom/"/>
    <id>http://blog.poetries.top/2017/01/14/jQuery-dom/</id>
    <published>2017-01-14T02:20:43.000Z</published>
    <updated>2017-02-15T11:25:30.956Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、过滤器"><a href="#一、过滤器" class="headerlink" title="一、过滤器"></a>一、过滤器</h3><hr>
<h4 id="1-匹配指定元素的父"><a href="#1-匹配指定元素的父" class="headerlink" title="1 匹配指定元素的父"></a>1 匹配指定元素的父</h4><hr>
<ul>
<li><code>elem.parent([exp])</code></li>
</ul>
<h4 id="2-匹配指定元素的子元素"><a href="#2-匹配指定元素的子元素" class="headerlink" title="2 匹配指定元素的子元素"></a>2 匹配指定元素的子元素</h4><hr>
<a id="more"></a>
<ul>
<li><code>elem.children([exp])</code></li>
</ul>
<h4 id="3-匹配指定元素的父、祖元素…"><a href="#3-匹配指定元素的父、祖元素…" class="headerlink" title="3 匹配指定元素的父、祖元素…"></a>3 匹配指定元素的父、祖元素…</h4><hr>
<ul>
<li><code>elem.parents([exp])</code></li>
</ul>
<h4 id="4-匹配指定元素的子、孙元素…"><a href="#4-匹配指定元素的子、孙元素…" class="headerlink" title="4 匹配指定元素的子、孙元素…"></a>4 匹配指定元素的子、孙元素…</h4><hr>
<ul>
<li><code>elem.find([exp])</code></li>
</ul>
<h4 id="5-匹配指定元素的后一个兄弟元素"><a href="#5-匹配指定元素的后一个兄弟元素" class="headerlink" title="5 匹配指定元素的后一个兄弟元素"></a>5 匹配指定元素的后一个兄弟元素</h4><hr>
<ul>
<li><code>elem.next([exp])</code></li>
</ul>
<h4 id="6-匹配指定元素的后面所有兄弟元素"><a href="#6-匹配指定元素的后面所有兄弟元素" class="headerlink" title="6 匹配指定元素的后面所有兄弟元素"></a>6 匹配指定元素的后面所有兄弟元素</h4><hr>
<ul>
<li><code>elem.nextAll([exp])</code></li>
</ul>
<h4 id="7-匹配指定元素的前一个兄弟元素"><a href="#7-匹配指定元素的前一个兄弟元素" class="headerlink" title="7 匹配指定元素的前一个兄弟元素"></a>7 匹配指定元素的前一个兄弟元素</h4><hr>
<ul>
<li><code>elem.prev([exp])</code></li>
</ul>
<h4 id="8-匹配指定元素的前面所有兄弟元素"><a href="#8-匹配指定元素的前面所有兄弟元素" class="headerlink" title="8 匹配指定元素的前面所有兄弟元素"></a>8 匹配指定元素的前面所有兄弟元素</h4><hr>
<ul>
<li><code>elem.prevAll([exp])</code></li>
</ul>
<h4 id="9-匹配指定元素的所有兄弟元素"><a href="#9-匹配指定元素的所有兄弟元素" class="headerlink" title="9 匹配指定元素的所有兄弟元素"></a>9 匹配指定元素的所有兄弟元素</h4><hr>
<ul>
<li><code>elem.siblings([exp])</code></li>
</ul>
<h4 id="10-匹配指定以外的元素"><a href="#10-匹配指定以外的元素" class="headerlink" title="10 匹配指定以外的元素"></a>10 匹配指定以外的元素</h4><hr>
<ul>
<li><code>elem.not(exp)</code></li>
</ul>
<h4 id="11-包括自身在内的全部元素"><a href="#11-包括自身在内的全部元素" class="headerlink" title="11 包括自身在内的全部元素"></a>11 包括自身在内的全部元素</h4><hr>
<ul>
<li><code>elem.andSelf()</code></li>
</ul>
<h4 id="12-返回指定索引值的元素"><a href="#12-返回指定索引值的元素" class="headerlink" title="12 返回指定索引值的元素"></a>12 返回指定索引值的元素</h4><hr>
<ul>
<li><code>elem.eq(index)</code></li>
</ul>
<h4 id="13-判断元素是否包含指定的类"><a href="#13-判断元素是否包含指定的类" class="headerlink" title="13 判断元素是否包含指定的类"></a>13 判断元素是否包含指定的类</h4><hr>
<ul>
<li><code>elem.hasClass(className)</code></li>
</ul>
<h3 id="二、文档处理"><a href="#二、文档处理" class="headerlink" title="二、文档处理"></a>二、文档处理</h3><hr>
<h4 id="1-在指定元素内的未尾追加一个子元素"><a href="#1-在指定元素内的未尾追加一个子元素" class="headerlink" title="1 在指定元素内的未尾追加一个子元素"></a>1 在指定元素内的未尾追加一个子元素</h4><hr>
<ul>
<li>语法 :<code>Elem.append(ele)</code></li>
</ul>
<h4 id="2-把元素的追加到指定父级元素内的末尾"><a href="#2-把元素的追加到指定父级元素内的末尾" class="headerlink" title="2 把元素的追加到指定父级元素内的末尾"></a>2 把元素的追加到指定父级元素内的末尾</h4><hr>
<ul>
<li>语法 : <code>ele.appendTo(Elem)</code></li>
<li>说明 : 要求<code>ele</code>必须为<code>JQuery</code>元素，可以通过<code>Elem.children</code>(‘:last’)引用</li>
</ul>
<h4 id="3-在指定元素内的开始添加一个子元素"><a href="#3-在指定元素内的开始添加一个子元素" class="headerlink" title="3 在指定元素内的开始添加一个子元素"></a>3 在指定元素内的开始添加一个子元素</h4><hr>
<ul>
<li>语法 : <code>Elem.prepend(ele)</code></li>
</ul>
<h4 id="4-把元素的加入指定父级元素内的开始"><a href="#4-把元素的加入指定父级元素内的开始" class="headerlink" title="4 把元素的加入指定父级元素内的开始"></a>4 把元素的加入指定父级元素内的开始</h4><hr>
<ul>
<li>语法 : <code>ele.prependTo(Elem)</code></li>
<li>说明 : 要求<code>ele</code>必须为<code>JQuery</code>元素，可以通过<code>Elem.children().eq(0)</code>引用</li>
</ul>
<h4 id="5-使元素逐一被指定的HTML标记包裹起来"><a href="#5-使元素逐一被指定的HTML标记包裹起来" class="headerlink" title="5 使元素逐一被指定的HTML标记包裹起来"></a>5 使元素逐一被指定的HTML标记包裹起来</h4><hr>
<ul>
<li>语法 : <code>Elem.wrap(Tag)</code></li>
<li>说明: <code>Tag</code>将成为元素的父元素，可以通过<code>Elem.parent()</code>引用</li>
</ul>
<h4 id="6-使元素集合被指定的HTML标记包裹起来"><a href="#6-使元素集合被指定的HTML标记包裹起来" class="headerlink" title="6 使元素集合被指定的HTML标记包裹起来"></a>6 使元素集合被指定的HTML标记包裹起来</h4><hr>
<ul>
<li>语法 :<code>Elem.wrapAll(Tag)</code></li>
<li>说明:<br><code>wrap</code>把每个子元素逐一都包裹起来，<code>wrapAll</code>是把所有的子元素作为整体包裹起来。</li>
</ul>
<h4 id="7-包裹指定元素的子元素，相当于在元素和子元素中间加了隔离层"><a href="#7-包裹指定元素的子元素，相当于在元素和子元素中间加了隔离层" class="headerlink" title="7 包裹指定元素的子元素，相当于在元素和子元素中间加了隔离层"></a>7 包裹指定元素的子元素，相当于在元素和子元素中间加了隔离层</h4><hr>
<ul>
<li>语法 : <code>elem.wrapInner(Tag)</code></li>
</ul>
<h4 id="8-在元素之后添加兄弟元素。新添加的元素可以通过elem-next-引用。"><a href="#8-在元素之后添加兄弟元素。新添加的元素可以通过elem-next-引用。" class="headerlink" title="8 在元素之后添加兄弟元素。新添加的元素可以通过elem.next() 引用。"></a>8 在元素之后添加兄弟元素。新添加的元素可以通过elem.next() 引用。</h4><hr>
<ul>
<li>语法 : <code>elem.after(ele)</code></li>
</ul>
<h4 id="9-在元素之前添加兄弟元素。新添加的元素可以通过elem-prev-引用。"><a href="#9-在元素之前添加兄弟元素。新添加的元素可以通过elem-prev-引用。" class="headerlink" title="9 在元素之前添加兄弟元素。新添加的元素可以通过elem.prev() 引用。"></a>9 在元素之前添加兄弟元素。新添加的元素可以通过elem.prev() 引用。</h4><hr>
<ul>
<li>语法 : <code>elem.before(ele)</code></li>
</ul>
<h4 id="10-将元素A移动到元素B之后"><a href="#10-将元素A移动到元素B之后" class="headerlink" title="10 将元素A移动到元素B之后"></a>10 将元素A移动到元素B之后</h4><hr>
<ul>
<li>语法 : <code>elA.insertAfter(elB)</code></li>
</ul>
<h4 id="11-将元素A移动到元素B之前"><a href="#11-将元素A移动到元素B之前" class="headerlink" title="11 将元素A移动到元素B之前"></a>11 将元素A移动到元素B之前</h4><hr>
<ul>
<li>语法 : <code>elA.insertBefore(elB)</code></li>
</ul>
<h4 id="12-清空元素的子节点-元素本身及其属性仍然存在"><a href="#12-清空元素的子节点-元素本身及其属性仍然存在" class="headerlink" title="12 清空元素的子节点(元素本身及其属性仍然存在)"></a>12 清空元素的子节点(元素本身及其属性仍然存在)</h4><hr>
<ul>
<li>语法 : <code>elem.empty()</code></li>
</ul>
<h4 id="13-从DOM中删除所有匹配的元素"><a href="#13-从DOM中删除所有匹配的元素" class="headerlink" title="13 从DOM中删除所有匹配的元素"></a>13 从DOM中删除所有匹配的元素</h4><hr>
<ul>
<li>语法 : <code>elems.remove([条件])</code></li>
</ul>
<h4 id="14-将元素A替换为B"><a href="#14-将元素A替换为B" class="headerlink" title="14 将元素A替换为B"></a>14 将元素A替换为B</h4><hr>
<ul>
<li>语法 : <code>elA.replaceWith(elB);</code>    </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、过滤器&quot;&gt;&lt;a href=&quot;#一、过滤器&quot; class=&quot;headerlink&quot; title=&quot;一、过滤器&quot;&gt;&lt;/a&gt;一、过滤器&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;1-匹配指定元素的父&quot;&gt;&lt;a href=&quot;#1-匹配指定元素的父&quot; class=&quot;headerlink&quot; title=&quot;1 匹配指定元素的父&quot;&gt;&lt;/a&gt;1 匹配指定元素的父&lt;/h4&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elem.parent([exp])&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-匹配指定元素的子元素&quot;&gt;&lt;a href=&quot;#2-匹配指定元素的子元素&quot; class=&quot;headerlink&quot; title=&quot;2 匹配指定元素的子元素&quot;&gt;&lt;/a&gt;2 匹配指定元素的子元素&lt;/h4&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="DOM" scheme="http://blog.poetries.top/tags/DOM/"/>
    
      <category term="jQuery" scheme="http://blog.poetries.top/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>javascript常用积累</title>
    <link href="http://blog.poetries.top/2017/01/14/js-snippets-summary/"/>
    <id>http://blog.poetries.top/2017/01/14/js-snippets-summary/</id>
    <published>2017-01-14T00:20:43.000Z</published>
    <updated>2017-02-15T11:25:30.956Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、JS动画与动作不一致解决"><a href="#一、JS动画与动作不一致解决" class="headerlink" title="一、JS动画与动作不一致解决:"></a>一、JS动画与动作不一致解决:</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!$( <span class="string">"#handle"</span>).is(<span class="string">":animated"</span>))&#123;</div><div class="line">	<span class="comment">//判断元素是否处于动画状态</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="二、停止事件冒泡"><a href="#二、停止事件冒泡" class="headerlink" title="二、停止事件冒泡"></a>二、停止事件冒泡</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">event.stopPropagation();</div><div class="line">- 禁止JS报错</div><div class="line">	<span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span> ; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">/*try to do*/</span></div><div class="line">&#125; <span class="keyword">catch</span>(e)&#123;</div><div class="line"><span class="comment">/*do this if try error */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="三、查看JS对象属性"><a href="#三、查看JS对象属性" class="headerlink" title="三、查看JS对象属性"></a>三、查看JS对象属性</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">var</span> res = <span class="string">''</span> ; </div><div class="line"><span class="keyword">var</span> obj = <span class="built_in">eval</span>( obj );</div><div class="line">	<span class="keyword">for</span>( <span class="keyword">var</span> p <span class="keyword">in</span> <span class="built_in">eval</span>( obj ) )&#123;</div><div class="line">		<span class="keyword">var</span> prop = p + <span class="string">':'</span> + obj[p] + <span class="string">'\n'</span> ; </div><div class="line">		res += prop ; </div><div class="line">	&#125;</div><div class="line">	alert( res );</div></pre></td></tr></table></figure>
<h4 id="四、页面刷新时禁用提交按钮"><a href="#四、页面刷新时禁用提交按钮" class="headerlink" title="四、页面刷新时禁用提交按钮"></a>四、页面刷新时禁用提交按钮</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	$(<span class="string">':submit'</span>).attr(<span class="string">'disabled'</span>,<span class="literal">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意</strong>：<code>Opera</code> 浏览器不支持，其他浏览器避免在同一页面中使用 <code>&quot;javascrpt:&quot;</code> 等伪协议</p>
<h4 id="五、获取事件"><a href="#五、获取事件" class="headerlink" title="五、获取事件"></a>五、获取事件</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> ieEvent = <span class="built_in">window</span>.event ; </div><div class="line">	<span class="keyword">var</span> ffEvent = <span class="built_in">arguments</span>.callee.caller.arguments[<span class="number">0</span>] ; </div><div class="line">	<span class="comment">//arguments.callee						当前执行函数</span></div><div class="line">	<span class="comment">//arguments.callee.caller				当前执行函数的调用者</span></div><div class="line">	<span class="comment">//arguments.callee.caller.arguments[0]	当前函数调用者的第一个参数</span></div><div class="line">	<span class="keyword">var</span> e = ieEvent || ffEvent ; </div><div class="line">	<span class="keyword">return</span> e ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>获取鼠标距离浏览器顶部 左侧的实际距离 兼容IE</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getXY</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</div><div class="line">	<span class="keyword">var</span> xx  = <span class="number">0</span>;</div><div class="line">	<span class="keyword">var</span> yy = <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span>(ev.pageX)&#123; <span class="comment">//iE9+</span></div><div class="line">		xx = ev.pageX;</div><div class="line">		yy = ev.pageY;</div><div class="line">	&#125;<span class="keyword">else</span>&#123; </div><div class="line">		<span class="comment">//IE678 clientX,clientY + scroll</span></div><div class="line">		<span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop || </div><div class="line">				   <span class="built_in">document</span>.body.scrollTop;<span class="comment">//IE9+</span></div><div class="line">		<span class="keyword">var</span> scrollLeft = <span class="built_in">document</span>.documentElement.scrollLeft || </div><div class="line">					<span class="built_in">document</span>.body.scrollLeft;<span class="comment">//IE9+     </span></div><div class="line">		xx = ev.clientX + scrollLeft;</div><div class="line">		yy = ev.clientY + scrollTop;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">x</span>:xx,</div><div class="line">		<span class="attr">y</span>:yy</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="六、获取键盘码"><a href="#六、获取键盘码" class="headerlink" title="六、获取键盘码"></a>六、获取键盘码</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getKCode = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> ieEvent = <span class="built_in">window</span>.event ; </div><div class="line">		<span class="keyword">var</span> ffEvent = <span class="built_in">arguments</span>.callee.caller.arguments[<span class="number">0</span>] ; </div><div class="line">		<span class="keyword">var</span> e = ieEvent || ffEvent ; </div><div class="line">		<span class="keyword">var</span> kCode = e.keyCode || e.which ;</div><div class="line">		<span class="keyword">return</span> kCode ;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="七、-鼠标滑入-滑出样式切换"><a href="#七、-鼠标滑入-滑出样式切换" class="headerlink" title="七、 鼠标滑入/滑出样式切换"></a>七、 鼠标滑入/滑出样式切换</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div"</span>).on(<span class="string">"mouseover mouseout"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).toggleClass(<span class="string">"over"</span>);</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<h4 id="八、点击鼠标-显示-隐藏切换"><a href="#八、点击鼠标-显示-隐藏切换" class="headerlink" title="八、点击鼠标,显示/隐藏切换"></a>八、点击鼠标,显示/隐藏切换</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#panel h5.head"</span>).toggle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	$(<span class="keyword">this</span>).toggleClass(<span class="string">"highlight"</span>);</div><div class="line">	$(<span class="keyword">this</span>).next().toggle();</div><div class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	$(<span class="keyword">this</span>).toggleClass(<span class="string">"highlight"</span>);</div><div class="line">	$(<span class="keyword">this</span>).next().toggle();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="九、JS-调试"><a href="#九、JS-调试" class="headerlink" title="九、JS 调试"></a>九、JS 调试</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log() ;			<span class="comment">//打印变量</span></div><div class="line"><span class="built_in">console</span>.dir() ; 		<span class="comment">//打印对象</span></div><div class="line"><span class="built_in">console</span>.dirxml() ; 		<span class="comment">//打印节点</span></div><div class="line"><span class="built_in">console</span>.trace() ; 		<span class="comment">//打印函数调用轨迹</span></div><div class="line"><span class="built_in">window</span>.document.title = str;</div></pre></td></tr></table></figure>
<h4 id="十、为子元素集合绑定事件"><a href="#十、为子元素集合绑定事件" class="headerlink" title="十、为子元素集合绑定事件"></a>十、为子元素集合绑定事件</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div"</span>).delegate(<span class="string">"button"</span>,<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	$(<span class="string">"p"</span>).slideToggle();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="十一、自定义IE浏览器渲染方式-解决IE10下JS或插件失效"><a href="#十一、自定义IE浏览器渲染方式-解决IE10下JS或插件失效" class="headerlink" title="十一、自定义IE浏览器渲染方式(解决IE10下JS或插件失效):"></a>十一、自定义<code>IE</code>浏览器渲染方式(解决<code>IE10</code>下<code>JS</code>或插件失效):</h4><hr>
<p>如果安装了<code>Chrome</code>内核，则使用<code>Chrome</code>内核来渲染页面<code>[chrome=1]</code>，如果未安装，则使用最高版本的IE内核进行渲染<code>[IE=edge]:</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h4 id="十二、注册事件"><a href="#十二、注册事件" class="headerlink" title="十二、注册事件"></a>十二、注册事件</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 标准浏览器</span></div><div class="line">form1.addEventListener(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    e.preventDefault();		<span class="comment">//阻止浏览器默认动作</span></div><div class="line">	e.stopPropagation();		<span class="comment">//阻止事件流产生</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IE8及更早版本IE浏览器</span></div><div class="line">form1.attachEvent(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	event.cancelBubble = <span class="literal">true</span>; <span class="comment">//阻止浏览器默认动作--IE8及更早版本IE浏览器</span></div><div class="line">	event.returnValue = <span class="literal">false</span>; <span class="comment">//阻止事件流产生--IE8及更早版本IE浏览器</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、JS动画与动作不一致解决&quot;&gt;&lt;a href=&quot;#一、JS动画与动作不一致解决&quot; class=&quot;headerlink&quot; title=&quot;一、JS动画与动作不一致解决:&quot;&gt;&lt;/a&gt;一、JS动画与动作不一致解决:&lt;/h4&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!$( &lt;span class=&quot;string&quot;&gt;&quot;#handle&quot;&lt;/span&gt;).is(&lt;span class=&quot;string&quot;&gt;&quot;:animated&quot;&lt;/span&gt;))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//判断元素是否处于动画状态&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="Snippet" scheme="http://blog.poetries.top/tags/Snippet/"/>
    
  </entry>
  
  <entry>
    <title>webpack学习总结(一)</title>
    <link href="http://blog.poetries.top/2017/01/13/webpack/"/>
    <id>http://blog.poetries.top/2017/01/13/webpack/</id>
    <published>2017-01-13T10:40:43.000Z</published>
    <updated>2017-02-15T11:25:30.960Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>声明 本教程整理于互联网</p>
</blockquote>
<p>先看一个例子</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="comment">// 入口</span></div><div class="line">    entry: &#123;</div><div class="line">        <span class="string">'index'</span>: <span class="string">'./index.js'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 输出</span></div><div class="line">    output: &#123;</div><div class="line">        <span class="attr">path</span>: <span class="string">'./'</span>,</div><div class="line">        <span class="comment">/*</span></div><div class="line">            [name] 是 entry 中的 key</div><div class="line">            entry: &#123;</div><div class="line">                key: value</div><div class="line">            &#125;</div><div class="line">        */</div><div class="line">        filename: <span class="string">"[name].b.js"</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>module.exports 是 CommonJS 规范中定义一个文件对外接口的语法，<a href="webpack.config.js">webpack.config.js</a> 文件对外的接口是一个 object ，其中定义了一些配置参数。</p>
<a id="more"></a>
<h3 id="一、参数详解"><a href="#一、参数详解" class="headerlink" title="一、参数详解"></a>一、参数详解</h3><hr>
<h4 id="1-1-entry"><a href="#1-1-entry" class="headerlink" title="1.1 entry"></a>1.1 entry</h4><hr>
<p>最初 webpack 是为了构建 SPA (Single Page Application) ，<code>entry</code> 是『入口』配置。在 <code>entry</code> 中的文件才会被编译。</p>
<h4 id="1-2-output"><a href="#1-2-output" class="headerlink" title="1.2 output"></a>1.2 output</h4><hr>
<p><code>output</code> 控制构建后的文件的存放位置和命名。 <code>path</code> 定义所有构建后文件的所在目录，本例中构建到当前文件夹。</p>
<h4 id="1-3-filename"><a href="#1-3-filename" class="headerlink" title="1.3 filename"></a>1.3 filename</h4><hr>
<p><code>filename</code> 控制构建后文件的文件名</p>
<h4 id="1-4-源码和构建结果"><a href="#1-4-源码和构建结果" class="headerlink" title="1.4 源码和构建结果"></a>1.4 源码和构建结果</h4><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// index.js</span></div><div class="line"><span class="keyword">var</span> content = <span class="built_in">require</span>(<span class="string">"./content.js"</span>)</div><div class="line"></div><div class="line"><span class="built_in">document</span>.body.innerHTML = <span class="built_in">document</span>.body.innerHTML + content</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// content.js</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="string">"some string"</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"https://github.com/nimojs/webpack-book/blob/gh-pages/1-modules/README.md"</span>&gt;</span>本例说明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"index.b.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>建议尽量理解构建后的代码，这样有助于理解 <code>webpack</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/******/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// The module cache</span></div><div class="line"><span class="comment">/******/</span> 	<span class="keyword">var</span> installedModules = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// The require function</span></div><div class="line"><span class="comment">/******/</span> 	<span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// Check if module is in cache</span></div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">if</span>(installedModules[moduleId])</div><div class="line"><span class="comment">/******/</span> 			<span class="keyword">return</span> installedModules[moduleId].exports;</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// Create a new module (and put it into the cache)</span></div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</div><div class="line"><span class="comment">/******/</span> 			exports: &#123;&#125;,</div><div class="line"><span class="comment">/******/</span> 			id: moduleId,</div><div class="line"><span class="comment">/******/</span> 			loaded: <span class="literal">false</span></div><div class="line"><span class="comment">/******/</span> 		&#125;;</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// Execute the module function</span></div><div class="line"><span class="comment">/******/</span> 		modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// Flag the module as loaded</span></div><div class="line"><span class="comment">/******/</span> 		<span class="built_in">module</span>.loaded = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// Return the exports of the module</span></div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">return</span> <span class="built_in">module</span>.exports;</div><div class="line"><span class="comment">/******/</span> 	&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// expose the modules object (__webpack_modules__)</span></div><div class="line"><span class="comment">/******/</span> 	__webpack_require__.m = modules;</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// expose the module cache</span></div><div class="line"><span class="comment">/******/</span> 	__webpack_require__.c = installedModules;</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// __webpack_public_path__</span></div><div class="line"><span class="comment">/******/</span> 	__webpack_require__.p = <span class="string">""</span>;</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// Load entry module and return exports</span></div><div class="line"><span class="comment">/******/</span> 	<span class="keyword">return</span> __webpack_require__(<span class="number">0</span>);</div><div class="line"><span class="comment">/******/</span> &#125;)</div><div class="line"><span class="comment">/************************************************************************/</span></div><div class="line"><span class="comment">/******/</span> ([</div><div class="line"><span class="comment">/* 0 */</span></div><div class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> content = __webpack_require__(<span class="number">1</span>)</div><div class="line"></div><div class="line">	<span class="built_in">document</span>.body.innerHTML = <span class="built_in">document</span>.body.innerHTML + content</div><div class="line"></div><div class="line"><span class="comment">/***/</span> &#125;,</div><div class="line"><span class="comment">/* 1 */</span></div><div class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</div><div class="line"></div><div class="line">	<span class="built_in">module</span>.exports = <span class="string">"some string"</span></div><div class="line"></div><div class="line"><span class="comment">/***/</span> &#125;</div><div class="line"><span class="comment">/******/</span> ]);</div></pre></td></tr></table></figure>
<p>前面带 <code>/******/</code>的代码都是 <code>webpack</code>的模块化代码，它内置了一个模块加载器</p>
<p>模块 0 是 <code>index.js</code> 的代码，模块 1 是 <code>require(&quot;./content.js&quot;)</code> 的代码。如果你再  <code>require</code> 一个模块那么就会有模块 3。</p>
<h3 id="二、JS包含样式"><a href="#二、JS包含样式" class="headerlink" title="二、JS包含样式"></a>二、JS包含样式</h3><hr>
<p>安装时间可能会比较久</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 安装所需 style-loader 和 css-loader</div><div class="line">npm install css-loader style-loader -D</div><div class="line"></div><div class="line"># less 和 less-loader 可以选择不安装 （如果安装了请去掉 index.js 中引入 less 的注释）</div><div class="line">npm install less-loader -D</div><div class="line">npm install less -g</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --watch</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">entry</span>: &#123;</div><div class="line">        <span class="string">'index'</span>: <span class="string">'./index.js'</span></div><div class="line">    &#125;,    </div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">        <span class="attr">path</span>: <span class="string">'./'</span>,</div><div class="line">        <span class="attr">filename</span>: <span class="string">"[name].b.js"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">module</span>: &#123;</div><div class="line">        <span class="attr">loaders</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">                <span class="attr">loader</span>: <span class="string">"style!css"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</div><div class="line">                <span class="attr">loader</span>: <span class="string">"style!css!less"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>module.loaders</code> 定义 <code>require</code> 的模块代码会被如何编译。 <a href="http://webpack.github.io/docs/using-loaders.html" target="_blank" rel="external">官方文档 using-loaders</a></p>
<h4 id="2-1-module-loaders-test"><a href="#2-1-module-loaders-test" class="headerlink" title="2.1 module.loaders[].test"></a>2.1 module.loaders[].test</h4><hr>
<p><code>test</code> 参数是一个正则表达式，用于匹配模块。<code>&#39;./index.css&#39;.test(/\.css&amp;/)</code></p>
<h4 id="2-2-module-loaders-loader"><a href="#2-2-module-loaders-loader" class="headerlink" title="2.2 module.loaders[].loader"></a>2.2 module.loaders[].loader</h4><hr>
<p><code>loader</code> 参数定义被 <code>test</code> 匹配到的模块会执行哪些构建操作</p>
<p>本例中 .css 后缀的文件会被 <code>style-loader</code> 和 <code>css-loader</code> 构建</p>
<h4 id="2-3-require-时配置-loader"><a href="#2-3-require-时配置-loader" class="headerlink" title="2.3 require 时配置 loader"></a>2.3 require 时配置 loader</h4><hr>
<p>如果你不想在 webpack.config.js 配置，你还可以在 require 时单独定义一个文件会使用哪些 loader</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'!style!css!./index.css'</span>)</div></pre></td></tr></table></figure>
<h4 id="2-4-被嵌入-lt-head-gt"><a href="#2-4-被嵌入-lt-head-gt" class="headerlink" title="2.4 被嵌入 &lt;head&gt;"></a>2.4 被嵌入 <code>&lt;head&gt;</code></h4><hr>
<p>查看 <a href="http://nimojs.github.io/webpack-book/2-style/" target="_blank" rel="external">在线预览构建结果页面</a> 源码可以看到样式通过 JS 嵌入到 <code>&lt;head&gt;</code> 中使用的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"><span class="selector-tag">body</span> &#123;</span></div><div class="line">    <span class="attribute">background-color</span>:<span class="number">#ABCDEF</span>;</div><div class="line">&#125;<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="三、JS包含图片"><a href="#三、JS包含图片" class="headerlink" title="三、JS包含图片"></a>三、JS包含图片</h3><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install url-loader file-loader -D</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --watch</div></pre></td></tr></table></figure>
<blockquote>
<p>代码解释待补充</p>
</blockquote>
<h3 id="四、使用全局变量"><a href="#四、使用全局变量" class="headerlink" title="四、使用全局变量"></a>四、使用全局变量</h3><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack -w</div></pre></td></tr></table></figure>
<h3 id="五、暴露全局变量"><a href="#五、暴露全局变量" class="headerlink" title="五、暴露全局变量"></a>五、暴露全局变量</h3><hr>
<blockquote>
<p>有些模块依赖全局变量 <code>windows.jQuery</code> 才能使用，可以通过 <a href="https://github.com/webpack/expose-loader" target="_blank" rel="external">expose-loader</a> 暴露全局变量</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install jquery --save</div><div class="line">npm install expose-loader -D</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack -w</div></pre></td></tr></table></figure>
<h3 id="六、提取单独样式文件"><a href="#六、提取单独样式文件" class="headerlink" title="六、提取单独样式文件"></a>六、提取单独样式文件</h3><hr>
<p>有时候我们需要编译单独的 CSS 文件，这就需要 <a href="https://github.com/webpack/extract-text-webpack-plugin" target="_blank" rel="external">extract-text-webpack-plugin</a> 插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install extract-text-webpack-plugin -D</div><div class="line">npm install style-loader css-loader -D</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack -w</div></pre></td></tr></table></figure>
<h3 id="七、自动打包公用资源"><a href="#七、自动打包公用资源" class="headerlink" title="七、自动打包公用资源"></a>七、自动打包公用资源</h3><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install jquery paging --save</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack -w</div></pre></td></tr></table></figure>
<h3 id="八、文件指纹-hash"><a href="#八、文件指纹-hash" class="headerlink" title="八、文件指纹 hash"></a>八、文件指纹 hash</h3><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --watch</div></pre></td></tr></table></figure>
<h3 id="九、异步加载"><a href="#九、异步加载" class="headerlink" title="九、异步加载"></a>九、异步加载</h3><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --watch</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;声明 本教程整理于互联网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先看一个例子&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// webpack.config.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 入口&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    entry: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;index&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;./index.js&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 输出&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;./&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            [name] 是 entry 中的 key&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            entry: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                key: value&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        filename: &lt;span class=&quot;string&quot;&gt;&quot;[name].b.js&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;module.exports 是 CommonJS 规范中定义一个文件对外接口的语法，&lt;a href=&quot;webpack.config.js&quot;&gt;webpack.config.js&lt;/a&gt; 文件对外的接口是一个 object ，其中定义了一些配置参数。&lt;/p&gt;
    
    </summary>
    
      <category term="Build" scheme="http://blog.poetries.top/categories/Build/"/>
    
    
      <category term="webpack" scheme="http://blog.poetries.top/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>gulp学习总结篇</title>
    <link href="http://blog.poetries.top/2017/01/13/gulp/"/>
    <id>http://blog.poetries.top/2017/01/13/gulp/</id>
    <published>2017-01-13T10:20:43.000Z</published>
    <updated>2017-02-15T11:25:30.948Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>声明 本教程整理于互联网</p>
</blockquote>
<h2 id="一、gulp-入门简介"><a href="#一、gulp-入门简介" class="headerlink" title="一、gulp 入门简介"></a>一、gulp 入门简介</h2><hr>
<p><code>gulp</code> 是基于 <code>node</code> 实现<code>Web</code> 前端自动化开发的工具，利用它能够极大的提高开发效率。</p>
<p>在 Web 前端开发工作中有很多“重复工作”，比如压缩<code>CSS/JS</code>文件。而这些工作都是有规律的。找到这些规律，并编写 <code>gulp</code> 配置代码,让 <code>gulp</code> 自动执行这些“重复工作”。</p>
<a id="more"></a>
<ul>
<li>将规律转换为 <code>gulp</code> 代码</li>
</ul>
<ul>
<li>现有目录结构如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">└── js/</div><div class="line">    └── a.js</div></pre></td></tr></table></figure>
<h3 id="1-1-规律"><a href="#1-1-规律" class="headerlink" title="1.1 规律"></a>1.1 规律</h3><hr>
<ul>
<li>找到 <code>js/</code>目录下的所有 .<code>js</code> 文件</li>
<li>压缩这些 <code>js</code> 文件</li>
<li>将压缩后的代码另存在 <code>dist/js/</code> 目录下</li>
</ul>
<h3 id="1-2-编写-gulp-代码"><a href="#1-2-编写-gulp-代码" class="headerlink" title="1.2 编写 gulp 代码"></a>1.2 编写 <code>gulp</code> 代码</h3><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 压缩 JavaScript 文件</span></div><div class="line">gulp.task(<span class="string">'script'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 1. 找到</span></div><div class="line">    gulp.src(<span class="string">'js/*.js'</span>)</div><div class="line">    <span class="comment">// 2. 压缩</span></div><div class="line">        .pipe(uglify())</div><div class="line">    <span class="comment">// 3. 另存</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/js'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="1-3-代码执行结果"><a href="#1-3-代码执行结果" class="headerlink" title="1.3 代码执行结果"></a>1.3 代码执行结果</h3><hr>
<p>代码执行后文件结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">└── js/</div><div class="line">│   └── a.js</div><div class="line">└── dist/</div><div class="line">    └── js/</div><div class="line">        └── a.js</div></pre></td></tr></table></figure>
<p>a.js 压缩前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function demo (msg) &#123;</div><div class="line">    alert(&apos;--------\r\n&apos; + msg + &apos;\r\n--------&apos;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">demo(&apos;Hi&apos;)</div></pre></td></tr></table></figure></p>
<p>a.js 压缩后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">function demo(n)&#123;alert(&quot;--------\r\n&quot;+n+&quot;\r\n--------&quot;)&#125;demo(&quot;Hi&quot;);</div></pre></td></tr></table></figure></p>
<p>此时 <code>dist/js</code> 目录下的 <code>.js</code> 文件都是压缩后的版本。</p>
<p>你还可以监控 <code>js/</code> 目录下的 js 文件，当某个文件被修改时，自动压缩修改文件。启动 gulp 后就可以让它帮助你自动构建 Web 项目。</p>
<hr>
<p><code>gulp</code> 还可以做很多事，例如：</p>
<ol>
<li>压缩<code>CSS</code></li>
<li>压缩图片</li>
<li>编译<code>Sass/LESS</code></li>
<li>编译<code>CoffeeScript</code></li>
<li><code>markdown</code>转换为 <code>html</code></li>
</ol>
<h2 id="二、安装-Node-和-gulp"><a href="#二、安装-Node-和-gulp" class="headerlink" title="二、安装 Node 和 gulp"></a>二、安装 Node 和 gulp</h2><hr>
<p><code>gulp</code> 是基于 <code>node</code> 实现的，那么我们就需要先安装 node。</p>
<blockquote>
<p>Node 是一个基于Chrome JavaScript V8引擎建立的一个平台，可以利用它实现 Web服务，做类似PHP的事。</p>
</blockquote>
<p>打开 <a href="https://nodejs.org/" target="_blank" rel="external">https://nodejs.org/</a> 点击绿色的 <strong>INSTALL</strong> 按钮下载安装 node。</p>
<h3 id="2-1-命令行"><a href="#2-1-命令行" class="headerlink" title="2.1 命令行"></a>2.1 命令行</h3><hr>
<p>在 <code>Windows</code> 中可按 <code>&lt;kbd&gt;</code>徽标键<code>&lt;/kbd&gt;</code>（alt键左边）+ <kbd>R</kbd> 打开输入 <code>cmd</code> + <kbd>Enter</kbd> 打开命令行。</p>
<h3 id="2-2-终端-Mac"><a href="#2-2-终端-Mac" class="headerlink" title="2.2 终端(Mac)"></a>2.2 终端(Mac)</h3><hr>
<p>打开 Launchpad（像火箭一样的图标），在屏幕上方搜索框中输入 <code>终端</code> + <kbd>Enter</kbd> 打开终端。</p>
<h3 id="2-3-查看-node-版本号"><a href="#2-3-查看-node-版本号" class="headerlink" title="2.3 查看 node 版本号"></a>2.3 查看 node 版本号</h3><hr>
<p>在终端/命令行中输入 <code>node -v</code> 检测<code>node</code>是否安装成功，安装成功会显示出<code>node</code> 的版本号。</p>
<h3 id="2-4-跳转目录"><a href="#2-4-跳转目录" class="headerlink" title="2.4 跳转目录"></a>2.4 跳转目录</h3><hr>
<p>终端/命令行 中可使用 <code>cd 目录名</code> 跳转至指定目录，Mac 中还可以使用 <code>ls</code> 查看当前目录下的文件列表。</p>
<h3 id="2-5-Windows"><a href="#2-5-Windows" class="headerlink" title="2.5 Windows"></a>2.5 Windows</h3><hr>
<p><code>Windows</code> 下可使用如下命令跳转至指定目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 跳转至 C 盘根目录</div><div class="line">cd c:\</div><div class="line">// 跳转至当前目录的 demo 文件夹</div><div class="line">cd demo</div><div class="line">// 跳转至上一级</div><div class="line">cd ..</div></pre></td></tr></table></figure>
<h3 id="2-6-Mac"><a href="#2-6-Mac" class="headerlink" title="2.6 Mac"></a>2.6 Mac</h3><hr>
<p><code>Mac</code>中建议只在 <code>Documents</code>目录下进行文件操作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 跳转至文档目录</div><div class="line">cd /Users/你的用户名/Documents/</div><div class="line">// 或第一次打开终端时直接输入</div><div class="line">cd Documents</div><div class="line">// 查看目录下文件列表</div><div class="line">ls</div><div class="line">// 创建文件夹</div><div class="line">mkdir demo</div><div class="line">// 跳转至当前目录下的 demo 文件夹</div><div class="line">cd demo</div><div class="line">// 跳转至上级目录</div><div class="line">cd ..</div></pre></td></tr></table></figure>
<h3 id="2-7-退出运行状态"><a href="#2-7-退出运行状态" class="headerlink" title="2.7 退出运行状态"></a>2.7 退出运行状态</h3><hr>
<p>如果你在命令行中启动了一些一直运行的命令，你的命令行会进入“运行”状态，此时你不可以在命令行进行其他操作。可通过 <code>Ctrl + C</code> 停止 gulp。（Mac 中使用 <code>control + C</code>）</p>
<p>后面的章节中如果代码中存在 <code>gulp.watch</code> 并在命令行运行了 <code>gulp</code> 则需要使用 <code>Ctrl + C</code> 退出任务。</p>
<h3 id="2-8-npm-模块管理器"><a href="#2-8-npm-模块管理器" class="headerlink" title="2.8 npm 模块管理器"></a>2.8 npm 模块管理器</h3><hr>
<p>如果你了解 <code>npm</code> 则跳过此章节</p>
<p>若你不了解npm 请阅读 <a href="http://javascript.ruanyifeng.com/nodejs/npm.html" target="_blank" rel="external">npm模块管理器</a></p>
<h3 id="2-9-安装-gulp"><a href="#2-9-安装-gulp" class="headerlink" title="2.9 安装 gulp"></a>2.9 安装 <code>gulp</code></h3><hr>
<p><code>npm</code> 是 node<code>` 的包管理工具，可以利用它安装</code>gulp<code>所需的包。（在安装</code>node<code>时已经自动安装了</code>npm`）</p>
<p>在命令行输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g gulp</div></pre></td></tr></table></figure>
<p>若一直没安装成功，请<a href="https://github.com/nimojs/blog/issues/20" target="_blank" rel="external">使用 cnpm 安装</a>(npm的国内加速镜像)</p>
<p>意思是：使用 <code>npm</code> 安装全局性的(<code>-g</code>) gulp 包。</p>
<blockquote>
<p>如果你安装失败，请输入<code>sudo npm install -g gulp</code>使用管理员权限安装。（可能会要求输入密码）</p>
</blockquote>
<p>安装时请注意命令行的提示信息，安装完成后可在命令行输入 <code>gulp -v</code> 以确认安装成功。</p>
<p>至此，我们完成了准备工作。接着让 <code>gulp</code>开始帮我们干活吧！</p>
<h2 id="三、使用-gulp-压缩-JS"><a href="#三、使用-gulp-压缩-JS" class="headerlink" title="三、使用 gulp 压缩 JS"></a>三、使用 gulp 压缩 JS</h2><hr>
<p>压缩<code>js</code> 代码可降低 <code>js</code> 文件大小，提高页面打开速度。在不利用 gulp 时我们需要通过各种工具手动完成压缩工作。</p>
<p>所有的 <code>gulp</code> 代码编写都可以看做是将规律转化为代码的过程。</p>
<ul>
<li><strong>规律</strong></li>
</ul>
<p>找到 <code>js/</code> 目录下的所有<code>js</code> 文件，压缩它们，将压缩后的文件存放在 <code>dist/js/</code> 目录下。</p>
<ul>
<li><code>gulp</code>  代码</li>
</ul>
<p><code>gulp</code>  的所有配置代码都写在 <code>gulpfile.js</code> 文件。</p>
<h3 id="3-1-新建一个-gulpfile-js-文件"><a href="#3-1-新建一个-gulpfile-js-文件" class="headerlink" title="3.1 新建一个 gulpfile.js 文件"></a>3.1 新建一个 <code>gulpfile.js</code> 文件</h3><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chapter2</div><div class="line">└── gulpfile.js</div></pre></td></tr></table></figure>
<h3 id="3-2-在-gulpfile-js-中编写代码"><a href="#3-2-在-gulpfile-js-中编写代码" class="headerlink" title="3.2 在 gulpfile.js 中编写代码"></a>3.2 在 <code>gulpfile.js</code> 中编写代码</h3><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p><code>require()</code> 是 node （CommonJS）中获取模块的语法。</p>
<p>在 gulp 中你只需要理解 <code>require()</code> 可以获取模块。</p>
</blockquote>
<hr>
<h3 id="3-3-获取-gulp-uglify-组件"><a href="#3-3-获取-gulp-uglify-组件" class="headerlink" title="3.3 获取 gulp-uglify 组件"></a>3.3 获取 <code>gulp-uglify</code> 组件</h3><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 uglify 模块（用于压缩 JS）</span></div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>)</div></pre></td></tr></table></figure>
<hr>
<h3 id="3-4-创建压缩任务"><a href="#3-4-创建压缩任务" class="headerlink" title="3.4 创建压缩任务"></a>3.4 创建压缩任务</h3><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 压缩 js 文件</span></div><div class="line"><span class="comment">// 在命令行使用 gulp script 启动此任务</span></div><div class="line">gulp.task(<span class="string">'script'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 1. 找到文件</span></div><div class="line">    gulp.src(<span class="string">'js/*.js'</span>)</div><div class="line">    <span class="comment">// 2. 压缩文件</span></div><div class="line">        .pipe(uglify())</div><div class="line">    <span class="comment">// 3. 另存压缩后的文件</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/js'</span>))</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li><code>gulp.task(name, fn)</code> - 定义任务，第一个参数是任务名，第二个参数是任务内容。</li>
<li><code>gulp.src(path)</code> - 选择文件，传入参数是文件路径。</li>
<li><code>gulp.dest(path)</code> - 输出文件</li>
<li><code>gulp.pipe()</code> - 管道，你可以暂时将 pipe 理解为将操作加入执行队列</li>
</ul>
<p>参考：<a href="http://www.gulpjs.com.cn/docs/api/" target="_blank" rel="external">gulp API文档</a></p>
<hr>
<h3 id="3-5-跳转至-gulpfile-js-所在目录"><a href="#3-5-跳转至-gulpfile-js-所在目录" class="headerlink" title="3.5 跳转至 gulpfile.js 所在目录"></a>3.5 跳转至 <code>gulpfile.js</code> 所在目录</h3><hr>
<p>打开命令行使用 <code>cd</code> 命令跳转至 <code>gulpfile.js</code> 文件所在目录。</p>
<p>例如我的 <code>gulpfile.js</code> 文件保存在 <code>C:\gulp-book\demo\chapter2\gulpfile.js</code>。</p>
<p>那么就需要在命令行输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd C:\gulp-book\demo\chapter2</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Mac 用户可使用 <code>cd Documents/gulp-book/demo/chapter2/</code> 跳转</p>
</blockquote>
<hr>
<h3 id="3-6-使用命令行运行-script-任务"><a href="#3-6-使用命令行运行-script-任务" class="headerlink" title="3.6 使用命令行运行 script 任务"></a>3.6 使用命令行运行 script 任务</h3><hr>
<p>在控制台输入 <code>gulp 任务名</code> 可运行任务，此处我们输入 <code>gulp script</code> 回车。</p>
<p>注意：输入 <code>gulp script</code> 后命令行将会提示错误信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 在命令行输入</div><div class="line">gulp script</div><div class="line"></div><div class="line">Error: Cannot find module &apos;gulp-uglify&apos;</div><div class="line">    at Function.Module._resolveFilename (module.js:338:15)</div><div class="line">    at Function.Module._load (module.js:280:25)</div></pre></td></tr></table></figure></p>
<p><code>Cannot find module &#39;gulp-uglify&#39;</code> 没有找到 <code>gulp-uglify</code> 模块。</p>
<hr>
<h3 id="3-7-安装-gulp-uglify-模块"><a href="#3-7-安装-gulp-uglify-模块" class="headerlink" title="3.7 安装 gulp-uglify 模块"></a>3.7 安装 <code>gulp-uglify</code> 模块</h3><hr>
<p>因为我们并没有安装 <code>gulp-uglify</code> 模块到本地，所以找不到此模块。</p>
<p>使用 npm 安装 <code>gulp-uglify</code> 到本地</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-uglify</div></pre></td></tr></table></figure>
<p>安装成功后你会看到如下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gulp-uglify@1.1.0 node_modules/gulp-uglify</div><div class="line">├── deepmerge@0.2.7</div><div class="line">├── uglify-js@2.4.16 (uglify-to-browserify@1.0.2, async@0.2.10, source-map@0.1.34, optimist@0.3.7)</div><div class="line">├── vinyl-sourcemaps-apply@0.1.4 (source-map@0.1.43)</div><div class="line">├── through2@0.6.3 (xtend@4.0.0, readable-stream@1.0.33)</div><div class="line">└── gulp-util@3.0.4 (array-differ@1.0.0, beeper@1.0.0, array-uniq@1.0.2, object-assign@2.0.0, lodash._reinterpolate@3.0.0, lodash._reescape@3.0.0, lodash._reevaluate@3.0.0, replace-ext@0.0.1, minimist@1.1.1, chalk@1.0.0, lodash.template@3.3.2, vinyl@0.4.6, multipipe@0.1.2, dateformat@1.0.11)</div><div class="line">chapter2 $</div></pre></td></tr></table></figure></p>
<p>在你的文件夹中会新增一个 <code>node_modules</code> 文件夹，这里面存放着 npm 安装的模块。</p>
<p>目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">├── gulpfile.js</div><div class="line">└── node_modules</div><div class="line">	└── gulp-uglify</div></pre></td></tr></table></figure></p>
<p>接着输入 <code>gulp script</code> 执行任务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gulp script</div><div class="line">[13:34:57] Using gulpfile ~/Documents/code/gulp-book/demo/chapter2/gulpfile.js</div><div class="line">[13:34:57] Starting &apos;script&apos;...</div><div class="line">[13:34:57] Finished &apos;script&apos; after 6.13 ms</div></pre></td></tr></table></figure>
<hr>
<h3 id="3-8-编写-js-文件"><a href="#3-8-编写-js-文件" class="headerlink" title="3.8 编写 js 文件"></a>3.8 编写 js 文件</h3><hr>
<p>我们发现 gulp 没有进行任何压缩操作。因为没有js这个目录，也没有 js 目录下的 <code>.js</code> 后缀文件。</p>
<p>创建 <code>a.js</code> 文件，并编写如下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// a.js</div><div class="line">function demo (msg) &#123;</div><div class="line">    alert(&apos;--------\r\n&apos; + msg + &apos;\r\n--------&apos;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">demo(&apos;Hi&apos;)</div></pre></td></tr></table></figure>
<p>目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">├── gulpfile.js</div><div class="line">├──  js</div><div class="line">│	└── a.js</div><div class="line">└── node_modules</div><div class="line">	└── gulp-uglify</div></pre></td></tr></table></figure></p>
<p>接着在命令行输入 <code>gulp script</code> 执行任务</p>
<p>gulp 会在命令行当前目录下创建 <code>dist/js/</code> 文件夹，并创建压缩后的 <code>a.js</code> 文件。</p>
<p>目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">├── gulpfile.js</div><div class="line">├──  js</div><div class="line">│	└── a.js</div><div class="line">├──  dist</div><div class="line">│	└── js</div><div class="line">│		└── a.js</div><div class="line">└── node_modules</div><div class="line">	└── gulp-uglify</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/nimojs/gulp-book/blob/master/demo/chapter2/dist/js/a.js" target="_blank" rel="external">dist/js/a.js</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">n</span>)</span>&#123;alert(<span class="string">"--------\r\n"</span>+n+<span class="string">"\r\n--------"</span>)&#125;demo(<span class="string">"Hi"</span>);</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="3-9-检测代码修改自动执行任务"><a href="#3-9-检测代码修改自动执行任务" class="headerlink" title="3.9 检测代码修改自动执行任务"></a>3.9 检测代码修改自动执行任务</h3><hr>
<p><code>js/a.js</code>一旦有修改 就必须重新在命令行输入 <code>gulp script</code> ，这很麻烦。</p>
<p>可以使用 <code>gulp.watch(src, fn)</code> 检测指定目录下文件的修改后执行任务。</p>
<p>在 <code>gulpfile.js</code> 中编写如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 监听文件修改，当文件被修改则执行 script 任务</div><div class="line">gulp.watch(&apos;js/*.js&apos;, [&apos;script&apos;]);</div></pre></td></tr></table></figure></p>
<p>但是没有命令可以运行 <code>gulp.watch()</code>，需要将 <code>gulp.watch()</code> 包含在一个任务中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 在命令行使用 gulp auto 启动此任务</div><div class="line">gulp.task(&apos;auto&apos;, function () &#123;</div><div class="line">    // 监听文件修改，当文件被修改则执行 script 任务</div><div class="line">    gulp.watch(&apos;js/*.js&apos;, [&apos;script&apos;])</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>接着在命令行输入 <code>gulp auto</code>，自动监听 <code>js/*.js</code> 文件的修改后压缩js。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$gulp auto</div><div class="line">[21:09:45] Using gulpfile ~/Documents/code/gulp-book/demo/chapter2/gulpfile.js</div><div class="line">[21:09:45] Starting &apos;auto&apos;...</div><div class="line">[21:09:45] Finished &apos;auto&apos; after 9.19 ms</div></pre></td></tr></table></figure>
<p>此时修改 <code>js/a.js</code> 中的代码并保存。命令行将会出现提示，表示检测到文件修改并压缩文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[21:11:01] Starting &apos;script&apos;...</div><div class="line">[21:11:01] Finished &apos;script&apos; after 2.85 ms</div></pre></td></tr></table></figure>
<p>至此，我们完成了 gulp 压缩 js 文件的自动化代码编写。</p>
<p><strong>注意：</strong>使用 <code>gulp.watch</code> 后你的命令行会进入“运行”状态，此时你不可以在命令行进行其他操作。可通过 <code>Ctrl + C</code> 停止 gulp。</p>
<blockquote>
<p>Mac 下使用 <code>control + C</code> 停止 gulp</p>
</blockquote>
<h3 id="3-10-使用-gulp-task-‘default’-fn-定义默认任务"><a href="#3-10-使用-gulp-task-‘default’-fn-定义默认任务" class="headerlink" title="3.10 使用 gulp.task(‘default’, fn) 定义默认任务"></a>3.10 使用 gulp.task(‘default’, fn) 定义默认任务</h3><hr>
<p>增加如下代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'script'</span>, <span class="string">'auto'</span>]);</div></pre></td></tr></table></figure>
<p>此时你可以在命令行直接输入 <code>gulp</code> +回车，运行 <code>script</code> 和 <code>auto</code> 任务。</p>
<p>最终代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 获取 uglify 模块（用于压缩 JS）</span></div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 压缩 js 文件</span></div><div class="line"><span class="comment">// 在命令行使用 gulp script 启动此任务</span></div><div class="line">gulp.task(<span class="string">'script'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 1. 找到文件</span></div><div class="line">    gulp.src(<span class="string">'js/*.js'</span>)</div><div class="line">    <span class="comment">// 2. 压缩文件</span></div><div class="line">        .pipe(uglify())</div><div class="line">    <span class="comment">// 3. 另存压缩后的文件</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/js'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 在命令行使用 gulp auto 启动此任务</span></div><div class="line">gulp.task(<span class="string">'auto'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 监听文件修改，当文件被修改则执行 script 任务</span></div><div class="line">    gulp.watch(<span class="string">'js/*.js'</span>, [<span class="string">'script'</span>])</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 使用 gulp.task('default') 定义默认任务</span></div><div class="line"><span class="comment">// 在命令行使用 gulp 启动 script 任务和 auto 任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'script'</span>, <span class="string">'auto'</span>])</div></pre></td></tr></table></figure>
<p>去除注释后，你会发现只需要 11 行代码就可以让 gulp 自动监听 js 文件的修改后压缩代码。但是还有还有一些性能问题和缺少容错性，将在后面的章节详细说明。</p>
<p>你可以访问 <a href="https://github.com/terinjokes/gulp-uglify" target="_blank" rel="external">gulp-uglify</a> 以查看更多用法。</p>
<h2 id="四、使用-gulp-压缩-CSS"><a href="#四、使用-gulp-压缩-CSS" class="headerlink" title="四、使用 gulp 压缩 CSS"></a>四、使用 gulp 压缩 CSS</h2><hr>
<p>压缩 css 代码可降低 css 文件大小，提高页面打开速度。</p>
<p>我们接着将规律转换为 gulp 代码</p>
<ul>
<li><strong>规律</strong></li>
</ul>
<p>找到 <code>css/</code> 目录下的所有 css 文件，压缩它们，将压缩后的文件存放在 <code>dist/css/</code> 目录下。</p>
<h3 id="4-1-安装-gulp-minify-css模块"><a href="#4-1-安装-gulp-minify-css模块" class="headerlink" title="4.1 安装 gulp-minify-css模块"></a>4.1 安装 gulp-minify-css模块</h3><hr>
<p>提示：你需要使用命令行的 <code>cd</code> 切换到对应目录后进行安装操作。</p>
<p>在命令行输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-minify-css</div></pre></td></tr></table></figure>
<p>安装成功后你会看到如下信息：(安装时间可能会比较长)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gulp-minify-css@1.0.0 node_modules/gulp-minify-css</div><div class="line">├── object-assign@2.0.0</div><div class="line">├── vinyl-sourcemaps-apply@0.1.4 (source-map@0.1.43)</div><div class="line">├── clean-css@3.1.8 (commander@2.6.0, source-map@0.1.43)</div><div class="line">├── through2@0.6.3 (xtend@4.0.0, readable-stream@1.0.33)</div><div class="line">├── vinyl-bufferstream@1.0.1 (bufferstreams@1.0.1)</div><div class="line">└── gulp-util@3.0.4 (array-differ@1.0.0, beeper@1.0.0, array-uniq@1.0.2, lodash._reescape@3.0.0, lodash._reinterpolate@3.0.0, lodash._reevaluate@3.0.0, replace-ext@0.0.1, minimist@1.1.1, multipipe@0.1.2, vinyl@0.4.6, chalk@1.0.0, lodash.template@3.3.2, dateformat@1.0.11)</div></pre></td></tr></table></figure>
<h3 id="4-2-参照-使用-gulp-压缩-JS-创建-gulpfile-js-文件编写代码"><a href="#4-2-参照-使用-gulp-压缩-JS-创建-gulpfile-js-文件编写代码" class="headerlink" title="4.2 参照 [使用 gulp 压缩 JS]创建 gulpfile.js 文件编写代码"></a>4.2 参照 [使用 gulp 压缩 JS]创建 <code>gulpfile.js</code> 文件编写代码</h3><hr>
<p>在对应目录创建 <code>gulpfile.js</code> 文件并写入如下内容：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 获取 minify-css 模块（用于压缩 CSS）</span></div><div class="line"><span class="keyword">var</span> minifyCSS = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 压缩 css 文件</span></div><div class="line"><span class="comment">// 在命令行使用 gulp css 启动此任务</span></div><div class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 1. 找到文件</span></div><div class="line">    gulp.src(<span class="string">'css/*.css'</span>)</div><div class="line">    <span class="comment">// 2. 压缩文件</span></div><div class="line">        .pipe(minifyCSS())</div><div class="line">    <span class="comment">// 3. 另存为压缩文件</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/css'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 在命令行使用 gulp auto 启动此任务</span></div><div class="line">gulp.task(<span class="string">'auto'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 监听文件修改，当文件被修改则执行 css 任务</span></div><div class="line">    gulp.watch(<span class="string">'css/*.css'</span>, [<span class="string">'css'</span>])</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 使用 gulp.task('default') 定义默认任务</span></div><div class="line"><span class="comment">// 在命令行使用 gulp 启动 css 任务和 auto 任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'css'</span>, <span class="string">'auto'</span>])</div></pre></td></tr></table></figure>
<p>你可以访问 <a href="https://github.com/jonathanepollack/gulp-minify-css" target="_blank" rel="external">gulp-minify-css</a> 以查看更多用法。</p>
<hr>
<h3 id="4-3-创建-css-文件"><a href="#4-3-创建-css-文件" class="headerlink" title="4.3 创建 css 文件"></a>4.3 创建 css 文件</h3><hr>
<p>在 <code>gulpfile.js</code> 对应目录创建 <code>css</code> 文件夹，并在 <code>css/</code> 目录下创建 <code>a.css</code> 文件。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* a.css */</span></div><div class="line"><span class="selector-tag">body</span> <span class="selector-tag">a</span>&#123;</div><div class="line">    <span class="attribute">color</span>:pink;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="4-4-运行-gulp-查看效果"><a href="#4-4-运行-gulp-查看效果" class="headerlink" title="4.4 运行 gulp 查看效果"></a>4.4 运行 gulp 查看效果</h3><hr>
<p>在命令行输入 <code>gulp</code> +回车</p>
<p>你将看到命令行出现如下提示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">gulp</div><div class="line">[17:01:19] Using gulpfile ~/Documents/code/gulp-book/demo/chapter3/gulpfile.js</div><div class="line">[17:01:19] Starting &apos;css&apos;...</div><div class="line">[17:01:19] Finished &apos;css&apos; after 6.21 ms</div><div class="line">[17:01:19] Starting &apos;auto&apos;...</div><div class="line">[17:01:19] Finished &apos;auto&apos; after 5.42 ms</div><div class="line">[17:01:19] Starting &apos;default&apos;...</div><div class="line">[17:01:19] Finished &apos;default&apos; after 5.71 μs</div></pre></td></tr></table></figure>
<p>gulp 会创建 <code>dist/css</code> 目录，并创建 <code>a.css</code> 文件，此文件存放压缩后的 css 代码。<br><a href="https://github.com/nimojs/gulp-book/blob/master/demo/chapter3/dist/css/a.css" target="_blank" rel="external">dist/css/a.css</a></p>
<h2 id="五、使用-gulp-压缩图片"><a href="#五、使用-gulp-压缩图片" class="headerlink" title="五、使用 gulp 压缩图片"></a>五、使用 gulp 压缩图片</h2><hr>
<p>压缩 图片文件可降低文件大小，提高图片加载速度。</p>
<p>找到规律转换为 gulp 代码</p>
<ul>
<li><strong>规律</strong></li>
</ul>
<p>找到 <code>images/</code> 目录下的所有文件，压缩它们，将压缩后的文件存放在 <code>dist/images/</code> 目录下。</p>
<h3 id="5-1-安装-gulp-imagemin-模块"><a href="#5-1-安装-gulp-imagemin-模块" class="headerlink" title="5.1 安装 gulp-imagemin 模块"></a>5.1 安装 gulp-imagemin 模块</h3><hr>
<p>提示：你需要使用命令行的 <code>cd</code> 切换至对应目录再进行安装操作和 gulp 启动操作。</p>
<p>在命令行输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-imagemin</div></pre></td></tr></table></figure>
<p>安装成功后你会看到如下信息：(安装时间可能会比较长)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gulp-imagemin@2.2.1 node_modules/gulp-imagemin</div><div class="line">├── object-assign@2.0.0</div><div class="line">├── pretty-bytes@1.0.3 (get-stdin@4.0.1)</div><div class="line">├── chalk@1.0.0 (escape-string-regexp@1.0.3, ansi-styles@2.0.1, supports-color@1.3.1, has-ansi@1.0.3, strip-ansi@2.0.1)</div><div class="line">├── through2-concurrent@0.3.1 (through2@0.6.3)</div><div class="line">├── gulp-util@3.0.4 (array-differ@1.0.0, beeper@1.0.0, array-uniq@1.0.2, lodash._reevaluate@3.0.0, lodash._reescape@3.0.0, lodash._reinterpolate@3.0.0, replace-ext@0.0.1, minimist@1.1.1, vinyl@0.4.6, through2@0.6.3, multipipe@0.1.2, lodash.template@3.3.2, dateformat@1.0.11)</div><div class="line">└── imagemin@3.1.0 (get-stdin@3.0.2, optional@0.1.3, vinyl@0.4.6, through2@0.6.3, stream-combiner@0.2.1, concat-stream@1.4.7, meow@2.1.0, vinyl-fs@0.3.13, imagemin-svgo@4.1.2, imagemin-optipng@4.2.0, imagemin-jpegtran@4.1.0, imagemin-pngquant@4.0.0, imagemin-gifsicle@4.1.0)</div></pre></td></tr></table></figure>
<h3 id="5-2-创建-gulpfile-js-文件编写代码"><a href="#5-2-创建-gulpfile-js-文件编写代码" class="headerlink" title="5.2 创建 gulpfile.js 文件编写代码"></a>5.2 创建 <code>gulpfile.js</code> 文件编写代码</h3><hr>
<p>在对应目录创建 <code>gulpfile.js</code> 文件并写入如下内容：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 获取 gulp-imagemin 模块</span></div><div class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 压缩图片任务</span></div><div class="line"><span class="comment">// 在命令行输入 gulp images 启动此任务</span></div><div class="line">gulp.task(<span class="string">'images'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 1. 找到图片</span></div><div class="line">    gulp.src(<span class="string">'images/*.*'</span>)</div><div class="line">    <span class="comment">// 2. 压缩图片</span></div><div class="line">        .pipe(imagemin(&#123;</div><div class="line">            <span class="attr">progressive</span>: <span class="literal">true</span></div><div class="line">        &#125;))</div><div class="line">    <span class="comment">// 3. 另存图片</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/images'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 在命令行使用 gulp auto 启动此任务</span></div><div class="line">gulp.task(<span class="string">'auto'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 监听文件修改，当文件被修改则执行 images 任务</span></div><div class="line">    gulp.watch(<span class="string">'images/*.*)'</span>, [<span class="string">'images'</span>])</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 使用 gulp.task('default') 定义默认任务</span></div><div class="line"><span class="comment">// 在命令行使用 gulp 启动 images 任务和 auto 任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'images'</span>, <span class="string">'auto'</span>])</div></pre></td></tr></table></figure>
<p>你可以访问 <a href="https://github.com/sindresorhus/gulp-imagemin" target="_blank" rel="external">gulp-imagemin</a> 以查看更多用法。</p>
<hr>
<h3 id="5-3-在-images-目录下存放图片"><a href="#5-3-在-images-目录下存放图片" class="headerlink" title="5.3 在 images/ 目录下存放图片"></a>5.3 在 <code>images/</code> 目录下存放图片</h3><hr>
<p>在 <code>gulpfile.js</code> 对应目录创建 <code>images</code> 文件夹，并在 <code>images/</code> 目录下存放图片。</p>
<h3 id="5-4-运行-gulp-查看效果"><a href="#5-4-运行-gulp-查看效果" class="headerlink" title="5.4 运行 gulp 查看效果"></a>5.4 运行 gulp 查看效果</h3><hr>
<p>在命令行输入 <code>gulp</code> +回车</p>
<p>你将看到命令行出现如下提示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">gulp</div><div class="line">[18:10:42] Using gulpfile ~/Documents/code/gulp-book/demo/chapter4/gulpfile.js</div><div class="line">[18:10:42] Starting &apos;images&apos;...</div><div class="line">[18:10:42] Finished &apos;images&apos; after 5.72 ms</div><div class="line">[18:10:42] Starting &apos;auto&apos;...</div><div class="line">[18:10:42] Finished &apos;auto&apos; after 6.39 ms</div><div class="line">[18:10:42] Starting &apos;default&apos;...</div><div class="line">[18:10:42] Finished &apos;default&apos; after 5.91 μs</div><div class="line">[18:10:42] gulp-imagemin: Minified 3 images (saved 25.83 kB - 5.2%)</div></pre></td></tr></table></figure>
<h2 id="使用-gulp-编译-LESS"><a href="#使用-gulp-编译-LESS" class="headerlink" title="使用 gulp 编译 LESS"></a>使用 gulp 编译 LESS</h2><blockquote>
<p>Less 是一门 CSS 预处理语言，它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护。</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-less</div></pre></td></tr></table></figure>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"><span class="comment">// 获取 gulp-less 模块</span></div><div class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 编译less</span></div><div class="line"><span class="comment">// 在命令行输入 gulp less 启动此任务</span></div><div class="line">gulp.task(<span class="string">'less'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 1. 找到 less 文件</span></div><div class="line">    gulp.src(<span class="string">'less/**.less'</span>)</div><div class="line">    <span class="comment">// 2. 编译为css</span></div><div class="line">        .pipe(less())</div><div class="line">    <span class="comment">// 3. 另存文件</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/css'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 在命令行使用 gulp auto 启动此任务</span></div><div class="line">gulp.task(<span class="string">'auto'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 监听文件修改，当文件被修改则执行 less 任务</span></div><div class="line">    gulp.watch(<span class="string">'less/**.less'</span>, [<span class="string">'less'</span>])</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 使用 gulp.task('default') 定义默认任务</span></div><div class="line"><span class="comment">// 在命令行使用 gulp 启动 less 任务和 auto 任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'less'</span>, <span class="string">'auto'</span>])</div></pre></td></tr></table></figure>
<p>你可以访问 <a href="https://github.com/plus3network/gulp-less" target="_blank" rel="external">gulp-less</a> 以查看更多用法。</p>
<h2 id="LESS-代码和编译后的CSS代码"><a href="#LESS-代码和编译后的CSS代码" class="headerlink" title="LESS 代码和编译后的CSS代码"></a>LESS 代码和编译后的CSS代码</h2><p><a href="https://github.com/nimojs/gulp-book/tree/master/demo/chapter5/less/a.less" target="_blank" rel="external">less/a.less</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.less&#123;</div><div class="line">	a&#123;</div><div class="line">        color:pink;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/nimojs/gulp-book/tree/master/demo/chapter5/less/import.less" target="_blank" rel="external">less/import.less</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@import "a.less";</div><div class="line">.import&#123;</div><div class="line">	a&#123;</div><div class="line">		color:red;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/nimojs/gulp-book/tree/master/demo/chapter5/dist/css/a.css" target="_blank" rel="external">less/a.css</a></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.less</span> <span class="selector-tag">a</span> &#123;</div><div class="line">  <span class="attribute">color</span>: pink;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/nimojs/gulp-book/tree/master/demo/chapter5/dist/css/import.css" target="_blank" rel="external">less/import.css</a></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.less</span> <span class="selector-tag">a</span> &#123;</div><div class="line">  <span class="attribute">color</span>: pink;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.import</span> <span class="selector-tag">a</span>&#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="六、使用-gulp-编译-Sass"><a href="#六、使用-gulp-编译-Sass" class="headerlink" title="六、使用 gulp 编译 Sass"></a>六、使用 gulp 编译 Sass</h2><hr>
<blockquote>
<p>无论是 <code>node-sass</code> 还是 <code>ruby-sass</code> 使用 npm 安装都非常的慢，甚至会装不上。及其不利于团队协作。建议使用 less 作为 css 预处理器。<br>如果因为 less 不支持自定义函数选择用 sass 可以使用 <a href="https://github.com/seven-phases-max/less-plugin-functions" target="_blank" rel="external">less-plugin-functions</a> 让 less 支持自定义函数。</p>
</blockquote>
<h3 id="6-1-gulp-sass"><a href="#6-1-gulp-sass" class="headerlink" title="6.1 gulp-sass"></a>6.1 gulp-sass</h3><hr>
<p>本章使用的是 ruby-sass 如果你不方便安装 ruby 或编译速度慢，建议使用 <a href="https://github.com/dlmanning/gulp-sass" target="_blank" rel="external">gulp-sass</a></p>
<blockquote>
<p>Sass 是一种 CSS 的开发工具，提供了许多便利的写法，大大节省了开发者的时间，使得 CSS 的开发，变得简单和可维护。</p>
</blockquote>
<p>本章使用 <code>ruby-sass</code> 编译 css,若你没有安装 ruby 和 sass 请移步 <a href="https://github.com/nimojs/blog/issues/14" target="_blank" rel="external">使用ruby.taobao安装 Sass</a></p>
<h3 id="6-2-安装"><a href="#6-2-安装" class="headerlink" title="6.2 安装"></a>6.2 安装</h3><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-ruby-sass</div></pre></td></tr></table></figure>
<h3 id="6-3-基本用法"><a href="#6-3-基本用法" class="headerlink" title="6.3 基本用法"></a>6.3 基本用法</h3><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"><span class="comment">// 获取 gulp-ruby-sass 模块</span></div><div class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-ruby-sass'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 编译sass</span></div><div class="line"><span class="comment">// 在命令行输入 gulp sass 启动此任务</span></div><div class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> sass(<span class="string">'sass/'</span>) </div><div class="line">    .on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.error(<span class="string">'Error!'</span>, err.message);</div><div class="line">   &#125;)</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/css'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 在命令行使用 gulp auto 启动此任务</span></div><div class="line">gulp.task(<span class="string">'auto'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 监听文件修改，当文件被修改则执行 images 任务</span></div><div class="line">    gulp.watch(<span class="string">'sass/**/*.scss'</span>, [<span class="string">'sass'</span>])</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 使用 gulp.task('default') 定义默认任务</span></div><div class="line"><span class="comment">// 在命令行使用 gulp 启动 sass 任务和 auto 任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'sass'</span>, <span class="string">'auto'</span>])</div></pre></td></tr></table></figure>
<p>Sass 代码和编译后的 CSS 代码</p>
<p><a href="https://github.com/nimojs/gulp-book/tree/master/demo/chapter6/sass/a.scss" target="_blank" rel="external">sass/a.scss</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.sass&#123;</div><div class="line">	a&#123;</div><div class="line">        color:pink;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/nimojs/gulp-book/tree/master/demo/chapter6/sass/import.scss" target="_blank" rel="external">sass/import.scss</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@import "a.scss";</div><div class="line">.import&#123;</div><div class="line">	a&#123;</div><div class="line">		color:red;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/nimojs/gulp-book/tree/master/demo/chapter6/dist/css/a.css" target="_blank" rel="external">sass/a.css</a></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.sass</span> <span class="selector-tag">a</span> &#123;</div><div class="line">  <span class="attribute">color</span>: pink;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/nimojs/gulp-book/tree/master/demo/chapter6/dist/css/import.css" target="_blank" rel="external">sass/import.css</a></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.sass</span> <span class="selector-tag">a</span> &#123;</div><div class="line">  <span class="attribute">color</span>: pink;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.import</span> <span class="selector-tag">a</span>&#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="七、使用-gulp-构建一个项目"><a href="#七、使用-gulp-构建一个项目" class="headerlink" title="七、使用 gulp 构建一个项目"></a>七、使用 gulp 构建一个项目</h2><hr>
<p>本章将介绍</p>
<ul>
<li><a href="https://github.com/nimojs/gulp-watch-path" target="_blank" rel="external">gulp-watch-path</a></li>
<li><a href="https://github.com/gulpjs/gulp/blob/master/docs/recipes/combining-streams-to-handle-errors.md" target="_blank" rel="external">stream-combiner2</a></li>
<li><a href="https://github.com/floridoo/gulp-sourcemaps" target="_blank" rel="external">gulp-sourcemaps</a></li>
<li><a href="https://github.com/sindresorhus/gulp-autoprefixer/blob/master/package.json" target="_blank" rel="external">gulp-autoprefixer</a></li>
</ul>
<p>并将之前所有章节的内容组合起来编写一个前端项目所需的 gulp 代码。</p>
<p>若你不了解npm 请务必阅读 <a href="http://javascript.ruanyifeng.com/nodejs/npm.html" target="_blank" rel="external">npm模块管理器</a></p>
<h3 id="7-1-package-json"><a href="#7-1-package-json" class="headerlink" title="7.1 package.json"></a>7.1 package.json</h3><hr>
<p>如果你熟悉 npm 则可以利用 <code>package.json</code> 保存所有 <code>npm install --save-dev gulp-xxx</code> 模块依赖和模块版本。</p>
<p>在命令行输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure>
<p>会依次要求补全项目信息，不清楚的可以直接回车跳过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">name: (gulp-demo) </div><div class="line">version: (1.0.0) </div><div class="line">description: </div><div class="line">entry point: (index.js) </div><div class="line">test command: </div><div class="line">...</div><div class="line">...</div><div class="line">Is this ok? (yes)</div></pre></td></tr></table></figure></p>
<p>最终会在当前目录中创建 <code>package.json</code> 文件并生成类似如下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"gulp-demo"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"0.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"repository"</span>: &#123;</div><div class="line">    <span class="string">"type"</span>: <span class="string">"git"</span>,</div><div class="line">    <span class="string">"url"</span>: <span class="string">"https://github.com/nimojs/gulp-demo.git"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"keywords"</span>: [</div><div class="line">    <span class="string">"gulp"</span>,</div><div class="line">  ],</div><div class="line">  <span class="string">"author"</span>: <span class="string">"nimojs &lt;nimo.jser@gmail.com&gt;"</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"MIT"</span>,</div><div class="line">  <span class="string">"bugs"</span>: &#123;</div><div class="line">    <span class="string">"url"</span>: <span class="string">"https://github.com/nimojs/gulp-demo/issues"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"homepage"</span>: <span class="string">"https://github.com/nimojs/gulp-demo"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="7-2-安装依赖"><a href="#7-2-安装依赖" class="headerlink" title="7.2 安装依赖"></a>7.2 安装依赖</h3><hr>
<p>安装 gulp 到项目（防止全局 gulp 升级后与此项目 <code>gulpfile.js</code> 代码不兼容）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp --save-dev</div></pre></td></tr></table></figure></p>
<p>此时打开 <code>package.json</code> 会发现多了如下代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"devDependencies"</span>: &#123;</div><div class="line">	<span class="string">"gulp"</span>: <span class="string">"^3.8.11"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>声明此项目的开发依赖 gulp</p>
<p>接着安装其他依赖：</p>
<blockquote>
<p>安装模块较多，请耐心等待，若一直安装失败可使用<a href="http://npm.taobao.org/" target="_blank" rel="external">npm.taobao.org</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-uglify gulp-watch-path stream-combiner2 gulp-sourcemaps gulp-minify-css gulp-autoprefixer gulp-less gulp-ruby-sass gulp-imagemin gulp-util --save-dev</div></pre></td></tr></table></figure>
<p>此时，<a href="https://github.com/nimojs/gulp-demo/blob/master/package.json" target="_blank" rel="external">package.json</a> 将会更新<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"colors"</span>: <span class="string">"^1.0.3"</span>,</div><div class="line">    <span class="string">"gulp"</span>: <span class="string">"^3.8.11"</span>,</div><div class="line">    <span class="string">"gulp-autoprefixer"</span>: <span class="string">"^2.1.0"</span>,</div><div class="line">    <span class="string">"gulp-imagemin"</span>: <span class="string">"^2.2.1"</span>,</div><div class="line">    <span class="string">"gulp-less"</span>: <span class="string">"^3.0.2"</span>,</div><div class="line">    <span class="string">"gulp-minify-css"</span>: <span class="string">"^1.0.0"</span>,</div><div class="line">    <span class="string">"gulp-ruby-sass"</span>: <span class="string">"^1.0.1"</span>,</div><div class="line">    <span class="string">"gulp-sourcemaps"</span>: <span class="string">"^1.5.1"</span>,</div><div class="line">    <span class="string">"gulp-uglify"</span>: <span class="string">"^1.1.0"</span>,</div><div class="line">    <span class="string">"gulp-watch-path"</span>: <span class="string">"^0.0.7"</span>,</div><div class="line">    <span class="string">"stream-combiner2"</span>: <span class="string">"^1.0.2"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当你将这份 gulpfile.js 配置分享给你的朋友时，就不需要将 <code>node_modules/</code> 发送给他，他只需在命令行输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure></p>
<p>就可以检测 <code>package.json</code> 中的 <code>devDependencies</code> 并安装所有依赖。</p>
<h3 id="7-3-设计目录结构"><a href="#7-3-设计目录结构" class="headerlink" title="7.3 设计目录结构"></a>7.3 设计目录结构</h3><hr>
<p>我们将文件分为2类，一类是源码，一类是编译压缩后的版本。文件夹分别为 <code>src</code> 和 <code>dist</code>。(注意区分 <code>dist</code> 和 ·<code>dest</code> 的区别)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">└── src/</div><div class="line">│</div><div class="line">└── dist/</div></pre></td></tr></table></figure>
<p><code>dist/</code> 目录下的文件都是根据 <code>src/</code> 下所有源码文件构建而成。</p>
<p>在 <code>src/</code> 下创建前端资源对应的的文件夹</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">└── src/</div><div class="line">	├── less/    *.less 文件</div><div class="line">	├── sass/    *.scss *.sass 文件</div><div class="line">	├── css/     *.css  文件</div><div class="line">	├── js/      *.js 文件</div><div class="line">	├── fonts/   字体文件</div><div class="line">    └── images/   图片</div><div class="line">└── dist/</div></pre></td></tr></table></figure>
<h3 id="7-4-让命令行输出的文字带颜色"><a href="#7-4-让命令行输出的文字带颜色" class="headerlink" title="7.4 让命令行输出的文字带颜色"></a>7.4 让命令行输出的文字带颜色</h3><hr>
<p>gulp 自带的输出都带时间和颜色，这样很容易识别。我们利用 <a href="https://github.com/gulpjs/gulp-util" target="_blank" rel="external">gulp-util</a> 实现同样的效果。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"><span class="keyword">var</span> gutil = <span class="built_in">require</span>(<span class="string">'gulp-util'</span>)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gutil.log(<span class="string">'message'</span>)</div><div class="line">    gutil.log(gutil.colors.red(<span class="string">'error'</span>))</div><div class="line">    gutil.log(gutil.colors.green(<span class="string">'message:'</span>) + <span class="string">"some"</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>使用 <code>gulp</code> 启动默认任务以测试<br><img src="https://cloud.githubusercontent.com/assets/3949015/7137629/a1def1b8-e2ed-11e4-83e0-5a6adb22de6f.png" alt="gulp-util"></p>
<h3 id="7-5-配置-JS-任务"><a href="#7-5-配置-JS-任务" class="headerlink" title="7.5 配置 JS 任务"></a>7.5 配置 JS 任务</h3><h4 id="7-5-1-gulp-uglify"><a href="#7-5-1-gulp-uglify" class="headerlink" title="7.5.1 gulp-uglify"></a>7.5.1 gulp-uglify</h4><p>检测<code>src/js/</code>目录下的 js 文件修改后，压缩 <code>js/</code> 中所有 js 文件并输出到 <code>dist/js/</code> 中</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'uglifyjs'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/js/**/*.js'</span>)</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/js'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/js/**/*.js'</span>, [<span class="string">'uglifyjs'</span>])</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><code>src/js/**/*.js</code> 是 glob 语法。<a href="http://baike.baidu.com/view/4019153.htm" target="_blank" rel="external">百度百科：glob模式</a> 、<a href="https://github.com/isaacs/node-glob" target="_blank" rel="external">node-glob</a></p>
<p>在命令行输入 <code>gulp</code> 后会出现如下消息，表示已经启动。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="number">20</span><span class="symbol">:</span><span class="number">39</span><span class="symbol">:</span><span class="number">50</span>] Using gulpfile ~<span class="regexp">/Documents/code</span><span class="regexp">/gulp-book/demo</span><span class="regexp">/chapter7/gulpfile</span>.js</div><div class="line">[<span class="number">20</span><span class="symbol">:</span><span class="number">39</span><span class="symbol">:</span><span class="number">50</span>] Starting <span class="string">'default'</span>...</div><div class="line">[<span class="number">20</span><span class="symbol">:</span><span class="number">39</span><span class="symbol">:</span><span class="number">50</span>] Finished <span class="string">'default'</span> after <span class="number">13</span> ms</div></pre></td></tr></table></figure></p>
<p>此时编辑 <a href="https://github.com/nimojs/gulp-demo/blob/master/src/js/log.js" target="_blank" rel="external">src/js/log.js</a> 文件并保存，命令行会出现如下消息，表示检测到 <code>src/js/**/*.js</code> 文件修改后重新编译所有 js。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="number">20</span><span class="symbol">:</span><span class="number">39</span><span class="symbol">:</span><span class="number">52</span>] Starting <span class="string">'js'</span>...</div><div class="line">[<span class="number">20</span><span class="symbol">:</span><span class="number">39</span><span class="symbol">:</span><span class="number">52</span>] Finished <span class="string">'js'</span> after <span class="number">14</span> ms</div></pre></td></tr></table></figure>
<h4 id="7-5-2gulp-watch-path"><a href="#7-5-2gulp-watch-path" class="headerlink" title="7.5.2gulp-watch-path"></a>7.5.2gulp-watch-path</h4><hr>
<p>此配置有个性能问题，当 <code>gulp.watch</code> 检测到  <code>src/js/</code> 目录下的js文件有修改时会将所有文件全部编译。实际上我们只需要重新编译被修改的文件。</p>
<p>简单介绍 <code>gulp.watch</code> 第二个参数为 <code>function</code> 时的用法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">gulp.watch(<span class="string">'src/js/**/*.js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(event);</div><div class="line">    <span class="comment">/*</span></div><div class="line">	当修改 src/js/log.js 文件时</div><div class="line">    event &#123;</div><div class="line">		// 发生改变的类型，不管是添加，改变或是删除</div><div class="line">        type: 'changed', </div><div class="line">		// 触发事件的文件路径</div><div class="line">        path: '/Users/nimojs/Documents/code/gulp-book/demo/chapter7/src/js/log.js'</div><div class="line">    &#125;</div><div class="line">    */</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>我们可以利用 <code>event</code> 给到的信息，检测到某个 js 文件被修改时，只编写当前修改的 js 文件。</p>
<p>可以利用 <code>gulp-watch-path</code> 配合 <code>event</code> 获取编译路径和输出路径。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> watchPath = <span class="built_in">require</span>(<span class="string">'gulp-watch-path'</span>)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watchjs'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/js/**/*.js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event, <span class="string">'src/'</span>, <span class="string">'dist/'</span>)</div><div class="line">        <span class="comment">/*</span></div><div class="line">        paths</div><div class="line">            &#123; srcPath: 'src/js/log.js',</div><div class="line">              srcDir: 'src/js/',</div><div class="line">              distPath: 'dist/js/log.js',</div><div class="line">              distDir: 'dist/js/',</div><div class="line">              srcFilename: 'log.js',</div><div class="line">              distFilename: 'log.js' &#125;</div><div class="line">        */</div><div class="line">		gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line"></div><div class="line">        gulp.src(paths.srcPath)</div><div class="line">            .pipe(uglify())</div><div class="line">            .pipe(gulp.dest(paths.distDir))</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'watchjs'</span>])</div></pre></td></tr></table></figure>
<p><a href="https://github.com/nimojs/gulp-book/tree/master/demo/chapter7/use-gulp-watch-path.js" target="_blank" rel="external">use-gulp-watch-path 完整代码</a></p>
<h4 id="7-5-3-watchPath-event-search-replace-distExt"><a href="#7-5-3-watchPath-event-search-replace-distExt" class="headerlink" title="7.5.3 watchPath(event, search, replace, distExt)"></a>7.5.3 watchPath(event, search, replace, distExt)</h4><hr>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>event</td>
<td><code>gulp.watch</code> 回调函数的 <code>event</code></td>
</tr>
<tr>
<td>search</td>
<td>需要被替换的起始字符串</td>
</tr>
<tr>
<td>replace</td>
<td>第三个参数是新的的字符串</td>
</tr>
<tr>
<td>distExt</td>
<td>扩展名(非必填)</td>
</tr>
</tbody>
</table>
<p>此时编辑 <a href="https://github.com/nimojs/gulp-demo/blob/master/src/js/log.js" target="_blank" rel="external">src/js/log.js</a> 文件并保存，命令行会出现消息，表示检测到 <code>src/js/log.js</code> 文件修改后只重新编译 <code>log.js</code>。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="number">21</span><span class="symbol">:</span><span class="number">47</span><span class="symbol">:</span><span class="number">25</span>] changed src/js/log.js</div><div class="line">[<span class="number">21</span><span class="symbol">:</span><span class="number">47</span><span class="symbol">:</span><span class="number">25</span>] Dist dist/js/log.js</div></pre></td></tr></table></figure>
<p>你可以访问 <a href="https://github.com/nimojs/gulp-watch-path" target="_blank" rel="external">gulp-watch-path</a> 了解更多。</p>
<h4 id="7-5-4-stream-combiner2"><a href="#7-5-4-stream-combiner2" class="headerlink" title="7.5.4 stream-combiner2"></a>7.5.4 stream-combiner2</h4><hr>
<p>编辑 <code>log.js</code> 文件时，如果文件中有 js 语法错误时，gulp 会终止运行并报错。</p>
<p>当 log.js 缺少 <code>)</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">log(<span class="string">'gulp-book'</span></div></pre></td></tr></table></figure></p>
<p>并保存文件时出现如下错误，但是错误信息不全面。而且还会让 gulp 停止运行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">events.js:85</div><div class="line">      throw er; // Unhandled &apos;error&apos; event</div><div class="line">            ^</div><div class="line">Error</div><div class="line">    at new JS_Parse_Error (/Users/nimojs/Documents/code/gulp-book/demo/chapter7/node_modules/gulp-uglify/node_modules/uglify-js/lib/parse.js:189:18)</div><div class="line">...</div><div class="line">...</div><div class="line">js_error (/Users/nimojs/Documents/code/gulp-book/demo/chapter7/node_modules/gulp-</div><div class="line">-book/demo/chapter7/node_modules/gulp-uglify/node_modules/uglify-js/lib/parse.js:1165:20)</div><div class="line">    at maybe_unary (/Users/nimojs/Documents/code/gulp-book/demo/chapter7/node_modules/gulp-uglify/node_modules/uglify-js/lib/parse.js:1328:19)</div></pre></td></tr></table></figure>
<p>应对这种情况，我们可以使用 <a href="https://github.com/gulpjs/gulp/blob/master/docs/recipes/combining-streams-to-handle-errors.md" target="_blank" rel="external">Combining streams to handle errors</a> 文档中推荐的 <a href="https://github.com/substack/stream-combiner2" target="_blank" rel="external">stream-combiner2</a>  捕获错误信息。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> handleError = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> colors = gutil.colors;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'\n'</span>)</div><div class="line">    gutil.log(colors.red(<span class="string">'Error!'</span>))</div><div class="line">    gutil.log(<span class="string">'fileName: '</span> + colors.red(err.fileName))</div><div class="line">    gutil.log(<span class="string">'lineNumber: '</span> + colors.red(err.lineNumber))</div><div class="line">    gutil.log(<span class="string">'message: '</span> + err.message)</div><div class="line">    gutil.log(<span class="string">'plugin: '</span> + colors.yellow(err.plugin))</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> combiner = <span class="built_in">require</span>(<span class="string">'stream-combiner2'</span>)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watchjs'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/js/**/*.js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event, <span class="string">'src/'</span>, <span class="string">'dist/'</span>)</div><div class="line">        <span class="comment">/*</span></div><div class="line">        paths</div><div class="line">            &#123; srcPath: 'src/js/log.js',</div><div class="line">              srcDir: 'src/js/',</div><div class="line">              distPath: 'dist/js/log.js',</div><div class="line">              distDir: 'dist/js/',</div><div class="line">              srcFilename: 'log.js',</div><div class="line">              distFilename: 'log.js' &#125;</div><div class="line">        */</div><div class="line">        gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line"></div><div class="line">        <span class="keyword">var</span> combined = combiner.obj([</div><div class="line">            gulp.src(paths.srcPath),</div><div class="line">            uglify(),</div><div class="line">            gulp.dest(paths.distDir)</div><div class="line">        ])</div><div class="line"></div><div class="line">        combined.on(<span class="string">'error'</span>, handleError)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>此时当编译错误的语法时，命令行会出现错误提示。而且不会让 gulp 停止运行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">changed:src/js/log.js</div><div class="line">dist:dist/js/log.js</div><div class="line">--------------</div><div class="line">Error!</div><div class="line">fileName: /Users/nimojs/Documents/code/gulp-book/demo/chapter7/src/js/log.js</div><div class="line">lineNumber: 7</div><div class="line">message: /Users/nimojs/Documents/code/gulp-book/demo/chapter7/src/js/log.js: Unexpected token eof «undefined», expected punc «,»</div><div class="line">plugin: gulp-uglify</div></pre></td></tr></table></figure>
<h4 id="7-5-5-gulp-sourcemaps"><a href="#7-5-5-gulp-sourcemaps" class="headerlink" title="7.5.5 gulp-sourcemaps"></a>7.5.5 gulp-sourcemaps</h4><hr>
<p>JS 压缩前和压缩后比较<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 压缩前</span></div><div class="line"><span class="keyword">var</span> log = <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'--------'</span>);</div><div class="line">    <span class="built_in">console</span>.log(msg)</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'--------'</span>);</div><div class="line">&#125;</div><div class="line">log(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;)</div><div class="line">log(<span class="string">'gulp-book'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 压缩后</span></div><div class="line"><span class="keyword">var</span> log=<span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"--------"</span>),<span class="built_in">console</span>.log(o),<span class="built_in">console</span>.log(<span class="string">"--------"</span>)&#125;;log(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;),log(<span class="string">"gulp-book"</span>);</div></pre></td></tr></table></figure></p>
<p>压缩后的代码不存在换行符和空白符，导致出错后很难调试，好在我们可以使用 <a href="http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html" target="_blank" rel="external">sourcemap</a> 帮助调试</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sourcemaps = <span class="built_in">require</span>(<span class="string">'gulp-sourcemaps'</span>)</div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">var</span> combined = combiner.obj([</div><div class="line">    gulp.src(paths.srcPath),</div><div class="line">    sourcemaps.init(),</div><div class="line">    uglify(),</div><div class="line">    sourcemaps.write(<span class="string">'./'</span>),</div><div class="line">    gulp.dest(paths.distDir)</div><div class="line">])</div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure>
<p>此时 <code>dist/js/</code> 中也会生成对应的 <code>.map</code> 文件，以便使用 Chrome 控制台调试代码 <a href="https://github.com/nimojs/gulp-demo/blob/master/src/js/" target="_blank" rel="external">在线文件示例：src/js/</a></p>
<hr>
<p>至此，我们完成了检测文件修改后压缩 JS 的 gulp 任务配置。</p>
<p>有时我们也需要一次编译所有 js 文件。可以配置 <code>uglifyjs</code> 任务。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'uglifyjs'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> combined = combiner.obj([</div><div class="line">        gulp.src(<span class="string">'src/js/**/*.js'</span>),</div><div class="line">        sourcemaps.init(),</div><div class="line">        uglify(),</div><div class="line">        sourcemaps.write(<span class="string">'./'</span>),</div><div class="line">        gulp.dest(<span class="string">'dist/js/'</span>)</div><div class="line">    ])</div><div class="line">    combined.on(<span class="string">'error'</span>, handleError)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>在命令行输入 <code>gulp uglifyjs</code> 以压缩 <code>src/js/</code> 下的所有 js 文件。</p>
<h3 id="7-6-配置-CSS-任务"><a href="#7-6-配置-CSS-任务" class="headerlink" title="7.6 配置 CSS 任务"></a>7.6 配置 CSS 任务</h3><hr>
<p>有时我们不想使用 LESS 或 SASS而是直接编写 CSS，但我们需要压缩 CSS 以提高页面加载速度。</p>
<h4 id="7-6-1-gulp-minify-css"><a href="#7-6-1-gulp-minify-css" class="headerlink" title="7.6.1 gulp-minify-css"></a>7.6.1 gulp-minify-css</h4><hr>
<p>按照本章中压缩 JS 的方式，先编写 <code>watchcss</code> 任务</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watchcss'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/css/**/*.css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event, <span class="string">'src/'</span>, <span class="string">'dist/'</span>)</div><div class="line"></div><div class="line">		gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line"></div><div class="line">        gulp.src(paths.srcPath)</div><div class="line">            .pipe(sourcemaps.init())</div><div class="line">            .pipe(minifycss())</div><div class="line">            .pipe(sourcemaps.write(<span class="string">'./'</span>))</div><div class="line">            .pipe(gulp.dest(paths.distDir))</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'watchjs'</span>,<span class="string">'watchcss'</span>])</div></pre></td></tr></table></figure>
<h4 id="7-6-2-gulp-autoprefixer"><a href="#7-6-2-gulp-autoprefixer" class="headerlink" title="7.6.2 gulp-autoprefixer"></a>7.6.2 gulp-autoprefixer</h4><p>autoprefixer 解析 CSS 文件并且添加浏览器前缀到CSS规则里。<br>通过示例帮助理解 </p>
<p>autoprefixer 处理前：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.demo</span> &#123;</div><div class="line">    <span class="attribute">display</span>:flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>autoprefixer 处理后：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.demo</span> &#123;</div><div class="line">    <span class="attribute">display</span>:-webkit-flex;</div><div class="line">    <span class="attribute">display</span>:-ms-flexbox;</div><div class="line">    <span class="attribute">display</span>:flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你只需要关心编写标准语法的 css，autoprefixer 会自动补全。</p>
<p>在 watchcss 任务中加入 autoprefixer:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'watchcss'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/css/**/*.css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event, <span class="string">'src/'</span>, <span class="string">'dist/'</span>)</div><div class="line"></div><div class="line">		gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line"></div><div class="line">        gulp.src(paths.srcPath)</div><div class="line">            .pipe(sourcemaps.init())</div><div class="line">            .pipe(autoprefixer(&#123;</div><div class="line">              <span class="attr">browsers</span>: <span class="string">'last 2 versions'</span></div><div class="line">            &#125;))</div><div class="line">            .pipe(minifycss())</div><div class="line">            .pipe(sourcemaps.write(<span class="string">'./'</span>))</div><div class="line">            .pipe(gulp.dest(paths.distDir))</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>更多 autoprefixer 参数请查看 <a href="https://github.com/sindresorhus/gulp-autoprefixer" target="_blank" rel="external">gulp-autoprefixer</a></p>
<p>有时我们也需要一次编译所有 css 文件。可以配置 <code>minifyss</code> 任务。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'minifycss'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/css/**/*.css'</span>)</div><div class="line">        .pipe(sourcemaps.init())</div><div class="line">        .pipe(autoprefixer(&#123;</div><div class="line">          <span class="attr">browsers</span>: <span class="string">'last 2 versions'</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(minifycss())</div><div class="line">        .pipe(sourcemaps.write(<span class="string">'./'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/css/'</span>))</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>在命令行输入 <code>gulp minifyss</code> 以压缩 <code>src/css/</code> 下的所有 .css 文件并复制到 <code>dist/css</code> 目录下</p>
<h3 id="7-7-配置-Less-任务"><a href="#7-7-配置-Less-任务" class="headerlink" title="7.7 配置 Less 任务"></a>7.7 配置 Less 任务</h3><hr>
<ul>
<li>参考配置 JavaScript 任务的方式配置 less 任务</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watchless'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/less/**/*.less'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event, <span class="string">'src/less/'</span>, <span class="string">'dist/css/'</span>)</div><div class="line"></div><div class="line">		gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line">        <span class="keyword">var</span> combined = combiner.obj([</div><div class="line">            gulp.src(paths.srcPath),</div><div class="line">            sourcemaps.init(),</div><div class="line">            autoprefixer(&#123;</div><div class="line">              <span class="attr">browsers</span>: <span class="string">'last 2 versions'</span></div><div class="line">            &#125;),</div><div class="line">            less(),</div><div class="line">            minifycss(),</div><div class="line">            sourcemaps.write(<span class="string">'./'</span>),</div><div class="line">            gulp.dest(paths.distDir)</div><div class="line">        ])</div><div class="line">        combined.on(<span class="string">'error'</span>, handleError)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'lesscss'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> combined = combiner.obj([</div><div class="line">            gulp.src(<span class="string">'src/less/**/*.less'</span>),</div><div class="line">            sourcemaps.init(),</div><div class="line">            autoprefixer(&#123;</div><div class="line">              <span class="attr">browsers</span>: <span class="string">'last 2 versions'</span></div><div class="line">            &#125;),</div><div class="line">            less(),</div><div class="line">            minifycss(),</div><div class="line">            sourcemaps.write(<span class="string">'./'</span>),</div><div class="line">            gulp.dest(<span class="string">'dist/css/'</span>)</div><div class="line">        ])</div><div class="line">    combined.on(<span class="string">'error'</span>, handleError)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'watchjs'</span>, <span class="string">'watchcss'</span>, <span class="string">'watchless'</span>])</div></pre></td></tr></table></figure>
<h3 id="7-8-配置-Sass-任务"><a href="#7-8-配置-Sass-任务" class="headerlink" title="7.8 配置 Sass 任务"></a>7.8 配置 Sass 任务</h3><hr>
<p>参考配置 JavaScript 任务的方式配置 Sass 任务</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'watchsass'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/sass/**/*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event, <span class="string">'src/sass/'</span>, <span class="string">'dist/css/'</span>)</div><div class="line"></div><div class="line">		gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line">        sass(paths.srcPath)</div><div class="line">            .on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">                <span class="built_in">console</span>.error(<span class="string">'Error!'</span>, err.message);</div><div class="line">            &#125;)</div><div class="line">            .pipe(sourcemaps.init())</div><div class="line">            .pipe(minifycss())</div><div class="line">            .pipe(autoprefixer(&#123;</div><div class="line">              <span class="attr">browsers</span>: <span class="string">'last 2 versions'</span></div><div class="line">            &#125;))</div><div class="line">            .pipe(sourcemaps.write(<span class="string">'./'</span>))</div><div class="line">            .pipe(gulp.dest(paths.distDir))</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'sasscss'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        sass(<span class="string">'src/sass/'</span>)</div><div class="line">        .on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.error(<span class="string">'Error!'</span>, err.message);</div><div class="line">        &#125;)</div><div class="line">        .pipe(sourcemaps.init())</div><div class="line">        .pipe(minifycss())</div><div class="line">        .pipe(autoprefixer(&#123;</div><div class="line">          <span class="attr">browsers</span>: <span class="string">'last 2 versions'</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(sourcemaps.write(<span class="string">'./'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/css'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'watchjs'</span>, <span class="string">'watchcss'</span>, <span class="string">'watchless'</span>, <span class="string">'watchsass'</span>, <span class="string">'watchsass'</span>])</div></pre></td></tr></table></figure>
<h3 id="7-9-配置-image-任务"><a href="#7-9-配置-image-任务" class="headerlink" title="7.9 配置 image 任务"></a>7.9 配置 image 任务</h3><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watchimage'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/images/**/*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event,<span class="string">'src/'</span>,<span class="string">'dist/'</span>)</div><div class="line"></div><div class="line">		gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line"></div><div class="line">        gulp.src(paths.srcPath)</div><div class="line">            .pipe(imagemin(&#123;</div><div class="line">                <span class="attr">progressive</span>: <span class="literal">true</span></div><div class="line">            &#125;))</div><div class="line">            .pipe(gulp.dest(paths.distDir))</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'image'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/images/**/*'</span>)</div><div class="line">        .pipe(imagemin(&#123;</div><div class="line">            <span class="attr">progressive</span>: <span class="literal">true</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/images'</span>))</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="7-10-配置文件复制任务"><a href="#7-10-配置文件复制任务" class="headerlink" title="7.10 配置文件复制任务"></a>7.10 配置文件复制任务</h3><hr>
<p>复制 <code>src/fonts/</code> 文件到 <code>dist/</code> 中</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'watchcopy'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/fonts/**/*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event)</div><div class="line"></div><div class="line">		gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line"></div><div class="line">        gulp.src(paths.srcPath)</div><div class="line">            .pipe(gulp.dest(paths.distDir))</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'copy'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/fonts/**/*'</span>)</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/fonts/'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'watchjs'</span>, <span class="string">'watchcss'</span>, <span class="string">'watchless'</span>, <span class="string">'watchsass'</span>, <span class="string">'watchimage'</span>, <span class="string">'watchcopy'</span>])</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;声明 本教程整理于互联网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、gulp-入门简介&quot;&gt;&lt;a href=&quot;#一、gulp-入门简介&quot; class=&quot;headerlink&quot; title=&quot;一、gulp 入门简介&quot;&gt;&lt;/a&gt;一、gulp 入门简介&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;code&gt;gulp&lt;/code&gt; 是基于 &lt;code&gt;node&lt;/code&gt; 实现&lt;code&gt;Web&lt;/code&gt; 前端自动化开发的工具，利用它能够极大的提高开发效率。&lt;/p&gt;
&lt;p&gt;在 Web 前端开发工作中有很多“重复工作”，比如压缩&lt;code&gt;CSS/JS&lt;/code&gt;文件。而这些工作都是有规律的。找到这些规律，并编写 &lt;code&gt;gulp&lt;/code&gt; 配置代码,让 &lt;code&gt;gulp&lt;/code&gt; 自动执行这些“重复工作”。&lt;/p&gt;
    
    </summary>
    
      <category term="Build" scheme="http://blog.poetries.top/categories/Build/"/>
    
    
      <category term="gulp" scheme="http://blog.poetries.top/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript运动框架之速度时间版本</title>
    <link href="http://blog.poetries.top/2017/01/12/js-animate/"/>
    <id>http://blog.poetries.top/2017/01/12/js-animate/</id>
    <published>2017-01-12T07:50:43.000Z</published>
    <updated>2017-02-15T11:25:30.956Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、JavaScript运动框架之速度版"><a href="#一、JavaScript运动框架之速度版" class="headerlink" title="一、JavaScript运动框架之速度版"></a>一、JavaScript运动框架之速度版</h3><hr>
<h4 id="1-1-运动框架的实现思路"><a href="#1-1-运动框架的实现思路" class="headerlink" title="1.1 运动框架的实现思路"></a>1.1 运动框架的实现思路</h4><hr>
<p>运动，其实就是在一段时间内改变 <code>left</code> 、 <code>right</code> 、 <code>width</code> 、 <code>height</code> 、 <code>opactiy</code> 的值，到达目的地之后停止</p>
<ul>
<li>位移  <code>top</code>,<code>left</code></li>
<li>折叠  <code>width</code>,<code>height</code></li>
<li>淡入淡出 <code>opacity</code></li>
<li>时间有关系<ul>
<li><code>setInterval</code></li>
<li><code>setTimeout</code></li>
</ul>
</li>
</ul>
<ul>
<li>用javascript直接获取行间样式很容易，但如果要获取非行间样式那我们只能借助函数了。我这里编写了一个名为getStyle的函数，专门处理取非行间的样式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,attr</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> getComputedStyle(obj)[attr]?getComputedStyle(obj)[attr]:obj.currentStyle[attr];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-2-一些案例演示"><a href="#1-2-一些案例演示" class="headerlink" title="1.2 一些案例演示"></a>1.2 一些案例演示</h4><hr>
<h5 id="1-2-1-运动之速"><a href="#1-2-1-运动之速" class="headerlink" title="1.2.1 运动之速"></a>1.2.1 运动之速</h5><hr>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#box</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">background</span>: red;</div><div class="line">	 <span class="attribute">position</span>: relative;</div><div class="line">	<span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line"><span class="keyword">var</span> speed = <span class="number">0</span>; <span class="comment">//步长</span></div><div class="line"><span class="keyword">var</span> target = <span class="number">600</span>;</div><div class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</div><div class="line">timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> curr = <span class="built_in">parseInt</span>(getStyle(box,<span class="string">"left"</span>)); <span class="comment">//去除getStyle(box,"left")的单位</span></div><div class="line">	<span class="keyword">if</span>(curr == target)&#123;</div><div class="line">		clearInterval(timer);</div><div class="line">		speed = <span class="number">0</span>;</div><div class="line">		alert(<span class="string">"运动结束"</span>);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		speed +=<span class="number">10</span>;</div><div class="line">		box.style.left = speed + <span class="string">"px"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"></div><div class="line">&#125;,<span class="number">1000</span>/<span class="number">30</span>);</div><div class="line"></div><div class="line"><span class="comment">//监控left的值的变化 怎么样拿到left的值</span></div><div class="line"><span class="comment">//alert(getComputedStyle(box)["width"]);</span></div><div class="line"><span class="comment">//alert(box.currentStyle["left"]);</span></div><div class="line"><span class="comment">// currentStyle --IE </span></div><div class="line"><span class="comment">// getComputedStyle -- 非IE</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,attr</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> getComputedStyle(obj)[attr]?getComputedStyle(obj)[attr]:obj.currentStyle[attr];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/poetries/pen/wgGqzr" target="_blank" rel="external">在线演示</a></p>
<h5 id="1-2-2-运动速度之封装1"><a href="#1-2-2-运动速度之封装1" class="headerlink" title="1.2.2 运动速度之封装1"></a>1.2.2 运动速度之封装1</h5><hr>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ball"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#ball</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">background</span>: blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ball = <span class="built_in">document</span>.getElementById(<span class="string">"ball"</span>);</div><div class="line"></div><div class="line">ball.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//同时变换 用的最多</span></div><div class="line">	<span class="comment">//move(this,"width",500,10);</span></div><div class="line">	<span class="comment">//move(this,"height",500,10);</span></div><div class="line">	move(ball,&#123;<span class="string">"width"</span>:<span class="number">400</span>,<span class="string">"height"</span>:<span class="number">300</span>&#125;,<span class="number">10</span>);</div><div class="line">&#125;</div><div class="line">ball.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//move(this,"width",100,-10);</span></div><div class="line">	<span class="comment">//move(this,"height",100,-10);</span></div><div class="line">	move(ball,&#123;<span class="string">"width"</span>:<span class="number">100</span>,<span class="string">"height"</span>:<span class="number">100</span>&#125;,<span class="number">-10</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">obj,json,speed</span>)</span>&#123;</div><div class="line">	clearInterval(obj.timer);</div><div class="line">	<span class="keyword">var</span> mark = <span class="literal">true</span>;</div><div class="line">	obj.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json)&#123;</div><div class="line">			<span class="keyword">var</span> curr = <span class="built_in">parseInt</span>(getStyle(obj,attr));</div><div class="line">			<span class="keyword">var</span> target = json[attr];</div><div class="line">			<span class="keyword">if</span>(curr != target)&#123;</div><div class="line">				obj.style[attr] = curr+speed+<span class="string">"px"</span>;</div><div class="line">				mark = <span class="literal">false</span>;</div><div class="line">		  &#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(mark)&#123;</div><div class="line">			clearInterval(obj.timer);</div><div class="line">		&#125;</div><div class="line">	&#125;,<span class="number">1000</span>/<span class="number">30</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,attr</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> getComputedStyle(obj)[attr]?getComputedStyle(obj)[attr]:obj.currentStyle[attr];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>需要注意的地方<ul>
<li>当需要两个动画的时候，会执行后面一个，解决办法如下，回调函数</li>
<li>当需要两个以上的时候，需要考虑是否可写一行代码变换多个属性</li>
<li>变换不一致的时候，定时器被提前清除</li>
</ul>
</li>
</ul>
<p><a href="http://codepen.io/poetries/pen/KazvNe" target="_blank" rel="external">在线演示</a></p>
<h5 id="1-2-3-运动速度之封装2–增加opacity"><a href="#1-2-3-运动速度之封装2–增加opacity" class="headerlink" title="1.2.3 运动速度之封装2–增加opacity"></a>1.2.3 运动速度之封装2–增加opacity</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ball"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#ball</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">background</span>: blue;</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ball = <span class="built_in">document</span>.getElementById(<span class="string">"ball"</span>);</div><div class="line">ball.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	move(ball,&#123;<span class="string">"width"</span>:<span class="number">300</span>,<span class="string">"height"</span>:<span class="number">300</span>,<span class="string">"opacity"</span>:<span class="number">0.3</span>&#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">//			ball.onmouseout = function()&#123;</span></div><div class="line"><span class="comment">//				move(ball,&#123;"width":100,"height":100&#125;,-10);</span></div><div class="line"><span class="comment">//			&#125;</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">obj,json</span>)</span>&#123;</div><div class="line">	clearInterval(obj.timer);</div><div class="line">	<span class="keyword">var</span> mark = <span class="literal">true</span>;</div><div class="line">	obj.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json)&#123;</div><div class="line">			<span class="keyword">var</span> curr = <span class="literal">null</span>;</div><div class="line">			<span class="keyword">var</span> target = json[attr];</div><div class="line">			<span class="keyword">var</span> speed = <span class="literal">null</span>;</div><div class="line">			<span class="keyword">if</span>(attr == <span class="string">"opacity"</span>)&#123;</div><div class="line">				curr = getStyle(obj,attr)*<span class="number">100</span>;</div><div class="line">				speed = (target*<span class="number">100</span>-curr)*<span class="number">0.15</span>;</div><div class="line">			&#125;<span class="keyword">else</span> &#123;</div><div class="line">				curr = <span class="built_in">parseInt</span>(getStyle(obj,attr));</div><div class="line">				speed = (target - curr)*<span class="number">0.15</span>;</div><div class="line">			&#125;</div><div class="line">			speed = speed&gt;<span class="number">0</span> ? <span class="built_in">Math</span>.ceil(speed):<span class="built_in">Math</span>.floor(speed);</div><div class="line">			<span class="keyword">if</span>(curr != target)&#123;</div><div class="line">				<span class="keyword">if</span>(attr == <span class="string">"opacity"</span>)&#123;</div><div class="line">					obj.style[attr] = (curr+speed)/<span class="number">100</span>;</div><div class="line">				&#125;<span class="keyword">else</span> &#123;</div><div class="line">					obj.style[attr] = curr+speed+<span class="string">"px"</span>;</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">				mark = <span class="literal">false</span>;</div><div class="line">		  &#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(mark)&#123;</div><div class="line">			clearInterval(obj.timer);</div><div class="line">		&#125;</div><div class="line">	&#125;,<span class="number">1000</span>/<span class="number">30</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,attr</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> getComputedStyle(obj)[attr]?getComputedStyle(obj)[attr]:obj.currentStyle[attr];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/poetries/pen/PWNKmj" target="_blank" rel="external">在线演示</a></p>
<ul>
<li>需要注意的地方<ul>
<li>当需要两个动画的时候，会执行后面一个，解决办法如下，回调函数</li>
<li>当需要两个以上的时候，需要考虑是否可写一行代码变换多个属性</li>
<li>变换不一致的时候，定时器被提前清除</li>
<li>速度<code>speed</code>不要写死</li>
</ul>
</li>
</ul>
<h4 id="1-3-运动框架之应用"><a href="#1-3-运动框架之应用" class="headerlink" title="1.3 运动框架之应用"></a>1.3 运动框架之应用</h4><h5 id="1-3-1-分享按钮"><a href="#1-3-1-分享按钮" class="headerlink" title="1.3.1 分享按钮"></a>1.3.1 分享按钮</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ball"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span>分享到<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">"box1"</span>);</div><div class="line"><span class="keyword">var</span> ball = <span class="built_in">document</span>.getElementById(<span class="string">"ball"</span>);</div><div class="line"></div><div class="line">box1.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  move(<span class="keyword">this</span>,<span class="string">"left"</span>,<span class="number">0</span>,<span class="number">10</span>);</div><div class="line">&#125;</div><div class="line">box1.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  move(<span class="keyword">this</span>,<span class="string">"left"</span>,<span class="number">-100</span>,<span class="number">-10</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//问题一：当需要两个动画的时候，会执行后面一个，解决办法如下，回调函数</span></div><div class="line">ball.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//同时变换 用的最多</span></div><div class="line">  <span class="comment">//move(this,"width",500,10);</span></div><div class="line">  <span class="comment">//move(this,"height",500,10);</span></div><div class="line">  <span class="comment">//列队在执行</span></div><div class="line">  move(ball,<span class="string">"width"</span>,<span class="number">500</span>,<span class="number">10</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    move(ball,<span class="string">"height"</span>,<span class="number">500</span>,<span class="number">10</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line">ball.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//move(this,"width",100,-10);</span></div><div class="line">  <span class="comment">//move(this,"height",100,-10);</span></div><div class="line">  move(ball,<span class="string">"width"</span>,<span class="number">100</span>,<span class="number">-10</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    move(ball,<span class="string">"height"</span>,<span class="number">100</span>,<span class="number">-10</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">obj,attr,target,speed,callback</span>)</span>&#123;</div><div class="line">  clearInterval(timer); <span class="comment">//obj.timer缓存到各自的obj下</span></div><div class="line">  timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> curr = <span class="built_in">parseInt</span>(getStyle(obj,attr));</div><div class="line">    <span class="keyword">if</span>(curr == target)&#123;</div><div class="line">      clearInterval(timer);</div><div class="line">      callback &amp;&amp; callback();</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">      obj.style[attr] = curr+speed+<span class="string">"px"</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;,<span class="number">1000</span>/<span class="number">30</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,attr</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> getComputedStyle(obj)[attr]?getComputedStyle(obj)[attr]:obj.currentStyle[attr];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/poetries/pen/LxNjzp" target="_blank" rel="external">在线演示</a></p>
<h5 id="1-3-2运动框架之轮播图应用"><a href="#1-3-2运动框架之轮播图应用" class="headerlink" title="1.3.2运动框架之轮播图应用"></a>1.3.2运动框架之轮播图应用</h5><ul>
<li><a href="http://codepen.io/poetries/pen/JEXyaG" target="_blank" rel="external">焦点轮播–基本版本–在线演示</a></li>
<li><a href="http://codepen.io/poetries/pen/apNyPv" target="_blank" rel="external">焦点轮播–淡入淡出–在线演示</a></li>
<li><a href="http://codepen.io/poetries/pen/ggrxqo" target="_blank" rel="external">焦点轮播–左右–在线演示</a></li>
<li><a href="http://codepen.io/poetries/pen/mRPMoq" target="_blank" rel="external"> 焦点轮播–上下–在线演示</a></li>
</ul>
<h6 id="1-3-2-1-焦点轮播–左右-无缝-速度版实现"><a href="#1-3-2-1-焦点轮播–左右-无缝-速度版实现" class="headerlink" title="1.3.2.1 焦点轮播–左右-无缝-速度版实现"></a>1.3.2.1 焦点轮播–左右-无缝-速度版实现</h6><hr>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"imgBox"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>![](http://upload-images.jianshu.io/upload_images/1480597-c72819402fb928e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>![](http://upload-images.jianshu.io/upload_images/1480597-6830ca74fe1e6fcd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>![](http://upload-images.jianshu.io/upload_images/1480597-5d38376e63ffd0b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>![](http://upload-images.jianshu.io/upload_images/1480597-2aa932ffbba4091e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>![](http://upload-images.jianshu.io/upload_images/1480597-c72819402fb928e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ol</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://7xq6al.com1.z0.glb.clouddn.com/Animate.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">"#box"</span>);</div><div class="line">	<span class="keyword">var</span> imgUl = <span class="built_in">document</span>.querySelector(<span class="string">"#imgBox"</span>);</div><div class="line">	<span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelector(<span class="string">"#btn"</span>).querySelectorAll(<span class="string">"li"</span>);</div><div class="line">	<span class="keyword">var</span> len = btns.length;</div><div class="line">	<span class="keyword">var</span> lenImg = imgUl.querySelectorAll(<span class="string">"li"</span>).length;</div><div class="line">	<span class="keyword">var</span> index = <span class="number">0</span>; <span class="comment">//控制img的索引</span></div><div class="line">	<span class="keyword">var</span> cindex = <span class="number">0</span>;<span class="comment">//控制按钮的索引</span></div><div class="line">	<span class="keyword">var</span> timer = <span class="literal">null</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++) &#123;</div><div class="line">			(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</div><div class="line">				btns[index].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					<span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</div><div class="line">						btns[j].className = <span class="string">""</span>;</div><div class="line">				&#125;</div><div class="line">					cindex = index;<span class="comment">//保持索引同步</span></div><div class="line">					animateSpeed(imgUl,&#123;<span class="string">"left"</span>:<span class="number">-970</span>*index&#125;);</div><div class="line">					<span class="keyword">this</span>.className = <span class="string">"active"</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;)(i);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">autoPlay</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		index++;</div><div class="line">		cindex++;</div><div class="line">		cindex %=len;<span class="comment">//限制长度</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</div><div class="line">			btns[j].className = <span class="string">""</span>;</div><div class="line">		&#125;</div><div class="line">		animateSpeed(imgUl,&#123;<span class="string">"left"</span>:<span class="number">-970</span>*index&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			</div><div class="line">			<span class="keyword">if</span>(index == lenImg<span class="number">-1</span>)&#123;</div><div class="line">				<span class="keyword">this</span>.style.left = <span class="number">0</span>;</div><div class="line">				index = <span class="number">0</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		btns[cindex].className = <span class="string">"active"</span>;</div><div class="line">	&#125;</div><div class="line">	timer = setInterval(autoPlay,<span class="number">2000</span>);</div><div class="line">	box.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		clearInterval(timer);</div><div class="line">	&#125;</div><div class="line">	box.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		timer = setInterval(autoPlay,<span class="number">2000</span>);</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">*&#123;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">  <span class="attribute">font-family</span>: <span class="string">"微软雅黑"</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">li</span>&#123;</div><div class="line">  <span class="attribute">list-style</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#box</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">width</span>: <span class="number">970px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">350px</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">30px</span> auto;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#imgBox</span> &#123;</div><div class="line">  <span class="attribute">width</span>:<span class="number">1000%</span>;<span class="comment">/*自动计算百分比*/</span></div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#imgBox</span> <span class="selector-tag">li</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">970px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">350px</span>;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#imgBox</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">970px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">350px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#btn</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">120px</span>;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">right</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#btn</span> <span class="selector-tag">li</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">  <span class="attribute">cursor</span>: pointer;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">2px</span>;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#btn</span> <span class="selector-tag">li</span><span class="selector-class">.active</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#F17A5C</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//速度版本</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">obj,json,callback</span>)</span>&#123;</div><div class="line">        clearInterval(obj.timer);</div><div class="line">        obj.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> mark = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json)&#123;</div><div class="line">                <span class="keyword">var</span> cur = <span class="literal">null</span>;</div><div class="line">                <span class="keyword">if</span>(attr == <span class="string">"opacity"</span>)&#123;</div><div class="line">                    cur = getStyle(obj,attr)*<span class="number">100</span>;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="comment">//如果没写 默认填充成0</span></div><div class="line">                    cur = <span class="built_in">parseInt</span>(getStyle(obj,attr))||<span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">var</span> target = json[attr];</div><div class="line">                <span class="keyword">var</span> speed = (target - cur)*<span class="number">0.2</span>;</div><div class="line">                speed = speed&gt;<span class="number">0</span>?<span class="built_in">Math</span>.ceil(speed):<span class="built_in">Math</span>.floor(speed);</div><div class="line">                <span class="keyword">if</span>(cur != target)&#123;</div><div class="line">                    <span class="keyword">if</span>(attr == <span class="string">"opacity"</span>)&#123;</div><div class="line">                        <span class="comment">//IE opacity兼容问题</span></div><div class="line">                        obj.style.filter = <span class="string">"alpha(opacity="</span>+(cur+speed)+<span class="string">")"</span>;</div><div class="line">                        obj.style[attr] = (cur + speed)/<span class="number">100</span>;</div><div class="line">                    &#125;<span class="keyword">else</span>&#123;</div><div class="line">                        obj.style[attr] = cur + speed + <span class="string">"px"</span>;</div><div class="line">                    &#125;</div><div class="line">                    mark = <span class="literal">false</span>;</div><div class="line"></div><div class="line">                &#125;;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(mark)&#123;</div><div class="line">                clearInterval(obj.timer);</div><div class="line">                callback &amp;&amp; callback.call(obj);</div><div class="line">            &#125;</div><div class="line">        &#125;,<span class="number">1000</span>/<span class="number">30</span>);</div><div class="line">    &#125;</div><div class="line">    win.animateSpeed = move;</div><div class="line">&#125;)(<span class="built_in">window</span>);</div><div class="line"></div><div class="line"> 	</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,attr</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> getComputedStyle(obj)[attr]?getComputedStyle(obj)[attr]:obj.currentStyle[attr];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getId</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二、JavaScript运动框架之时间版"><a href="#二、JavaScript运动框架之时间版" class="headerlink" title="二、JavaScript运动框架之时间版"></a>二、JavaScript运动框架之时间版</h3><hr>
<h4 id="2-1-关于运动"><a href="#2-1-关于运动" class="headerlink" title="2.1 关于运动"></a>2.1 关于运动</h4><hr>
<ul>
<li>速度的运动 通过速度来控制元素的 位移 / 折叠 / 淡入淡出</li>
<li>时间的运动 通过时间来控制元素的 位移 / 折叠 / 淡入淡出(jQuery)</li>
<li>时间的运动 基于一些数学公式 匀速运动 在路程的每一个点 速度都一样</li>
</ul>
<h4 id="2-2-一些案例演示"><a href="#2-2-一些案例演示" class="headerlink" title="2.2 一些案例演示"></a>2.2 一些案例演示</h4><hr>
<ul>
<li><a href="http://codepen.io/poetries/pen/jyqGPR" target="_blank" rel="external">运动框架之时间版本-1</a></li>
<li><a href="http://codepen.io/poetries/pen/apNLZB" target="_blank" rel="external">运动框架之时间版本-2</a></li>
<li><a href="http://codepen.io/poetries/pen/zNqEKB" target="_blank" rel="external">运动框架之时间版本-3</a></li>
<li><a href="http://codepen.io/poetries/pen/MJyEbY" target="_blank" rel="external">运动框架之时间版本-4</a></li>
</ul>
<h4 id="2-3-运动框架之时间版本-借助animate一些函数实现–综合完整版"><a href="#2-3-运动框架之时间版本-借助animate一些函数实现–综合完整版" class="headerlink" title="2.3 运动框架之时间版本-借助animate一些函数实现–综合完整版"></a>2.3 运动框架之时间版本-借助animate一些函数实现–综合完整版</h4><hr>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box5"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line"> <span class="comment">//时间版本</span></div><div class="line"> getId(<span class="string">"box2"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> 	animateTime(getId(<span class="string">"box2"</span>),&#123;</div><div class="line"> 		<span class="string">"left"</span>:<span class="number">500</span>,</div><div class="line"> 		<span class="string">"opacity"</span>:<span class="number">100</span></div><div class="line"> 	&#125;,<span class="number">1000</span>,<span class="string">"elasticOut"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> 		<span class="keyword">this</span>.innerHTML = <span class="string">"我是时间版本"</span>;</div><div class="line"> 	&#125;);</div><div class="line"> &#125;</div><div class="line">getId(<span class="string">"box3"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> 	animateTime(getId(<span class="string">"box3"</span>),&#123;</div><div class="line"> 		<span class="string">"left"</span>:<span class="number">500</span>,</div><div class="line"> 		<span class="string">"opacity"</span>:<span class="number">100</span></div><div class="line"> 	&#125;,<span class="number">1000</span>,<span class="string">"backIn"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> 		<span class="keyword">this</span>.innerHTML = <span class="string">"我是时间版本"</span>;</div><div class="line"> 	&#125;);</div><div class="line"> &#125;</div><div class="line">getId(<span class="string">"box4"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> 	animateTime(getId(<span class="string">"box4"</span>),&#123;</div><div class="line"> 		<span class="string">"left"</span>:<span class="number">500</span>,</div><div class="line"> 		<span class="string">"opacity"</span>:<span class="number">100</span></div><div class="line"> 	&#125;,<span class="number">1000</span>,<span class="string">"bounceIn"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> 		<span class="keyword">this</span>.innerHTML = <span class="string">"我是时间版本"</span>;</div><div class="line"> 	&#125;);</div><div class="line"> &#125;</div><div class="line">getId(<span class="string">"box5"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> 	animateTime(getId(<span class="string">"box5"</span>),&#123;</div><div class="line"> 		<span class="string">"left"</span>:<span class="number">500</span>,</div><div class="line"> 		<span class="string">"opacity"</span>:<span class="number">100</span></div><div class="line"> 	&#125;,<span class="number">1000</span>,<span class="string">"bounceBoth"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> 		<span class="keyword">this</span>.innerHTML = <span class="string">"我是时间版本"</span>;</div><div class="line"> 	&#125;);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#box1</span>,<span class="selector-id">#box2</span>,<span class="selector-id">#box3</span>,<span class="selector-id">#box4</span>,<span class="selector-id">#box5</span> &#123;</div><div class="line">	<span class="attribute">position</span>: relative;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">text-align</span>: center;</div><div class="line">	<span class="attribute">background</span>: red;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">12px</span>;</div><div class="line">	<span class="attribute">opacity</span>: <span class="number">0.5</span>;</div><div class="line">	<span class="attribute">filter</span>:<span class="built_in">alpha</span>(opcity=20);<span class="comment">/**兼容IE*/</span></div><div class="line">	<span class="attribute">margin</span>: <span class="number">10px</span>;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*t b c d</span></div><div class="line">t current time   :nTime-sTime</div><div class="line">b begining time  :curr</div><div class="line">c chang in value :变化量end-curr</div><div class="line">d duration       :持续时间 time */</div><div class="line"><span class="comment">/**</span></div><div class="line">* </div><div class="line">* @param &#123;Object&#125; obj 元素对象</div><div class="line">* @param &#123;Object&#125; json 多个属性</div><div class="line">* @param &#123;Object&#125; time 变化时间</div><div class="line">* @param &#123;Object&#125; prop 运动函数</div><div class="line">* @param &#123;Object&#125; callback 回调函数</div><div class="line">*/</div><div class="line"><span class="comment">//时间版本</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>)</span>&#123; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">obj,json,time,prop,callback</span>)</span>&#123;</div><div class="line"><span class="comment">//一般定时器结束后最好清除</span></div><div class="line">clearInterval(obj.timer);</div><div class="line"><span class="keyword">var</span> curr = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> end = &#123;&#125;;</div><div class="line"><span class="comment">//通过for in 在上车前把所有东西装到包里</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json)&#123;</div><div class="line">	<span class="keyword">if</span>(attr == <span class="string">"opacity"</span>)&#123;<span class="comment">//opacity特殊东西特殊对待</span></div><div class="line">		curr[attr] = getStyle(obj,attr)*<span class="number">100</span>;<span class="comment">//化为整数好计算</span></div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		curr[attr] = <span class="built_in">parseInt</span>(getStyle(obj,attr))||<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	end[attr] = json[attr];</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//如果没写默认值 默认就是0 不然在IE出问题</span></div><div class="line"><span class="comment">//var curr = parseInt(getStyle(obj,attr))||0;</span></div><div class="line"><span class="comment">//var end = target;</span></div><div class="line"><span class="keyword">var</span> sTime = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//开始时间T0</span></div><div class="line"><span class="comment">//开始变换了</span></div><div class="line">obj.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> nTime = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//当前时间Tt</span></div><div class="line">	<span class="keyword">var</span> t = nTime -sTime;</div><div class="line">	<span class="keyword">var</span> d = time;</div><div class="line">	<span class="comment">//St = (Tt-T0)/Time*(S-S0)+S0</span></div><div class="line">	<span class="comment">//(nTime-sTime)/time 比例最多为1</span></div><div class="line">	<span class="comment">/*var prop = (nTime-sTime)/time; */</span></div><div class="line">	<span class="keyword">if</span>(t &gt;=d)&#123;</div><div class="line">		t = d;</div><div class="line">		clearInterval(obj.timer);</div><div class="line">		callback &amp;&amp; callback.call(obj);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json)&#123;</div><div class="line">		<span class="keyword">var</span> b = curr[attr];</div><div class="line">		<span class="keyword">var</span> c = end[attr] - b;</div><div class="line">		<span class="keyword">if</span>(attr == <span class="string">"opacity"</span>)&#123;</div><div class="line">			<span class="comment">//var s = prop*(end[attr]-curr[attr])+curr[attr];</span></div><div class="line">			<span class="keyword">var</span> s = Tween[prop](t,b,c,d);</div><div class="line">			obj.style[attr] = s/<span class="number">100</span>;</div><div class="line">			obj.style.filter = <span class="string">"alpha(opacity="</span>+s+<span class="string">")"</span>;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="comment">//var s = prop*(end[attr]-curr[attr])+curr[attr];</span></div><div class="line">			<span class="keyword">var</span> s = Tween[prop](t,b,c,d);</div><div class="line">			obj.style[attr] = s+<span class="string">"px"</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">&#125;,<span class="number">13</span>);</div><div class="line"><span class="keyword">var</span> Tween = &#123;</div><div class="line">    <span class="attr">linear</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//匀速</span></div><div class="line">        <span class="keyword">return</span> c*t/d + b;   <span class="comment">//  t/d = prop;</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">easeIn</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//加速曲线</span></div><div class="line">        <span class="keyword">return</span> c*(t/=d)*t + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">easeOut</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//减速曲线</span></div><div class="line">        <span class="keyword">return</span> -c *(t/=d)*(t<span class="number">-2</span>) + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">easeBoth</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//加速减速曲线</span></div><div class="line">        <span class="keyword">if</span> ((t/=d/<span class="number">2</span>) &lt; <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> c/<span class="number">2</span>*t*t + b;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -c/<span class="number">2</span> * ((--t)*(t<span class="number">-2</span>) - <span class="number">1</span>) + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">easeInStrong</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//加加速曲线</span></div><div class="line">        <span class="keyword">return</span> c*(t/=d)*t*t*t + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">easeOutStrong</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//减减速曲线</span></div><div class="line">        <span class="keyword">return</span> -c * ((t=t/d<span class="number">-1</span>)*t*t*t - <span class="number">1</span>) + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">easeBothStrong</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//加加速减减速曲线</span></div><div class="line">        <span class="keyword">if</span> ((t/=d/<span class="number">2</span>) &lt; <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> c/<span class="number">2</span>*t*t*t*t + b;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -c/<span class="number">2</span> * ((t-=<span class="number">2</span>)*t*t*t - <span class="number">2</span>) + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">elasticIn</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d, a, p</span>)</span>&#123;  <span class="comment">//正弦衰减曲线（弹动渐入）</span></div><div class="line">        <span class="keyword">if</span> (t === <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> b;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ( (t /= d) == <span class="number">1</span> ) &#123;</div><div class="line">            <span class="keyword">return</span> b+c;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!p) &#123;</div><div class="line">            p=d*<span class="number">0.3</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!a || a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">            a = c;</div><div class="line">            <span class="keyword">var</span> s = p/<span class="number">4</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">var</span> s = p/(<span class="number">2</span>*<span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin (c/a);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -(a*<span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">10</span>*(t-=<span class="number">1</span>)) * <span class="built_in">Math</span>.sin( (t*d-s)*(<span class="number">2</span>*<span class="built_in">Math</span>.PI)/p )) + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">elasticOut</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d, a, p</span>)</span>&#123;    <span class="comment">//正弦增强曲线（弹动渐出）</span></div><div class="line">        <span class="keyword">if</span> (t === <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> b;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ( (t /= d) == <span class="number">1</span> ) &#123;</div><div class="line">            <span class="keyword">return</span> b+c;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!p) &#123;</div><div class="line">            p=d*<span class="number">0.3</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!a || a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">            a = c;</div><div class="line">            <span class="keyword">var</span> s = p / <span class="number">4</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">var</span> s = p/(<span class="number">2</span>*<span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin (c/a);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> a*<span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">-10</span>*t) * <span class="built_in">Math</span>.sin( (t*d-s)*(<span class="number">2</span>*<span class="built_in">Math</span>.PI)/p ) + c + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">elasticBoth</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d, a, p</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (t === <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> b;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ( (t /= d/<span class="number">2</span>) == <span class="number">2</span> ) &#123;</div><div class="line">            <span class="keyword">return</span> b+c;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!p) &#123;</div><div class="line">            p = d*(<span class="number">0.3</span>*<span class="number">1.5</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ( !a || a &lt; <span class="built_in">Math</span>.abs(c) ) &#123;</div><div class="line">            a = c;</div><div class="line">            <span class="keyword">var</span> s = p/<span class="number">4</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">var</span> s = p/(<span class="number">2</span>*<span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin (c/a);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (t &lt; <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> - <span class="number">0.5</span>*(a*<span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">10</span>*(t-=<span class="number">1</span>)) *</div><div class="line">                    <span class="built_in">Math</span>.sin( (t*d-s)*(<span class="number">2</span>*<span class="built_in">Math</span>.PI)/p )) + b;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> a*<span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">-10</span>*(t-=<span class="number">1</span>)) *</div><div class="line">                <span class="built_in">Math</span>.sin( (t*d-s)*(<span class="number">2</span>*<span class="built_in">Math</span>.PI)/p )*<span class="number">0.5</span> + c + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">backIn</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d, s</span>)</span>&#123;     <span class="comment">//回退加速（回退渐入）</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> s == <span class="string">'undefined'</span>) &#123;</div><div class="line">           s = <span class="number">1.70158</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> c*(t/=d)*t*((s+<span class="number">1</span>)*t - s) + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">backOut</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d, s</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> s == <span class="string">'undefined'</span>) &#123;</div><div class="line">            s = <span class="number">3.70158</span>;  <span class="comment">//回缩的距离</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> c*((t=t/d<span class="number">-1</span>)*t*((s+<span class="number">1</span>)*t + s) + <span class="number">1</span>) + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">backBoth</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d, s</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> s == <span class="string">'undefined'</span>) &#123;</div><div class="line">            s = <span class="number">1.70158</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ((t /= d/<span class="number">2</span> ) &lt; <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> c/<span class="number">2</span>*(t*t*(((s*=(<span class="number">1.525</span>))+<span class="number">1</span>)*t - s)) + b;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> c/<span class="number">2</span>*((t-=<span class="number">2</span>)*t*(((s*=(<span class="number">1.525</span>))+<span class="number">1</span>)*t + s) + <span class="number">2</span>) + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">bounceIn</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;    <span class="comment">//弹球减振（弹球渐出）</span></div><div class="line">        <span class="keyword">return</span> c - Tween[<span class="string">'bounceOut'</span>](d-t, <span class="number">0</span>, c, d) + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">bounceOut</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> ((t/=d) &lt; (<span class="number">1</span>/<span class="number">2.75</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> c*(<span class="number">7.5625</span>*t*t) + b;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; (<span class="number">2</span>/<span class="number">2.75</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> c*(<span class="number">7.5625</span>*(t-=(<span class="number">1.5</span>/<span class="number">2.75</span>))*t + <span class="number">0.75</span>) + b;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; (<span class="number">2.5</span>/<span class="number">2.75</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> c*(<span class="number">7.5625</span>*(t-=(<span class="number">2.25</span>/<span class="number">2.75</span>))*t + <span class="number">0.9375</span>) + b;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> c*(<span class="number">7.5625</span>*(t-=(<span class="number">2.625</span>/<span class="number">2.75</span>))*t + <span class="number">0.984375</span>) + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">bounceBoth</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (t &lt; d/<span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">return</span> Tween[<span class="string">'bounceIn'</span>](t*<span class="number">2</span>, <span class="number">0</span>, c, d) * <span class="number">0.5</span> + b;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Tween[<span class="string">'bounceOut'</span>](t*<span class="number">2</span>-d, <span class="number">0</span>, c, d) * <span class="number">0.5</span> + c*<span class="number">0.5</span> + b;</div><div class="line">        &#125;</div><div class="line">&#125;;</div><div class="line">&#125;</div><div class="line">win.animateTime = move;	</div><div class="line">&#125;)(<span class="built_in">window</span>);</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/poetries/pen/ggrGLj" target="_blank" rel="external">在线演示</a></p>
<h3 id="三、运动框架之时间速度版完整封装"><a href="#三、运动框架之时间速度版完整封装" class="headerlink" title="三、运动框架之时间速度版完整封装"></a>三、运动框架之时间速度版完整封装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*t b c d</span></div><div class="line">t current time   :nTime-sTime</div><div class="line">b begining time  :curr</div><div class="line">c chang in value :变化量end-curr</div><div class="line">d duration       :持续时间 time */</div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * @param &#123;Object&#125; obj 元素对象</div><div class="line"> * @param &#123;Object&#125; json 多个属性</div><div class="line"> * @param &#123;Object&#125; time 变化时间</div><div class="line"> * @param &#123;Object&#125; prop 运动函数</div><div class="line"> * @param &#123;Object&#125; callback 回调函数</div><div class="line"> */</div><div class="line"><span class="comment">//时间版本</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>)</span>&#123; </div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">obj,json,time,prop,callback</span>)</span>&#123;</div><div class="line">	<span class="comment">//一般定时器结束后最好清除</span></div><div class="line">	clearInterval(obj.timer);</div><div class="line">	<span class="keyword">var</span> curr = &#123;&#125;;</div><div class="line">	<span class="keyword">var</span> end = &#123;&#125;;</div><div class="line">	<span class="comment">//通过for in 在上车前把所有东西装到包里</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json)&#123;</div><div class="line">		<span class="keyword">if</span>(attr == <span class="string">"opacity"</span>)&#123;<span class="comment">//opacity特殊东西特殊对待</span></div><div class="line">			curr[attr] = getStyle(obj,attr)*<span class="number">100</span>;<span class="comment">//化为整数好计算</span></div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			curr[attr] = <span class="built_in">parseInt</span>(getStyle(obj,attr))||<span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">		end[attr] = json[attr];</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">//如果没写默认值 默认就是0 不然在IE出问题</span></div><div class="line">	<span class="comment">//var curr = parseInt(getStyle(obj,attr))||0;</span></div><div class="line">	<span class="comment">//var end = target;</span></div><div class="line">	<span class="keyword">var</span> sTime = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//开始时间T0</span></div><div class="line">	<span class="comment">//开始变换了</span></div><div class="line">	obj.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> nTime = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//当前时间Tt</span></div><div class="line">		<span class="keyword">var</span> t = nTime -sTime;</div><div class="line">		<span class="keyword">var</span> d = time;</div><div class="line">		<span class="comment">//St = (Tt-T0)/Time*(S-S0)+S0</span></div><div class="line">		<span class="comment">//(nTime-sTime)/time 比例最多为1</span></div><div class="line">		<span class="comment">/*var prop = (nTime-sTime)/time; */</span></div><div class="line">		<span class="keyword">if</span>(t &gt;=d)&#123;</div><div class="line">			t = d;</div><div class="line">			clearInterval(obj.timer);</div><div class="line">			callback &amp;&amp; callback.call(obj);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json)&#123;</div><div class="line">			<span class="keyword">var</span> b = curr[attr];</div><div class="line">			<span class="keyword">var</span> c = end[attr] - b;</div><div class="line">			<span class="keyword">if</span>(attr == <span class="string">"opacity"</span>)&#123;</div><div class="line">				<span class="comment">//var s = prop*(end[attr]-curr[attr])+curr[attr];</span></div><div class="line">				<span class="keyword">var</span> s = Tween[prop](t,b,c,d);</div><div class="line">				obj.style[attr] = s/<span class="number">100</span>;</div><div class="line">				obj.style.filter = <span class="string">"alpha(opacity="</span>+s+<span class="string">")"</span>;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				<span class="comment">//var s = prop*(end[attr]-curr[attr])+curr[attr];</span></div><div class="line">				<span class="keyword">var</span> s = Tween[prop](t,b,c,d);</div><div class="line">				obj.style[attr] = s+<span class="string">"px"</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		</div><div class="line">	&#125;,<span class="number">13</span>);</div><div class="line">	<span class="keyword">var</span> Tween = &#123;</div><div class="line">        <span class="attr">linear</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//匀速</span></div><div class="line">            <span class="keyword">return</span> c*t/d + b;   <span class="comment">//  t/d = prop;</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">easeIn</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//加速曲线</span></div><div class="line">            <span class="keyword">return</span> c*(t/=d)*t + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">easeOut</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//减速曲线</span></div><div class="line">            <span class="keyword">return</span> -c *(t/=d)*(t<span class="number">-2</span>) + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">easeBoth</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//加速减速曲线</span></div><div class="line">            <span class="keyword">if</span> ((t/=d/<span class="number">2</span>) &lt; <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">return</span> c/<span class="number">2</span>*t*t + b;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> -c/<span class="number">2</span> * ((--t)*(t<span class="number">-2</span>) - <span class="number">1</span>) + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">easeInStrong</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//加加速曲线</span></div><div class="line">            <span class="keyword">return</span> c*(t/=d)*t*t*t + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">easeOutStrong</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//减减速曲线</span></div><div class="line">            <span class="keyword">return</span> -c * ((t=t/d<span class="number">-1</span>)*t*t*t - <span class="number">1</span>) + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">easeBothStrong</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//加加速减减速曲线</span></div><div class="line">            <span class="keyword">if</span> ((t/=d/<span class="number">2</span>) &lt; <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">return</span> c/<span class="number">2</span>*t*t*t*t + b;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> -c/<span class="number">2</span> * ((t-=<span class="number">2</span>)*t*t*t - <span class="number">2</span>) + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">elasticIn</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d, a, p</span>)</span>&#123;  <span class="comment">//正弦衰减曲线（弹动渐入）</span></div><div class="line">            <span class="keyword">if</span> (t === <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> b;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> ( (t /= d) == <span class="number">1</span> ) &#123;</div><div class="line">                <span class="keyword">return</span> b+c;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!p) &#123;</div><div class="line">                p=d*<span class="number">0.3</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!a || a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">                a = c;</div><div class="line">                <span class="keyword">var</span> s = p/<span class="number">4</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">var</span> s = p/(<span class="number">2</span>*<span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin (c/a);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> -(a*<span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">10</span>*(t-=<span class="number">1</span>)) * <span class="built_in">Math</span>.sin( (t*d-s)*(<span class="number">2</span>*<span class="built_in">Math</span>.PI)/p )) + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">elasticOut</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d, a, p</span>)</span>&#123;    <span class="comment">//正弦增强曲线（弹动渐出）</span></div><div class="line">            <span class="keyword">if</span> (t === <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> b;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> ( (t /= d) == <span class="number">1</span> ) &#123;</div><div class="line">                <span class="keyword">return</span> b+c;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!p) &#123;</div><div class="line">                p=d*<span class="number">0.3</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!a || a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">                a = c;</div><div class="line">                <span class="keyword">var</span> s = p / <span class="number">4</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">var</span> s = p/(<span class="number">2</span>*<span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin (c/a);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> a*<span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">-10</span>*t) * <span class="built_in">Math</span>.sin( (t*d-s)*(<span class="number">2</span>*<span class="built_in">Math</span>.PI)/p ) + c + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">elasticBoth</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d, a, p</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span> (t === <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> b;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> ( (t /= d/<span class="number">2</span>) == <span class="number">2</span> ) &#123;</div><div class="line">                <span class="keyword">return</span> b+c;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!p) &#123;</div><div class="line">                p = d*(<span class="number">0.3</span>*<span class="number">1.5</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> ( !a || a &lt; <span class="built_in">Math</span>.abs(c) ) &#123;</div><div class="line">                a = c;</div><div class="line">                <span class="keyword">var</span> s = p/<span class="number">4</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">var</span> s = p/(<span class="number">2</span>*<span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin (c/a);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (t &lt; <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">return</span> - <span class="number">0.5</span>*(a*<span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">10</span>*(t-=<span class="number">1</span>)) *</div><div class="line">                        <span class="built_in">Math</span>.sin( (t*d-s)*(<span class="number">2</span>*<span class="built_in">Math</span>.PI)/p )) + b;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> a*<span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">-10</span>*(t-=<span class="number">1</span>)) *</div><div class="line">                    <span class="built_in">Math</span>.sin( (t*d-s)*(<span class="number">2</span>*<span class="built_in">Math</span>.PI)/p )*<span class="number">0.5</span> + c + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">backIn</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d, s</span>)</span>&#123;     <span class="comment">//回退加速（回退渐入）</span></div><div class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> s == <span class="string">'undefined'</span>) &#123;</div><div class="line">               s = <span class="number">1.70158</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> c*(t/=d)*t*((s+<span class="number">1</span>)*t - s) + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">backOut</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d, s</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> s == <span class="string">'undefined'</span>) &#123;</div><div class="line">                s = <span class="number">3.70158</span>;  <span class="comment">//回缩的距离</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> c*((t=t/d<span class="number">-1</span>)*t*((s+<span class="number">1</span>)*t + s) + <span class="number">1</span>) + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">backBoth</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d, s</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> s == <span class="string">'undefined'</span>) &#123;</div><div class="line">                s = <span class="number">1.70158</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> ((t /= d/<span class="number">2</span> ) &lt; <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">return</span> c/<span class="number">2</span>*(t*t*(((s*=(<span class="number">1.525</span>))+<span class="number">1</span>)*t - s)) + b;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> c/<span class="number">2</span>*((t-=<span class="number">2</span>)*t*(((s*=(<span class="number">1.525</span>))+<span class="number">1</span>)*t + s) + <span class="number">2</span>) + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">bounceIn</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;    <span class="comment">//弹球减振（弹球渐出）</span></div><div class="line">            <span class="keyword">return</span> c - Tween[<span class="string">'bounceOut'</span>](d-t, <span class="number">0</span>, c, d) + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">bounceOut</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span> ((t/=d) &lt; (<span class="number">1</span>/<span class="number">2.75</span>)) &#123;</div><div class="line">                <span class="keyword">return</span> c*(<span class="number">7.5625</span>*t*t) + b;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; (<span class="number">2</span>/<span class="number">2.75</span>)) &#123;</div><div class="line">                <span class="keyword">return</span> c*(<span class="number">7.5625</span>*(t-=(<span class="number">1.5</span>/<span class="number">2.75</span>))*t + <span class="number">0.75</span>) + b;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; (<span class="number">2.5</span>/<span class="number">2.75</span>)) &#123;</div><div class="line">                <span class="keyword">return</span> c*(<span class="number">7.5625</span>*(t-=(<span class="number">2.25</span>/<span class="number">2.75</span>))*t + <span class="number">0.9375</span>) + b;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> c*(<span class="number">7.5625</span>*(t-=(<span class="number">2.625</span>/<span class="number">2.75</span>))*t + <span class="number">0.984375</span>) + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">bounceBoth</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span> (t &lt; d/<span class="number">2</span>) &#123;</div><div class="line">                <span class="keyword">return</span> Tween[<span class="string">'bounceIn'</span>](t*<span class="number">2</span>, <span class="number">0</span>, c, d) * <span class="number">0.5</span> + b;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> Tween[<span class="string">'bounceOut'</span>](t*<span class="number">2</span>-d, <span class="number">0</span>, c, d) * <span class="number">0.5</span> + c*<span class="number">0.5</span> + b;</div><div class="line">            &#125;</div><div class="line">    &#125;;</div><div class="line"> &#125;</div><div class="line">	win.animateTime = move;	</div><div class="line"> &#125;)(<span class="built_in">window</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//速度版本</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">obj,json,callback</span>)</span>&#123;</div><div class="line">        clearInterval(obj.timer);</div><div class="line">        obj.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> mark = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json)&#123;</div><div class="line">                <span class="keyword">var</span> cur = <span class="literal">null</span>;</div><div class="line">                <span class="keyword">if</span>(attr == <span class="string">"opacity"</span>)&#123;</div><div class="line">                    cur = getStyle(obj,attr)*<span class="number">100</span>;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="comment">//如果没写 默认填充成0</span></div><div class="line">                    cur = <span class="built_in">parseInt</span>(getStyle(obj,attr))||<span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">var</span> target = json[attr];</div><div class="line">                <span class="keyword">var</span> speed = (target - cur)*<span class="number">0.2</span>;</div><div class="line">                speed = speed&gt;<span class="number">0</span>?<span class="built_in">Math</span>.ceil(speed):<span class="built_in">Math</span>.floor(speed);</div><div class="line">                <span class="keyword">if</span>(cur != target)&#123;</div><div class="line">                    <span class="keyword">if</span>(attr == <span class="string">"opacity"</span>)&#123;</div><div class="line">                        <span class="comment">//IE opacity兼容问题</span></div><div class="line">                        obj.style.filter = <span class="string">"alpha(opacity="</span>+(cur+speed)+<span class="string">")"</span>;</div><div class="line">                        obj.style[attr] = (cur + speed)/<span class="number">100</span>;</div><div class="line">                    &#125;<span class="keyword">else</span>&#123;</div><div class="line">                        obj.style[attr] = cur + speed + <span class="string">"px"</span>;</div><div class="line">                    &#125;</div><div class="line">                    mark = <span class="literal">false</span>;</div><div class="line"></div><div class="line">                &#125;;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(mark)&#123;</div><div class="line">                clearInterval(obj.timer);</div><div class="line">                callback &amp;&amp; callback.call(obj);</div><div class="line">            &#125;</div><div class="line">        &#125;,<span class="number">1000</span>/<span class="number">30</span>);</div><div class="line">    &#125;</div><div class="line">    win.animateSpeed = move;</div><div class="line">&#125;)(<span class="built_in">window</span>);</div><div class="line"></div><div class="line"> 	</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,attr</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> getComputedStyle(obj)[attr]?getComputedStyle(obj)[attr]:obj.currentStyle[attr];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getId</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>更多使用记录，详情 <a href="https://github.com/poetries/Animate" target="_blank" rel="external">https://github.com/poetries/Animate</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、JavaScript运动框架之速度版&quot;&gt;&lt;a href=&quot;#一、JavaScript运动框架之速度版&quot; class=&quot;headerlink&quot; title=&quot;一、JavaScript运动框架之速度版&quot;&gt;&lt;/a&gt;一、JavaScript运动框架之速度版&lt;/h3&gt;&lt;
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="运动框架" scheme="http://blog.poetries.top/tags/%E8%BF%90%E5%8A%A8%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript作用域分析总结</title>
    <link href="http://blog.poetries.top/2017/01/10/js-scope/"/>
    <id>http://blog.poetries.top/2017/01/10/js-scope/</id>
    <published>2017-01-10T04:50:43.000Z</published>
    <updated>2017-02-15T11:25:30.956Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文链接 <a href="http://blog.poetries.top/2017/01/10/js-scope">http://blog.poetries.top/2017/01/10/js-scope</a></p>
</blockquote>
<h4 id="一、JS解析顺序和作用域："><a href="#一、JS解析顺序和作用域：" class="headerlink" title="一、JS解析顺序和作用域："></a>一、JS解析顺序和作用域：</h4><ul>
<li>解析顺序：<ul>
<li>定义（先找<code>var</code>  <code>function</code>）  </li>
<li>执行 ( 在逐步执行 )</li>
<li>注意:如果函数名和<code>var</code>定义的变量相同，<code>var</code>会被函数覆盖</li>
</ul>
</li>
<li>作用域：<ul>
<li>每个<code>script</code>是一个作用域</li>
<li>每个函数<code>{}</code>是一个作用域</li>
<li>程序每执行到一个作用域，都是按照解析顺序解析代码；</li>
<li>作用域链:从内往外找要找函数内的变量；</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h4 id="二、案例分析"><a href="#二、案例分析" class="headerlink" title="二、案例分析"></a>二、案例分析</h4><hr>
<ul>
<li><p><strong>分析前请记住这段话</strong></p>
<ul>
<li>解析顺序：<ul>
<li>定义（先找<code>var</code>  <code>function</code>）</li>
<li>执行 ( 在逐步执行 )</li>
<li>注意:如果函数名和<code>var</code>定义的变量相同，<code>var</code>会被函数覆盖</li>
</ul>
</li>
</ul>
</li>
<li><p>举例1</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">alert( a );</div><div class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">alert( a );</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">20</span>)&#125;;</div><div class="line">alert( a );</div><div class="line"><span class="keyword">var</span> a = <span class="number">30</span>;</div><div class="line">alert( a );</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">40</span>)&#125;;</div><div class="line">alert( a );</div><div class="line"><span class="comment">// 函数块 10 10 30 30</span></div></pre></td></tr></table></figure>
<blockquote>
<p>分析</p>
<ul>
<li>1:找定义 function a(){alert(40)};</li>
<li>2:执行 alert( a ) //函数块<pre><code>a = 10;
alert( a ); // 10
alert( a ); // 10
a = 30;
alert( a ); // 30
alert( a ); // 30
</code></pre></li>
</ul>
</blockquote>
<ul>
<li>举例2</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">a();</div><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert( <span class="number">1</span> );&#125;</div><div class="line">a();</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">2</span>);&#125;</div><div class="line">a();</div><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">3</span>);&#125;</div><div class="line">a();</div><div class="line"><span class="comment">//2 1 1 3</span></div></pre></td></tr></table></figure>
<blockquote>
<p>分析</p>
<ul>
<li>1:找定义<pre><code>function a(){alert(2);}
</code></pre></li>
<li>2:执行<pre><code>a(); //2
a = function(){alert( 1 );}
a(); //1
a(); //1
a = function b(){alert(3);};
a();//3
</code></pre></li>
</ul>
</blockquote>
<ul>
<li>举例3</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> a = <span class="number">0</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">           alert( a );</div><div class="line">           <span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">           alert( a );</div><div class="line">    &#125;</div><div class="line"> alert(a);</div><div class="line">fn();</div></pre></td></tr></table></figure>
<blockquote>
<p>分析</p>
<ul>
<li>1:找定义<pre><code>var a
function fn(){}
</code></pre></li>
<li>2:执行<pre><code>a = 0;
fn(); ===&gt; 1:找定义
           2:执行 alert(a); //undefined
                a = 1;
                alert(a); //1
</code></pre></li>
</ul>
</blockquote>
<ul>
<li>举例4</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">fn()();</div><div class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert( a );</div><div class="line">	<span class="keyword">var</span> a = <span class="number">3</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		alert( a );</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> c;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>分析</p>
<ul>
<li>1:找定义<pre><code>var a
function fn
</code></pre></li>
<li>2:执行<pre><code>fn() ===&gt; 1:找定义 function c
          2:执行  alert(a); //undefined
                a = 3
                return function c
fn()() ==&gt;1:找定义 function c
        2:alert(a);//undefined 3
a = 0;
</code></pre></li>
</ul>
</blockquote>
<ul>
<li>举例5</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">	alert(a);</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		a++;</div><div class="line">		alert(a);</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">return</span> b;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> c = fn();</div><div class="line">c();</div><div class="line">fn()();</div><div class="line">c();</div></pre></td></tr></table></figure>
<blockquote>
<p>分析</p>
<ul>
<li>1:找定义 var a<pre><code>function fn
var c
</code></pre></li>
<li>2:执行  a = 5;<pre><code>c = fn(); === &gt; 1:找定义 var a
                     function b
                2:执行  a = 10;
                     alert(a);  //10
                     return function b(){};
c();=========&gt;  1:找定义
                2:执行 a++; //11
                     alert(a);//11
                     fn()(); //10 11
c() ========&gt;   1:找定义
                2:执行 a++;//11+1;
                     alert(a); //12
</code></pre></li>
</ul>
</blockquote>
<ul>
<li>举例6</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//alert(x);//9:执行弹出x,结果x没定义,错误.</span></div><div class="line">alert(i);<span class="comment">//9:执行弹出i,然而i之前已经定义,只不过没地址,因此是undefiend</span></div><div class="line"><span class="keyword">var</span> i = <span class="number">10</span>;<span class="comment">//1:var i;    10:把常量池中10的地址赋给栈中的i</span></div><div class="line"><span class="keyword">var</span> j = <span class="string">"你好"</span>;<span class="comment">//2:var j;   11:把常量池中 你好 的地址复给栈中的j</span></div><div class="line"><span class="keyword">var</span> k = z = <span class="literal">null</span>;<span class="comment">//3:var k,z;  12:把堆中null的地址赋值给z和k</span></div><div class="line"><span class="keyword">var</span> m = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//4:var m;   5:function匿名函数  13:把匿名函数在堆中的地址赋给栈中的m</span></div><div class="line">    alert(<span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> b = <span class="built_in">document</span>.body;<span class="comment">//6:var b;    14:把堆中document.body对象的地址赋给栈中的b</span></div><div class="line"><span class="keyword">var</span> f = <span class="literal">true</span>;<span class="comment">//7:var f; 15:把常量池中true的地址赋给栈中的变量f</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params"></span>)</span>&#123;<span class="comment">//8:function m;</span></div><div class="line">    alert(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>举例7</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    c = <span class="number">50</span>;<span class="comment">//在局部变量中找不到定义的c 沿着作用域链找到了全局变量的c</span></div><div class="line">    alert(<span class="string">'哈哈哈'</span>);</div><div class="line">    <span class="comment">//var c;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> c = <span class="number">150</span>; <span class="comment">// 函数m()还未执行到 还没被销毁 此时全局c的值c=50</span></div><div class="line">m();</div><div class="line"><span class="keyword">var</span> c = <span class="number">20</span>;<span class="comment">//到这里一步 m()已经执行完了 函数已经销毁了  这里的c还是20</span></div><div class="line">alert(c);<span class="comment">//20</span></div></pre></td></tr></table></figure>
<ul>
<li>举例8</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    c = <span class="number">50</span>;<span class="comment">//在局部变量中找不到定义的c 沿着作用域链找到了全局变量的c</span></div><div class="line">    alert(<span class="string">'哈哈哈'</span>);</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        c = <span class="number">30</span>;</div><div class="line">        alert(<span class="string">'嘻嘻'</span>);</div><div class="line">    &#125;</div><div class="line">    inner();<span class="comment">//c在函数内部找不到定义 所以沿着作用域链找到了全局的c</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> c = <span class="number">20</span>;<span class="comment">//到这里一步 m()还没执行 函数没被销毁  这里的c是30</span></div><div class="line">m();</div><div class="line"></div><div class="line">alert(c);<span class="comment">//30</span></div></pre></td></tr></table></figure>
<h4 id="三、闭包"><a href="#三、闭包" class="headerlink" title="三、闭包"></a>三、闭包</h4><hr>
<h5 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h5><hr>
<ul>
<li>其实是函数嵌套函数</li>
<li>每个函数都是一个独立的作用域</li>
<li>每个都有自己的生命周期</li>
<li>延长局部变量的生命周期</li>
</ul>
<h5 id="3-2-例子"><a href="#3-2-例子" class="headerlink" title="3.2 例子"></a>3.2 例子</h5><hr>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>01<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>02<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>03<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>04<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> liDoms = <span class="built_in">document</span>.getElementById(<span class="string">"list"</span>).getElementsByTagName(<span class="string">"li"</span>);</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;liDoms.length;i++)&#123;</div><div class="line">           (<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">               liDoms[a].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                   alert(a);</div><div class="line">               &#125;</div><div class="line">           &#125;)(i)</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//函数也是一种数据类型 它和 number string boolean object 特殊在可以打括号去执行它</span></div><div class="line"></div><div class="line">        <span class="comment">//函数中的循环</span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> arr = [],i;</div><div class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</div><div class="line">                <span class="comment">// arr[i] = (function fn(a)&#123;</span></div><div class="line">                <span class="comment">//     return a;</span></div><div class="line">                <span class="comment">// &#125;)(i);</span></div><div class="line"></div><div class="line">                arr[i] = fn(i);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> arr;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> a;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> c = test();</div><div class="line">        <span class="comment">//alert(c);</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;c.length;i++)&#123;</div><div class="line">            <span class="keyword">var</span> value = c[i];</div><div class="line">            alert(value);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文链接 &lt;a href=&quot;http://blog.poetries.top/2017/01/10/js-scope&quot;&gt;http://blog.poetries.top/2017/01/10/js-scope&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;一、JS解析顺序和作用域：&quot;&gt;&lt;a href=&quot;#一、JS解析顺序和作用域：&quot; class=&quot;headerlink&quot; title=&quot;一、JS解析顺序和作用域：&quot;&gt;&lt;/a&gt;一、JS解析顺序和作用域：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;解析顺序：&lt;ul&gt;
&lt;li&gt;定义（先找&lt;code&gt;var&lt;/code&gt;  &lt;code&gt;function&lt;/code&gt;）  &lt;/li&gt;
&lt;li&gt;执行 ( 在逐步执行 )&lt;/li&gt;
&lt;li&gt;注意:如果函数名和&lt;code&gt;var&lt;/code&gt;定义的变量相同，&lt;code&gt;var&lt;/code&gt;会被函数覆盖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;作用域：&lt;ul&gt;
&lt;li&gt;每个&lt;code&gt;script&lt;/code&gt;是一个作用域&lt;/li&gt;
&lt;li&gt;每个函数&lt;code&gt;{}&lt;/code&gt;是一个作用域&lt;/li&gt;
&lt;li&gt;程序每执行到一个作用域，都是按照解析顺序解析代码；&lt;/li&gt;
&lt;li&gt;作用域链:从内往外找要找函数内的变量；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="作用域" scheme="http://blog.poetries.top/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>HTML5中的视频音频使用详解</title>
    <link href="http://blog.poetries.top/2016/12/30/video-audio/"/>
    <id>http://blog.poetries.top/2016/12/30/video-audio/</id>
    <published>2016-12-30T06:35:24.000Z</published>
    <updated>2017-02-15T11:25:30.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、video"><a href="#一、video" class="headerlink" title="一、video"></a>一、video</h2><hr>
<h3 id="1-1-video支持视频格式"><a href="#1-1-video支持视频格式" class="headerlink" title="1.1 video支持视频格式"></a>1.1 video支持视频格式</h3><hr>
<ul>
<li>常见的视频格式<ul>
<li>视频的组成部分：画面、音频、编码格式</li>
<li>视频编码：<code>H.264</code>、<code>Theora</code>、<code>VP8(google开源)</code><a id="more"></a></li>
</ul>
</li>
<li><p><code>HTML5</code>支持的视频格式：</p>
<ul>
<li><code>Ogg</code><ul>
<li>带有<code>Theora</code>视频编码+<code>Vorbis</code>音频编码的<code>Ogg</code>文件<ul>
<li>支持的浏览器:<code>F</code>、<code>C</code>、<code>O</code></li>
</ul>
</li>
</ul>
</li>
<li><code>MEPG4</code><ul>
<li>带有<code>H.264</code>视频编码+<code>AAC</code>音频编码的<code>MPEG4</code>文件</li>
<li>支持的浏览器: <code>S</code>、<code>C</code></li>
</ul>
</li>
<li><code>WebM</code><ul>
<li>带有<code>VP8</code>视频编码+<code>Vorbis</code>音频编码的<code>WebM</code>格式</li>
<li>支持的浏览器: <code>I</code>、<code>F</code>、<code>C</code>、<code>O</code></li>
<li>劣势：视频少、转码器几乎没有，不好转码</li>
</ul>
</li>
</ul>
</li>
<li><p>想要<code>video</code>能自动填充慢父div的大小，只要给<code>video</code>标签加上<code>style=&quot;width= 100%; height=100%; object-fit: fill&quot;</code>即可</p>
</li>
</ul>
<h3 id="1-2-标签原型"><a href="#1-2-标签原型" class="headerlink" title="1.2 标签原型"></a>1.2 标签原型</h3><hr>
<ul>
<li>指定一种视频格式，不能播就提示</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"media"</span> <span class="attr">src</span>=<span class="string">"examp.mp4"</span> <span class="attr">width</span>=<span class="string">"500"</span> </span></div><div class="line"><span class="attr">poster</span>=<span class="string">"examp1.jpg"</span> &gt;您的浏览器不支持video<span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>给定多种视频格式，浏览器根据自身支持程度选择播放哪一种</li>
<li>注意：多个<code>source</code>标签，浏览器会从第一个开始识别，如果第一个不被识别，则会继续识别第二个；如果第一个识别成功，则会直接播放第一种格式视频</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> = <span class="string">“controls”</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">”1.mp4”</span> <span class="attr">type</span>=<span class="string">”video/mp4”</span> /&gt;</span>  //src属性写到source标签中，要指定视频的type类型，例如MP4的即为type=“video/mp4”</div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span> = <span class="string">“2.ogg”</span> <span class="attr">type</span>=<span class="string">”video/ogg”</span> /&gt;</span>  //ogg格式</div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">”3.webm”</span> <span class="attr">type</span>=<span class="string">”video/webm”</span> /&gt;</span>   //webm格式</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="1-3-重要的video标签属性"><a href="#1-3-重要的video标签属性" class="headerlink" title="1.3 重要的video标签属性"></a>1.3 重要的video标签属性</h3><hr>
<table>
<thead>
<tr>
<th>属性(常用)</th>
<th>值</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>controls</strong></td>
<td>controls</td>
<td>是否显示播放控件</td>
</tr>
<tr>
<td><strong>autoplay</strong></td>
<td>autoplay</td>
<td>设置是否打开浏览器后自动播放</td>
</tr>
<tr>
<td><strong>width</strong></td>
<td>Pilex（像素）</td>
<td>设置播放器的宽度</td>
</tr>
<tr>
<td><strong>height</strong></td>
<td>Pilex（像素）</td>
<td>设置播放器的高度</td>
</tr>
<tr>
<td><strong>loop</strong></td>
<td>loop</td>
<td>设置视频是否循环播放（即播放完后继续重新播放）</td>
</tr>
<tr>
<td><strong>preload</strong></td>
<td>preload</td>
<td>设置是否等加载完再播放</td>
</tr>
<tr>
<td><strong>src</strong></td>
<td>url</td>
<td>设置要播放视频的url地址</td>
</tr>
<tr>
<td><strong>poster</strong></td>
<td>imgurl</td>
<td>设置播放器初始默认显示图片</td>
</tr>
<tr>
<td><strong>autobuffer</strong></td>
<td>autobuffer</td>
<td>设置为浏览器缓冲方式，不设置autoply才有效</td>
</tr>
</tbody>
</table>
<ul>
<li>API 属性</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>audioTracks</td>
<td>返回表示可用音轨的 AudioTrackList 对象</td>
</tr>
<tr>
<td>buffered</td>
<td>返回表示音频/视频已缓冲部分的 TimeRanges 对象</td>
</tr>
<tr>
<td>controller</td>
<td>返回表示音频/视频当前媒体控制器的 MediaController 对象</td>
</tr>
<tr>
<td>crossOrigin</td>
<td>设置或返回音频/视频的 CORS 设置</td>
</tr>
<tr>
<td>currentSrc</td>
<td>返回当前音频/视频的 URL</td>
</tr>
<tr>
<td>currentTime</td>
<td>设置或返回音频/视频中的当前播放位置（以秒计）</td>
</tr>
<tr>
<td>defaultMuted</td>
<td>设置或返回音频/视频默认是否静音</td>
</tr>
<tr>
<td>defaultPlaybackRate</td>
<td>设置或返回音频/视频的默认播放速度</td>
</tr>
<tr>
<td>duration</td>
<td>返回当前音频/视频的长度（以秒计）</td>
</tr>
<tr>
<td>ended</td>
<td>返回音频/视频的播放是否已结束</td>
</tr>
<tr>
<td>error</td>
<td>返回表示音频/视频错误状态的 MediaError 对象</td>
</tr>
<tr>
<td>mediaGroup</td>
<td>设置或返回音频/视频所属的组合（用于连接多个音频/视频元素）</td>
</tr>
<tr>
<td>muted</td>
<td>设置或返回音频/视频是否静音</td>
</tr>
<tr>
<td>networkState</td>
<td>返回音频/视频的当前网络状态</td>
</tr>
<tr>
<td>paused</td>
<td>设置或返回音频/视频是否暂停</td>
</tr>
<tr>
<td>playbackRate</td>
<td>设置或返回音频/视频播放的速度</td>
</tr>
<tr>
<td>played</td>
<td>返回表示音频/视频已播放部分的 TimeRanges 对象</td>
</tr>
<tr>
<td>readyState</td>
<td>返回音频/视频当前的就绪状态</td>
</tr>
<tr>
<td>seekable</td>
<td>返回表示音频/视频可寻址部分的 TimeRanges 对象</td>
</tr>
<tr>
<td>seeking</td>
<td>返回用户是否正在音频/视频中进行查找</td>
</tr>
<tr>
<td>startDate</td>
<td>返回表示当前时间偏移的 Date 对象</td>
</tr>
<tr>
<td>textTracks</td>
<td>返回表示可用文本轨道的 TextTrackList 对象</td>
</tr>
<tr>
<td>videoTracks</td>
<td>返回表示可用视频轨道的 VideoTrackList 对象</td>
</tr>
<tr>
<td>volume</td>
<td>设置或返回音频/视频的音量</td>
</tr>
</tbody>
</table>
<ul>
<li><p>常用API属性</p>
<ul>
<li><code>duration</code>：返回当前音频/视频的长度（以秒计） </li>
<li><code>paused</code>：设置或返回音频/视频是否暂停 </li>
<li><code>currentTime</code>：设置或返回音频/视频中的当前播放位置（以秒计）</li>
<li><code>ended</code>：返回音频/视频的播放是否已结束</li>
</ul>
<h3 id="1-4-Video-API"><a href="#1-4-Video-API" class="headerlink" title="1.4 Video  API"></a>1.4 Video  API</h3></li>
</ul>
<hr>
<h4 id="1-4-1-Video-方法"><a href="#1-4-1-Video-方法" class="headerlink" title="1.4.1 Video 方法"></a>1.4.1 Video 方法</h4><hr>
<table>
<thead>
<tr>
<th>API</th>
<th>事件说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>play</strong></td>
<td>video.play();    播放视频</td>
</tr>
<tr>
<td><strong>pause</strong></td>
<td>video.pause();  暂停播放视频</td>
</tr>
<tr>
<td><strong>load</strong></td>
<td>video.load();   将全部属性回复默认值，视频恢复重新开始状态</td>
</tr>
<tr>
<td><strong>canPlayType</strong></td>
<td>var support = videoid.canPlayType(‘video/mp4′);   <br><br>判断浏览器是否支持当前类型的视频格式<br><br>返回值：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;空字符串：不支持Maybe：可能支持Probably：完全支持</td>
</tr>
</tbody>
</table>
<ul>
<li><p>常用方法</p>
<ul>
<li><code>play()</code>：开始播放音频/视频 </li>
<li><code>pause()</code>：暂停当前播放的音频/视频</li>
</ul>
</li>
</ul>
<h4 id="1-4-2网络状态"><a href="#1-4-2网络状态" class="headerlink" title="1.4.2网络状态"></a>1.4.2网络状态</h4><hr>
<ul>
<li><p>获取video对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Media = <span class="built_in">document</span>.getElementById(<span class="string">"media"</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><strong>Media.currentSrc</strong>; <ul>
<li>返回当前资源的URL</li>
</ul>
</li>
<li><strong>Media.src = value</strong>; <ul>
<li>返回或设置当前资源的URL</li>
</ul>
</li>
<li><strong>Media.canPlayType(type)</strong>; <ul>
<li>是否能播放某种格式的资源</li>
</ul>
</li>
<li><strong>Media.networkState</strong>; <ul>
<li>0.此元素未初始化 </li>
<li>1.正常但没有使用网络 </li>
<li>2.正在下载数据 </li>
<li>3.没有找到资源</li>
</ul>
</li>
<li><strong>Media.load()</strong>; <ul>
<li>重新加载src指定的资源</li>
</ul>
</li>
<li><strong>Media.buffered</strong>; <ul>
<li>返回已缓冲区域，TimeRanges</li>
</ul>
</li>
<li><strong>Media.preload</strong>; <ul>
<li>none:不预载 </li>
<li>metadata:预载资源信息 </li>
<li>auto:</li>
</ul>
</li>
</ul>
<h4 id="1-4-3-准备状态"><a href="#1-4-3-准备状态" class="headerlink" title="1.4.3 准备状态"></a>1.4.3 准备状态</h4><hr>
<ul>
<li><strong>Media.readyState</strong></li>
<li><strong>Media.seeking</strong>; <ul>
<li>是否正在seeking</li>
</ul>
</li>
</ul>
<h4 id="1-4-4-回放状态"><a href="#1-4-4-回放状态" class="headerlink" title="1.4.4 回放状态"></a>1.4.4 回放状态</h4><hr>
<ul>
<li><strong>Media.currentTime = value</strong>; <ul>
<li>当前播放的位置，赋值可改变位置</li>
</ul>
</li>
<li><strong>Media.startTime;</strong> <ul>
<li>一般为0，如果为流媒体或者不从0开始的资源，则不为0</li>
</ul>
</li>
<li><strong>Media.duration</strong>; <ul>
<li>当前资源长度 流返回无限</li>
</ul>
</li>
<li><strong>Media.paused</strong>; <ul>
<li>是否暂停</li>
</ul>
</li>
<li><strong>Media.defaultPlaybackRate = value</strong>;<ul>
<li>默认的回放速度，可以设置</li>
</ul>
</li>
<li><strong>Media.playbackRate = value</strong>;<ul>
<li>当前播放速度，设置后马上改变</li>
</ul>
</li>
<li><strong>Media.played</strong>; <ul>
<li>返回已经播放的区域，TimeRanges，关于此对象见下文</li>
</ul>
</li>
<li><strong>Media.seekable</strong>; <ul>
<li>返回可以seek的区域 TimeRanges</li>
</ul>
</li>
<li><strong>Media.ended</strong>; <ul>
<li>是否结束</li>
</ul>
</li>
<li><strong>Media.autoPlay</strong>; <ul>
<li>是否自动播放</li>
</ul>
</li>
<li><strong>Media.loop</strong>; <ul>
<li>是否循环播放</li>
</ul>
</li>
<li><strong>Media.play()</strong>; <ul>
<li>播放</li>
</ul>
</li>
<li><strong>Media.pause()</strong>; <ul>
<li>暂停</li>
</ul>
</li>
</ul>
<h4 id="1-4-5-视频控制"><a href="#1-4-5-视频控制" class="headerlink" title="1.4.5 视频控制"></a>1.4.5 视频控制</h4><hr>
<ul>
<li>Media.controls;//是否有默认控制条</li>
<li>Media.volume = value; //音量</li>
<li>Media.muted = value; //静音</li>
<li>TimeRanges(区域)对象</li>
<li>TimeRanges.length; //区域段数</li>
<li>TimeRanges.start(index) //第index段区域的开始位置</li>
<li>TimeRanges.end(index) //第index段区域的结束位置</li>
</ul>
<h4 id="1-4-6-相关事件"><a href="#1-4-6-相关事件" class="headerlink" title="1.4.6 相关事件"></a>1.4.6 相关事件</h4><hr>
<ul>
<li>首先绑定事件的话可以通过js中的addEventListener方法来绑定事件</li>
</ul>
<table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>loadstart</strong></td>
<td>客户端开始请求数据</td>
</tr>
<tr>
<td><strong>progress</strong></td>
<td>客户端正在请求数据</td>
</tr>
<tr>
<td><strong>suspend</strong></td>
<td>延迟下载</td>
</tr>
<tr>
<td><strong>abort</strong></td>
<td>客户端主动终止下载（不是因为错误引起）</td>
</tr>
<tr>
<td><strong>loadstart</strong></td>
<td>客户端开始请求数据</td>
</tr>
<tr>
<td><strong>progress</strong></td>
<td>客户端正在请求数据</td>
</tr>
<tr>
<td><strong>error</strong></td>
<td>请求数据时遇到错误</td>
</tr>
<tr>
<td><strong>stalled</strong></td>
<td>网速失速</td>
</tr>
<tr>
<td><strong>play</strong></td>
<td>play()和autoplay开始播放时触发</td>
</tr>
<tr>
<td><strong>pause</strong></td>
<td>pause()触发</td>
</tr>
<tr>
<td><strong>loadedmetadata</strong></td>
<td>成功获取资源长度</td>
</tr>
<tr>
<td><strong>loadeddata</strong></td>
<td>-</td>
</tr>
<tr>
<td><strong>waiting</strong></td>
<td>等待数据，并非错误</td>
</tr>
<tr>
<td><strong>playing</strong></td>
<td>开始回放</td>
</tr>
<tr>
<td><strong>canplay</strong></td>
<td>可以播放，但中途可能因为加载而暂停</td>
</tr>
<tr>
<td><strong>canplaythrough</strong></td>
<td>可以播放，歌曲全部加载完毕</td>
</tr>
<tr>
<td><strong>seeking</strong></td>
<td>寻找中</td>
</tr>
<tr>
<td><strong>seeked</strong></td>
<td>寻找完毕</td>
</tr>
<tr>
<td><strong>timeupdate</strong></td>
<td>播放时间改变</td>
</tr>
<tr>
<td><strong>ended</strong></td>
<td>播放结束</td>
</tr>
<tr>
<td><strong>ratechange</strong></td>
<td>播放速率改变</td>
</tr>
<tr>
<td><strong>durationchange</strong></td>
<td>资源长度改变</td>
</tr>
<tr>
<td><strong>volumechange</strong></td>
<td>音量改变</td>
</tr>
</tbody>
</table>
<ul>
<li>常用事件<ul>
<li><code>oncanplay</code>：当文件就绪可以开始播放时运行的脚本（缓冲已足够开始时）。</li>
<li><code>ontimeupdate</code>： 当播放位置改变时（比如当用户快进到媒介中一个不同的位置时）运行的脚本。 </li>
<li><code>onended</code>：当媒介已到达结尾时运行的脚本（可发送类似“感谢观看”之类的消息）。</li>
</ul>
</li>
</ul>
<h4 id="1-4-7-其他"><a href="#1-4-7-其他" class="headerlink" title="1.4.7 其他"></a>1.4.7 其他</h4><ul>
<li><p>全屏:   </p>
<ul>
<li><code>element.webkitRequestFullScreen();</code>( webkit)</li>
<li><code>element.mozRequestFullScreen();</code> (Firefox )</li>
<li><code>element.requestFullscreen();</code> (W3C )</li>
</ul>
</li>
<li><p>退出全屏：</p>
<ul>
<li><code>document.webkitCancelFullScreen()</code>; (webkit )</li>
<li><code>document.mozCancelFullScreen()</code>;  (Firefox)</li>
<li><code>document.exitFullscreen();</code> (W3C)</li>
</ul>
</li>
</ul>
<h2 id="二、audio"><a href="#二、audio" class="headerlink" title="二、audio"></a>二、audio</h2><hr>
<h3 id="2-1-audio格式"><a href="#2-1-audio格式" class="headerlink" title="2.1 audio格式"></a>2.1 audio格式</h3><hr>
<ul>
<li><p>常见的音频格式</p>
<ul>
<li>音频编码：<code>ACC</code>、<code>MP3</code>、<code>Vorbis</code></li>
</ul>
</li>
<li><p>HTML5支持的音频格式：</p>
<ul>
<li><code>Ogg</code> 免费    支持的浏览器:<code>C</code>、<code>F</code>、<code>O</code></li>
<li><code>MP3</code> 收费    支持的浏览器: <code>I</code>、<code>C</code>、<code>S</code></li>
<li><code>Wav</code> 收费    支持的浏览器: <code>F</code>、<code>O</code>、<code>S</code></li>
</ul>
</li>
</ul>
<h3 id="2-2-audio标签中的一些常用属性"><a href="#2-2-audio标签中的一些常用属性" class="headerlink" title="2.2 audio标签中的一些常用属性"></a>2.2 audio标签中的一些常用属性</h3><table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>注释</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>src</strong></td>
<td>url</td>
<td>播放的音乐的url地址（火狐只支持ogg的音乐，而IE9只支持MP3格式的音乐。chrome貌似全支持）</td>
</tr>
<tr>
<td><strong>preload</strong></td>
<td>preload</td>
<td>预加载（在页面被加载时进行加载或者说缓冲音频），如果使用了autoplay的话那么该属性失效。</td>
</tr>
<tr>
<td><strong>loop</strong></td>
<td>loop</td>
<td>循环播放</td>
</tr>
<tr>
<td><strong>controls</strong></td>
<td>controls</td>
<td>是否显示默认控制条（控制按钮）</td>
</tr>
<tr>
<td><strong>autoplay</strong></td>
<td>autoplay</td>
<td>自动播放</td>
</tr>
</tbody>
</table>
<ul>
<li>对于音乐格式的支持</li>
</ul>
<table>
<thead>
<tr>
<th>音频格式</th>
<th>Chrome</th>
<th>Firefox</th>
<th>IE9</th>
<th>Opera</th>
<th>Safari</th>
</tr>
</thead>
<tbody>
<tr>
<td>OGG</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>不支持</td>
<td>不支持</td>
</tr>
<tr>
<td>MP3</td>
<td>支持</td>
<td>不支持</td>
<td>支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>WAV</td>
<td>不支持</td>
<td>支持</td>
<td>不支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody>
</table>
<ul>
<li>audio可通过new来创建。也可以通过用document来获取</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//通过new关键字来创建Audio对象</span></div><div class="line"><span class="keyword">var</span> Music = <span class="keyword">new</span> Audio(<span class="string">"test.mp3"</span>);</div><div class="line"></div><div class="line"><span class="comment">//通过document来获取已经存在的Audio对象</span></div><div class="line"><span class="keyword">var</span> Music = <span class="built_in">document</span>.getElementById(<span class="string">"audio"</span>);</div><div class="line"><span class="comment">//当然这里也可以使用document.getElementsByClassName('className')等其他的方法来获取。</span></div></pre></td></tr></table></figure>
<h3 id="2-3-api所提供的对audio标签操作的一些属性和方法"><a href="#2-3-api所提供的对audio标签操作的一些属性和方法" class="headerlink" title="2.3 api所提供的对audio标签操作的一些属性和方法"></a>2.3 api所提供的对audio标签操作的一些属性和方法</h3><hr>
<table>
<thead>
<tr>
<th>属性</th>
<th>注释</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>duration</strong></td>
<td>获取媒体文件的总时长，以s为单位，如果无法获取，返回NaN</td>
</tr>
<tr>
<td><strong>paused</strong></td>
<td>如果媒体文件被暂停，那么paused属性返回true，反之则返回false</td>
</tr>
<tr>
<td><strong>ended</strong></td>
<td>如果媒体文件播放完毕返回true</td>
</tr>
<tr>
<td><strong>muted</strong></td>
<td>用来获取或设置静音状态。值为boolean</td>
</tr>
<tr>
<td><strong>volume</strong></td>
<td>控制音量的属性值为0-1;0为音量最小，1为音量最大</td>
</tr>
<tr>
<td><strong>startTime</strong></td>
<td>返回起始播放时间</td>
</tr>
<tr>
<td><strong>error</strong></td>
<td>返回错误代码，为uull的时候为正常。否则可以通过Music.error.code来获取</td>
</tr>
<tr>
<td><strong>currentTime</strong></td>
<td>用来获取或控制当前播放的时间，单位为s。</td>
</tr>
<tr>
<td><strong>currentSrc</strong></td>
<td>以字符串形式返回正在播放或已加载的文件</td>
</tr>
</tbody>
</table>
<h3 id="2-4-常用的控制用的函数"><a href="#2-4-常用的控制用的函数" class="headerlink" title="2.4 常用的控制用的函数"></a>2.4 常用的控制用的函数</h3><hr>
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>load()</strong></td>
<td>加载音频、视频软件</td>
</tr>
<tr>
<td><strong>play()</strong></td>
<td>加载并播放音频、视频文件或重新播放暂停的的音频、视频</td>
</tr>
<tr>
<td><strong>pause()</strong></td>
<td>暂停出于播放状态的音频、视频文件</td>
</tr>
<tr>
<td><strong>canPlayType(obj)</strong></td>
<td>测试是否支持给定的Mini类型的文件</td>
</tr>
</tbody>
</table>
<h3 id="2-5-audio标签API中的常用事件"><a href="#2-5-audio标签API中的常用事件" class="headerlink" title="2.5 audio标签API中的常用事件"></a>2.5 audio标签API中的常用事件</h3><hr>
<ul>
<li>首先绑定事件的话可以通过js中的addEventListener方法来绑定事件</li>
</ul>
<table>
<thead>
<tr>
<th>事件名称</th>
<th>事件作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>loadstart</strong></td>
<td>客户端开始请求数据</td>
</tr>
<tr>
<td><strong>progress</strong></td>
<td>客户端正在请求数据（或者说正在缓冲）</td>
</tr>
<tr>
<td><strong>play</strong></td>
<td>play()和autoplay播放时</td>
</tr>
<tr>
<td><strong>pause</strong></td>
<td>pause()方法促发时</td>
</tr>
<tr>
<td><strong>ended</strong></td>
<td>当前播放结束</td>
</tr>
<tr>
<td><strong>timeupdate</strong></td>
<td>当前播放时间发生改变的时候。播放中常用的时间处理</td>
</tr>
<tr>
<td><strong>canplaythrough</strong></td>
<td>歌曲已经载入完全完成</td>
</tr>
<tr>
<td><strong>canplay</strong></td>
<td>缓冲至目前可播放状态。</td>
</tr>
</tbody>
</table>
<p>其实<code>video</code>的<code>api</code>和<code>audio</code>几乎一致。稍稍有点不同。所以基本上会了一个其他的也就都会了</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、video&quot;&gt;&lt;a href=&quot;#一、video&quot; class=&quot;headerlink&quot; title=&quot;一、video&quot;&gt;&lt;/a&gt;一、video&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;1-1-video支持视频格式&quot;&gt;&lt;a href=&quot;#1-1-video支持视频格式&quot; class=&quot;headerlink&quot; title=&quot;1.1 video支持视频格式&quot;&gt;&lt;/a&gt;1.1 video支持视频格式&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;常见的视频格式&lt;ul&gt;
&lt;li&gt;视频的组成部分：画面、音频、编码格式&lt;/li&gt;
&lt;li&gt;视频编码：&lt;code&gt;H.264&lt;/code&gt;、&lt;code&gt;Theora&lt;/code&gt;、&lt;code&gt;VP8(google开源)&lt;/code&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="HTML5" scheme="http://blog.poetries.top/tags/HTML5/"/>
    
      <category term="video" scheme="http://blog.poetries.top/tags/video/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript及jQuery中的各种宽高属性图解</title>
    <link href="http://blog.poetries.top/2016/12/13/js-props/"/>
    <id>http://blog.poetries.top/2016/12/13/js-props/</id>
    <published>2016-12-13T15:35:24.000Z</published>
    <updated>2017-02-15T11:25:30.956Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文链接 <a href="http://blog.poetries.top/2016/12/13/js-props">http://blog.poetries.top/2016/12/13/js-props</a><br>声明：本文根据慕课网学习视频整理</p>
</blockquote>
<p>强烈建议打开控制台自己动手练习一遍，这样印象才会深刻</p>
<h2 id="第一部分-JavaScript中的宽高属性"><a href="#第一部分-JavaScript中的宽高属性" class="headerlink" title="第一部分 JavaScript中的宽高属性"></a>第一部分 JavaScript中的宽高属性</h2><hr>
<h3 id="一、与window相关的宽高属性"><a href="#一、与window相关的宽高属性" class="headerlink" title="一、与window相关的宽高属性"></a>一、与window相关的宽高属性</h3><hr>
<h4 id="1-1-window-location和document-location"><a href="#1-1-window-location和document-location" class="headerlink" title="1.1 window.location和document.location"></a>1.1 window.location和document.location</h4><hr>
<ul>
<li><code>window</code>对象的<code>location</code>属性引用的是<code>location</code>对象，表示该窗口中当前显示文档的<code>URL</code></li>
<li><code>document</code>的对象的<code>location</code>属性也是引用<code>location</code>对象</li>
<li>所以 <code>window.location === document.location</code>    <code>//true</code><a id="more"></a>
<h4 id="1-2-window-screen"><a href="#1-2-window-screen" class="headerlink" title="1.2 window.screen"></a>1.2 window.screen</h4></li>
</ul>
<hr>
<ul>
<li><code>window.screen</code>包含有关用户屏幕的信息。它包括：<ul>
<li><code>window.screen.width</code></li>
<li><code>window.screen.height</code></li>
<li><code>window.screen.availHeight</code></li>
<li><code>window.screen.availWidth</code></li>
<li><code>window.screenTop</code></li>
<li><code>window.screenLeft</code></li>
</ul>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-d7979b36ca991d9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="window.screen"></p>
<p><strong>1.3 与window相关的宽高</strong></p>
<ul>
<li><code>window.innerWidth</code>   内部的宽度</li>
<li><code>window.innerHeight</code>   内部的高度</li>
<li><code>window.outWidth</code>   外部的宽度</li>
<li><code>window.outHeight</code>   外部的高度</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-7c90cc88a3355d8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="与window相关的宽高"></p>
<h3 id="二、与document相关的宽高属性"><a href="#二、与document相关的宽高属性" class="headerlink" title="二、与document相关的宽高属性"></a>二、与document相关的宽高属性</h3><hr>
<h4 id="2-1与client相关的宽高"><a href="#2-1与client相关的宽高" class="headerlink" title="2.1与client相关的宽高"></a>2.1与client相关的宽高</h4><hr>
<ul>
<li><code>document.body.clientWidth</code> 元素宽度（可视内容区+内边距）</li>
<li><code>document.body.clientHeight</code>元素高度（可视内容区+内边距）</li>
</ul>
<p>该属性指的是元素的可视部分宽度和高度，即<code>padding+content</code><br>如果没有滚动条，即为元素设定的宽度和高度<br>如果出现滚动条，滚动条会遮盖元素的宽高，那么该属性就是其本来宽高减去滚动条的宽高</p>
<p>example1：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">body&#123; </div><div class="line">    border: 20px solid #000; </div><div class="line">    margin: 10px; </div><div class="line">    padding: 40px; </div><div class="line">    background: #eee; </div><div class="line">    height: 350px; </div><div class="line">    width: 500px; </div><div class="line">    overflow: scroll; </div><div class="line">&#125; </div><div class="line">console.log(document.body.clientWidth);  // 350+padding(80) = 430</div><div class="line">console.log(document.body.clientHeight);  // 500 + padding(80) = 580</div></pre></td></tr></table></figure>
<p>example2: 在div中添加文字， 指导出现滚动条</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#exp2 &#123;</div><div class="line">	width:200px;</div><div class="line">	height:200px;</div><div class="line">	background:red;</div><div class="line">	border:1px solid #000;</div><div class="line">	overflow:auto;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var test = document.getElementById("exp2");</div><div class="line"></div><div class="line">console,log(test.clientHeight); // 200</div><div class="line">console.log(test.clientWidth); //</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-5f4a093d6f95b47e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="window7下test.clientWidth"></p>
<ul>
<li><p><strong>小结clientWidth和clientHeight</strong></p>
<ul>
<li>无<code>padding</code>无滚动 ： <code>clientWidth</code> = 盒子的<code>width</code></li>
<li>有<code>padding</code>无滚动 ： <code>clientWidth</code> = 盒子的<code>width</code> + 盒子的<code>padding * 2</code></li>
<li>有<code>padding</code>有滚动 ： <code>clientWidth</code> = 盒子和<code>width</code> + 盒子的<code>padding * 2</code>- 滚动轴宽度</li>
</ul>
</li>
</ul>
<ul>
<li><code>document.body.clientLeft</code></li>
<li><code>document.body.clientTop</code></li>
</ul>
<p>这两个返回的是元素周围边框的厚度，如果不指定一个边框或者不定位该元素，它的值就是0</p>
<p>例：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">body&#123; </div><div class="line">    border: 20px solid #000; </div><div class="line">    margin: 10px; </div><div class="line">    padding: 40px; </div><div class="line">    background: #eee; </div><div class="line">    height: 350px; </div><div class="line">    width: 500px; </div><div class="line">    overflow: scroll; </div><div class="line">&#125; </div><div class="line">console.log(document.body.clientLeft);  // 20</div><div class="line">console.log(document.body.clientTop);  // 20</div></pre></td></tr></table></figure>
<p><strong>小结clientLeft和clientTop</strong></p>
<ul>
<li>这一对属性是用来读取元素的<code>border</code>的宽度和高度的<ul>
<li><code>clientTop = border-top</code></li>
<li><code>clientLeft = border-left</code></li>
</ul>
</li>
</ul>
<h4 id="2-2-与offset相关的宽高"><a href="#2-2-与offset相关的宽高" class="headerlink" title="2.2 与offset相关的宽高"></a>2.2 与offset相关的宽高</h4><hr>
<ul>
<li><strong>document.body.offsetWidth（元素的border+padding+content的宽度）</strong></li>
<li><strong>document.body.offsetHeight（元素的border+padding+content的高度）</strong></li>
</ul>
<p>该属性和其内部的内容是否超出元素大小无关，只和本来设定的border以及width和height有关</p>
<p>例：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">body&#123; </div><div class="line">    border: 20px solid #000; </div><div class="line">    margin: 10px; </div><div class="line">    padding: 40px; </div><div class="line">    background: #eee; </div><div class="line">    height: 350px; </div><div class="line">    width: 500px; </div><div class="line">    overflow: scroll; </div><div class="line">&#125; </div><div class="line">console.log(document.body.offsetWidth);  // 470 = padding*2 + 350 + border*2</div><div class="line">console.log(document.body.offsetHeight);  // 620 = padding*2 + 500 + border*2</div></pre></td></tr></table></figure>
<p><strong>小结offsetWidth和offsetHeight</strong></p>
<ul>
<li>无<code>padding</code>无滚动无<code>border</code><ul>
<li>offsetWidth = clientWidth = 盒子的宽度</li>
</ul>
</li>
<li>有<code>padding</code>无滚动有<code>border</code><ul>
<li>offsetWidth = 盒子的宽度 + 盒子padding<em>2 + 盒子边框</em>2 = clientWidth + 边框宽度*2</li>
</ul>
</li>
<li>有<code>padding</code>有滚动，且滚动是显示的，有<code>border</code><ul>
<li>offsetWidth = 盒子宽度 + 盒子padding<em>2 + 盒子边框</em>2 = clientWidth + 滚动轴宽度 + 边框宽度*2</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><strong>document.offsetLeft </strong></li>
<li><strong>document.offsetTop </strong></li>
</ul>
<p>了解这两个属性我们必须先了解它，什么是<code>offsetParent</code></p>
<ul>
<li>如果当前元素的父级元素没有进行<code>CSS</code>定位（<code>position</code>为<code>absolute</code>或<code>relative</code>）,<code>offsetParent</code>为<code>body.</code></li>
<li>假如当前元素的父级元素中有<code>CSS</code>定位，<code>offsetParent</code>取最近的那个父级元素</li>
</ul>
<p><strong>offsetLeft的兼容性问题：</strong></p>
<ul>
<li><p>在<code>IE6/7</code>中</p>
<ul>
<li><code>offsetLeft</code> = offsetParent的padding-left + 当前元素的margin-left</li>
</ul>
</li>
<li><p>在<code>IE8/9/10</code>以及<code>chrome</code>中</p>
<ul>
<li><code>offsetLeft</code> = offsetParent的margin-left + offsetParent的border宽度 + offsetParent的padding-left + 当前元素的margin-left</li>
</ul>
</li>
<li><p>在<code>FireFox</code>中</p>
<ul>
<li><code>offsetLeft</code> = offsetParent的margin-left + 当前元素的margin-left + offsetParent的padding-left</li>
</ul>
</li>
</ul>
<p>例：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">body&#123; </div><div class="line">    border: 20px solid #000; </div><div class="line">    margin: 10px; </div><div class="line">    padding: 40px; </div><div class="line">    background: #eee; </div><div class="line">    height: 350px; </div><div class="line">    width: 500px; </div><div class="line">    overflow: scroll; </div><div class="line">&#125; </div><div class="line"></div><div class="line">#exp &#123;</div><div class="line">   width:400px;</div><div class="line">   height:200px;</div><div class="line">   padding:20px;</div><div class="line">   margin:10px;</div><div class="line">   background:red;</div><div class="line">   border:20px solid #000;</div><div class="line">   overflow:auto;</div><div class="line">&#125;</div><div class="line">var div = document.getElementById("exp");</div></pre></td></tr></table></figure>
<ul>
<li><p>在IE8/9/10以及chrome中：</p>
<ul>
<li>div.offsetLeft  = 本身的margin10 + 父级元素的padding40 + margin10 + border20 = 80</li>
<li>div.offsetTop = 本身的margin10 + 父级元素的padding40 + margin10 + border20 = 80</li>
</ul>
</li>
<li><p>在FireFox：（相比chrome中少了border）</p>
<ul>
<li>div.offsetLeft  = 本身的margin10 + 父级元素的padding40 + margin10 = 60</li>
<li>div.offsetTop = 本身的margin10 + 父级元素的padding40 + margin10 = 60</li>
</ul>
</li>
<li><p>在IE6/7中：（相比在FireFox，不但少了border还少了父级元素的margin）</p>
<ul>
<li><code>div.offsetLeft</code>  = 本身的<code>margin10</code> + 父级元素的<code>padding40</code> = 50</li>
<li><code>div.offsetTop</code> = 本身的<code>margin10</code> + 父级元素的<code>padding40</code> = 50</li>
</ul>
</li>
</ul>
<h4 id="2-3与scroll相关的宽高-实际项目中用的最多"><a href="#2-3与scroll相关的宽高-实际项目中用的最多" class="headerlink" title="2.3与scroll相关的宽高 (实际项目中用的最多)"></a>2.3与scroll相关的宽高 (实际项目中用的最多)</h4><hr>
<ul>
<li><strong>document.body.scrollWidth</strong></li>
<li><strong>document.body.scrollHeight</strong></li>
</ul>
<p>document.body的scrollWidth和scrollHeight与div的scrollWidth和scrollHeight是有区别的</p>
<p>例：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">body&#123; </div><div class="line">    border: 20px solid #000; </div><div class="line">    margin: 10px; </div><div class="line">    padding: 40px; </div><div class="line">    background: #eee; </div><div class="line">    height: 350px; </div><div class="line">    width: 500px; </div><div class="line">    overflow: scroll; </div><div class="line">&#125;</div><div class="line"></div><div class="line">document.body.scrollHeight; // </div><div class="line">document.body.scrollWidth; //</div></pre></td></tr></table></figure>
<ul>
<li><p>当给定宽高小于浏览器窗口的宽高</p>
<ul>
<li>scrollWidth = 通常是浏览器窗口的宽度</li>
<li>scrollHeight = 通常是浏览器窗口的高度</li>
</ul>
</li>
<li><p>当给定宽高大于浏览器窗口的宽高，且内容小于给定宽高的时候</p>
<ul>
<li>scrollWidth = 给定宽度 + 其所有的padding + margin + border</li>
<li>scrollHeight = 给定高度 + 其所有的padding + margin + border</li>
</ul>
</li>
<li><p>当给定宽高大于浏览器窗口宽高，且内容大于给定宽高</p>
<ul>
<li>scrollWidth = 内容宽度 + 其所有的padding + margin + border</li>
<li>scrollHeight = 内容高度 + 其所有的padding + margin + border</li>
</ul>
</li>
</ul>
<p><strong>在某div中的scrollWidth和scrollHeight</strong></p>
<ul>
<li>无滚动轴时：<ul>
<li>scrollWidth = clientWidth = 盒子宽度 + 盒子padding*2 </li>
</ul>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-1370209704289653.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="无滚动轴时"></p>
<ul>
<li>有滚动轴时：<ul>
<li>scrollWidth = 实际内容的宽度 + padding*2</li>
<li>scrollHeight = 实际内容的高度 + padding*2</li>
</ul>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-f2e4e49734f8ea46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="有滚动轴时"></p>
<ul>
<li><strong>document.body.scrollLeft</strong></li>
<li><strong>document.body.scrollTop</strong></li>
</ul>
<p>与前面不同的是，这对属性是可读写的，指的是当元素其中的超出其宽高的时候，元素被卷起来的高度和宽度</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#exp &#123;</div><div class="line">   width:400px;</div><div class="line">   height:200px;</div><div class="line">   padding:20px;</div><div class="line">   margin:10px;</div><div class="line">   background:red;</div><div class="line">   border:20px solid #000;</div><div class="line">   overflow-y:scroll;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var mydiv = document.getElementById("exp");</div><div class="line"></div><div class="line">mydiv.scrollTop ;  //默认情况下是0 </div><div class="line">mydiv.scrollLeft ; //默认情况下是0 </div><div class="line"></div><div class="line">//可以改写它</div><div class="line"></div><div class="line">mydiv.scrollTop = 20;</div><div class="line">console.log(mydiv.scrollTop)</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-8a31ecd4fd0a59a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="scrollTop和scrollLeft  "></p>
<p><strong>obj.style.width和obj.style.height</strong></p>
<p>对于一个<code>DOM</code>元素，它的<code>style</code>属性返回的是一个对象，这个对象的任意一个属性是可读写的，<code>style.width</code>等于<code>css</code>属性中的宽度。<code>style.height</code>等于<code>css</code>属性中的高度</p>
<h4 id="2-4-documentElement和body的关系"><a href="#2-4-documentElement和body的关系" class="headerlink" title="2.4 documentElement和body的关系"></a>2.4 documentElement和body的关系</h4><hr>
<p>是父子级的关系</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">body&#123; </div><div class="line">    border: 20px solid #000; </div><div class="line">    margin: 10px; </div><div class="line">    padding: 40px; </div><div class="line">    background: #eee; </div><div class="line">    height: 350px; </div><div class="line">    width: 500px; </div><div class="line">    overflow: scroll; </div><div class="line">&#125;</div><div class="line"></div><div class="line">#exp &#123;</div><div class="line">   width:400px;</div><div class="line">   height:200px;</div><div class="line">   padding:20px;</div><div class="line">   margin:10px;</div><div class="line">   background:red;</div><div class="line">   border:20px solid #000;</div><div class="line">   overflow-y:scroll;</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(document); //document</div><div class="line">console.log(document.documentElement); //html</div><div class="line">console.log(document.body); //body</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-a0840d36969a6ca9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<ul>
<li>兼容问题推荐使用 获取浏览器窗口可视区域大小</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.body.clientWidth || <span class="built_in">document</span>.documentElement.clientWidth;</div><div class="line"><span class="built_in">document</span>.body.clientHeight || <span class="built_in">document</span>.documentElement.clientHeight;</div></pre></td></tr></table></figure>
<h3 id="三、Event对象的5种坐标"><a href="#三、Event对象的5种坐标" class="headerlink" title="三、Event对象的5种坐标"></a>三、Event对象的5种坐标</h3><hr>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-3dfa83edaa181ab2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Event对象的5种坐标"></p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span> </span></div><div class="line"><span class="attr">style</span>=<span class="string">"width: 200px;height: 200px;background: red;margin: 100px auto;"</span>&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> example = <span class="built_in">document</span>.getElementById(<span class="string">"example"</span>);</div><div class="line">example.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"clientX "</span>+e.clientX + <span class="string">" : "</span> + <span class="string">" clientY "</span>+e.clientY);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"screenX "</span>+e.screenX + <span class="string">" : "</span> + <span class="string">" screenY "</span>+e.screenY);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"offsetX "</span>+e.offsetX + <span class="string">" : "</span> + <span class="string">" offsetY "</span>+e.offsetY);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"pageX "</span>+e.pageX + <span class="string">" : "</span> + <span class="string">" pageY "</span>+e.pageY);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"x "</span>+e.x + <span class="string">" : "</span> + <span class="string">" y "</span>+e.y);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-8596ee9ee7d11e15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Event对象的5种坐标"></p>
<h3 id="四、-js各种宽高的应用"><a href="#四、-js各种宽高的应用" class="headerlink" title="四、 js各种宽高的应用"></a>四、 js各种宽高的应用</h3><hr>
<ul>
<li><strong>example1：可视区域加载</strong></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-6aba0d1bb4eb7b3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="用来解决offset的兼容性难问题 "></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example1"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#example1</span> &#123;</div><div class="line">			<span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">			<span class="attribute">height</span>: <span class="number">350px</span>;</div><div class="line">			<span class="attribute">background</span>: red;</div><div class="line">			<span class="attribute">margin</span>: <span class="number">1000px</span> auto <span class="number">0</span> auto;</div><div class="line">		&#125;</div><div class="line">		@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> fadeInLeft&#123;</div><div class="line">			0%&#123;</div><div class="line">				<span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">				<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(-100%,0,0);</div><div class="line">			&#125;</div><div class="line">			100%&#123;</div><div class="line">				<span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">				<span class="attribute">transform</span>: none;</div><div class="line">				</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">			<span class="selector-class">.fadeInLeft</span> &#123;</div><div class="line">				<span class="attribute">animation-name</span>: fadeInLeft;</div><div class="line">				<span class="attribute">animation-duration</span>: <span class="number">2s</span>;</div><div class="line">			&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showDiv</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> example = <span class="built_in">document</span>.getElementById(<span class="string">"example"</span>);</div><div class="line">			<span class="keyword">var</span> clients = <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight;<span class="comment">//可视区域的高度</span></div><div class="line">			<span class="keyword">var</span> divTop = example.getBoundingClientRect().top;</div><div class="line">			<span class="keyword">if</span>(divTop &lt;= clients)&#123;</div><div class="line">				example.classList.add(<span class="string">"fadeInLeft"</span>);</div><div class="line">                              <span class="comment">//  这里可以通过setAttribute设置图片的src按需加载</span></div><div class="line">			&#125;</div><div class="line">			<span class="built_in">document</span>.title = clients+<span class="string">"---"</span>+divTop;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line"><span class="built_in">window</span>.onscroll = showDiv;</div></pre></td></tr></table></figure>
<p> <a href="http://codepen.io/poetries/pen/RoeJgG" target="_blank" rel="external">在线演示</a></p>
<ul>
<li><strong>example2：网页滚动到顶部或者底部</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example2"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#example2</span> &#123;</div><div class="line">			<span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">			<span class="attribute">height</span>: <span class="number">350px</span>;</div><div class="line">			<span class="attribute">background</span>: red;</div><div class="line">			<span class="attribute">margin</span>: <span class="number">1000px</span> auto <span class="number">0</span> auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">scrollTopOrBottom</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> example2 = <span class="built_in">document</span>.getElementById(<span class="string">"example"</span>);</div><div class="line">			<span class="keyword">var</span> clients = <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight;<span class="comment">//可视区域的高度，兼容性写法</span></div><div class="line">			<span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.body.scrollTop;</div><div class="line">			<span class="keyword">var</span> wholeHeight = <span class="built_in">document</span>.body.scrollHeight;</div><div class="line">			<span class="keyword">if</span>(clients + scrollTop &gt;= wholeHeight)&#123;</div><div class="line">				alert(<span class="string">"我已经到了底部!"</span>);</div><div class="line">                              <span class="comment">// 这里可以调用Ajax分页加载到页面中，实现多页加载功能</span></div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(scrollTop == <span class="number">0</span>)&#123;</div><div class="line">				alert(<span class="string">"我已经到了顶部了!"</span>);</div><div class="line">                      </div><div class="line">			&#125;</div><div class="line">			<span class="built_in">document</span>.title = (clients + scrollTop)+<span class="string">"---"</span>+wholeHeight+<span class="string">"--"</span>+scrollTop;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line"><span class="built_in">window</span>.onscroll = scrollTopOrBottom;</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/poetries/pen/WoayJy" target="_blank" rel="external">在线演示</a></p>
<ul>
<li><strong>example3：DIV滚动到底部加载</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example3"</span> &gt;</span></div><div class="line">			DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载</div><div class="line">			DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载</div><div class="line">			DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载</div><div class="line">			DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载</div><div class="line">			DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载</div><div class="line">			DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载DIV滚动到底部加载</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#example3</span> &#123;</div><div class="line">			<span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">			<span class="attribute">height</span>: <span class="number">400px</span>;</div><div class="line">			<span class="attribute">background</span>: red;</div><div class="line">			<span class="attribute">margin</span>: <span class="number">10px</span> auto;</div><div class="line">			<span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">			<span class="attribute">overflow-y</span>: scroll;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"example3"</span>);</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">divScroll</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			</div><div class="line">			<span class="keyword">var</span> wholeHeight = div.scrollHeight;<span class="comment">//滚动区域高度</span></div><div class="line">			<span class="keyword">var</span> divScrollTop = div.scrollTop;<span class="comment">//卷上去的那部分高度</span></div><div class="line">			<span class="keyword">var</span> divHeight = div.clientHeight; <span class="comment">//div的可视区域的高度</span></div><div class="line">			</div><div class="line">			</div><div class="line">			<span class="keyword">if</span>(divScrollTop + divHeight &gt;= wholeHeight)&#123;</div><div class="line">				alert(<span class="string">"我已经到了底部!"</span>);</div><div class="line">               <span class="comment">// 这里可以在div中通过滚动加载分页按需显示</span></div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(divScrollTop == <span class="number">0</span>)&#123;</div><div class="line">				alert(<span class="string">"我已经到了顶部了!"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">document</span>.title = (divScrollTop + divHeight)+<span class="string">"---"</span>+wholeHeight+<span class="string">"--"</span>+divScrollTop;</div><div class="line">&#125;</div><div class="line">		</div><div class="line">div.onscroll = divScroll;</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/poetries/pen/vyVrvm" target="_blank" rel="external">在线演示</a></p>
<ul>
<li><strong>example4：计算滚动轴的宽度</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取滚动轴的宽度</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getScrollBar</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> el = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</div><div class="line">		<span class="keyword">var</span> styles = &#123;</div><div class="line">			<span class="attr">width</span>:<span class="string">"100px"</span>,</div><div class="line">			<span class="attr">height</span>:<span class="string">"100px"</span>,</div><div class="line">			<span class="attr">overflowY</span>:<span class="string">"scroll"</span></div><div class="line">		&#125;;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> styles)&#123;</div><div class="line">			el.style[prop] = styles[prop];<span class="comment">//把 styles上的属性全部遍历拷贝到el.style上</span></div><div class="line">			</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">document</span>.body.appendChild(el);</div><div class="line">		<span class="keyword">var</span> scrollBarWidth = el.offsetWidth - el.clientWidth;</div><div class="line">		el.remove();</div><div class="line">		<span class="keyword">return</span> scrollBarWidth;</div><div class="line">	&#125;</div><div class="line">	alert(getScrollBar());<span class="comment">//17</span></div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/poetries/pen/RoeBbL" target="_blank" rel="external">在线演示</a></p>
<h3 id="五、js中的宽高属性总结"><a href="#五、js中的宽高属性总结" class="headerlink" title="五、js中的宽高属性总结"></a>五、js中的宽高属性总结</h3><hr>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-41da370c1bd5e927.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="https://camo.githubusercontent.com/3318530334bbc8f5e7ce267866c43ba72fa01f32/687474703a2f2f6f61376436647871742e626b742e636c6f7564646e2e636f6d2f626c6f672f696d616765732f3038313734323039323736363338392e6a7067" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-3f7c4f7f4e7f132a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-b2343bbf8a94bf8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="document相关的宽高"></p>
<h2 id="第二部分-jQuery中的宽高属性"><a href="#第二部分-jQuery中的宽高属性" class="headerlink" title="第二部分 jQuery中的宽高属性"></a>第二部分 jQuery中的宽高属性</h2><hr>
<h3 id="一、jquery相关宽高介绍"><a href="#一、jquery相关宽高介绍" class="headerlink" title="一、jquery相关宽高介绍"></a>一、jquery相关宽高介绍</h3><hr>
<ul>
<li><strong>1.1 width()</strong><ul>
<li>特殊元素<code>window.document</code>只可以读，普通元素可以读写，<code>width()</code>返回结果无单位，<code>css(&quot;width&quot;)</code>的结果有单位</li>
</ul>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-ff70f303d36189a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="width--height"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-3165dd16c1b1f88a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="width"></p>
<ul>
<li><strong>1.2 innerWidth()</strong><ul>
<li>包含padding（不推荐window,document调用）</li>
</ul>
</li>
<li><strong>1.3 innerHeight()</strong></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-d3307f8d63859946.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="innerWidth--innerHeight"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-687789708690ae32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="innerWidth"></p>
<ul>
<li><strong>1.4 outerWidth()</strong><ul>
<li>包含padding和border，当传true时包含marging，不传时不包含marging（不推荐window,document调用）</li>
</ul>
</li>
<li><strong>1.5 outerHeight()</strong></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-d9db57f1d727af9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="outerWidth--outerHeight"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-e8120f1da588eeae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="outerWidth"></p>
<ul>
<li><strong>1.6 scrollLeft():</strong><ul>
<li>相对于水平滚动条左边的距离，如果滚动条非常左、或者元素不能被滚动，这个值为0；</li>
</ul>
</li>
<li><p><strong>1.7 scrollTop():</strong></p>
<ul>
<li>相对于垂直滚动条上边的距离，如果滚动条非常上、或者元素不能被滚动，这个值为0；</li>
</ul>
</li>
<li><p><strong>1.8 .offset():</strong></p>
<ul>
<li>相对于document的当前坐标值(相对于body左上角的left,top的值)；</li>
</ul>
</li>
<li><strong>1.9 .position():</strong><ul>
<li>相对于offset parent的当前坐标值(相对于offset parent元素的左上角的left、top的值)</li>
</ul>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-82d3c27b3e6297dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="offset和position区别"></p>
<h3 id="二、jquery相关宽高举例"><a href="#二、jquery相关宽高举例" class="headerlink" title="二、jquery相关宽高举例"></a>二、jquery相关宽高举例</h3><hr>
<p><strong>2.1 exmaple1</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-be57bb2c67d1618b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="example1"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parentDiv"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"childrenDiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span> &#123;</div><div class="line">	<span class="attribute">margin</span>:<span class="number">10px</span>;</div><div class="line">	<span class="attribute">border</span>:<span class="number">5px</span> solid red;</div><div class="line">	<span class="attribute">padding</span>:<span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.parentDiv</span> &#123;</div><div class="line">	<span class="attribute">width</span>:<span class="number">800px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">500px</span>;</div><div class="line">	<span class="attribute">margin</span>:<span class="number">5px</span> auto;</div><div class="line">	<span class="attribute">background</span>:<span class="number">#FF6600</span>;</div><div class="line">	<span class="attribute">border</span>:<span class="number">5px</span> dashed green;<span class="attribute">padding</span>:<span class="number">30px</span>;<span class="attribute">position</span>:relative;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.childrenDiv</span> &#123;</div><div class="line">	<span class="attribute">width</span>:<span class="number">300px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">500px</span>;</div><div class="line">	<span class="attribute">margin</span>:<span class="number">5px</span> auto;</div><div class="line">	<span class="attribute">background</span>:yellow;</div><div class="line">	<span class="attribute">border</span>:<span class="number">5px</span> solid black;</div><div class="line">	<span class="attribute">padding</span>:<span class="number">5px</span>;</div><div class="line">	<span class="attribute">box-sizing</span>:border-box;<span class="comment">/*包括padding和border的值*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//特殊元素的高度</span></div><div class="line"><span class="comment">//window  document</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"$(window).height()"</span>+$(<span class="built_in">window</span>).height());</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"$(document).height()"</span>+$(<span class="built_in">document</span>).height());</div><div class="line"></div><div class="line"><span class="comment">//innerHeight </span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"$(window).innerHeight()"</span>+$(<span class="built_in">window</span>).innerHeight());</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"$(document).innerHeight()"</span>+$(<span class="built_in">document</span>).innerHeight());</div><div class="line"></div><div class="line"><span class="comment">//普通child元素的高度</span></div><div class="line"></div><div class="line"><span class="comment">//480 = 500 - border*2 - padding*2 (因为设置了box-sizing，box-sizing把border和padding的值计算了进去)</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'$(".childrenDiv").height()'</span>+ $(<span class="string">".childrenDiv"</span>).height());</div><div class="line"></div><div class="line"><span class="comment">//490 = 500 - border*2 - padding*2（innerHeight不包括padding）</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'$(".childrenDiv").innerHeight()'</span>+ $(<span class="string">".childrenDiv"</span>).innerHeight());</div><div class="line"></div><div class="line"><span class="comment">//500 = 500  不包括margin</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'$(".childrenDiv").outerHeight()'</span>+ $(<span class="string">".childrenDiv"</span>).outerHeight());</div><div class="line"></div><div class="line"><span class="comment">//510 = 500 + margin true包括margin</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'$(".childrenDiv").outerHeight()'</span>+ $(<span class="string">".childrenDiv"</span>).outerHeight(<span class="literal">true</span>));</div><div class="line"></div><div class="line"><span class="comment">//scrollTop</span></div><div class="line"></div><div class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">document</span>.title = <span class="string">"scrollTop  "</span>+$(<span class="keyword">this</span>).scrollTop();</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// jquery宽高演示之offset和position</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'$(".childrenDiv").offset().top '</span>+$(<span class="string">".childrenDiv"</span>).offset().top);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'$(".childrenDiv").offset().left '</span>+$(<span class="string">".childrenDiv"</span>).offset().left);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'$(".childrenDiv").position().top '</span>+$(<span class="string">".childrenDiv"</span>).position().top);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'$(".childrenDiv").position().top '</span>+$(<span class="string">".childrenDiv"</span>).position().left);</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-295c298172ac58b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-d01e48f20b7cc5eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="offset-position"></p>
<p><a href="http://codepen.io/poetries/pen/yVRqZO" target="_blank" rel="external">在线演示</a></p>
<h3 id="三、jquery各种宽高应用"><a href="#三、jquery各种宽高应用" class="headerlink" title="三、jquery各种宽高应用"></a>三、jquery各种宽高应用</h3><hr>
<p><strong>3.1 jquery可视区域加载</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#example</span> &#123;</div><div class="line">			<span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">			<span class="attribute">height</span>: <span class="number">350px</span>;</div><div class="line">			<span class="attribute">background</span>: red;</div><div class="line">			<span class="attribute">margin</span>: <span class="number">1000px</span> auto <span class="number">0</span> auto;</div><div class="line">		&#125;</div><div class="line">		@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> fadeInLeft&#123;</div><div class="line">			0%&#123;</div><div class="line">				<span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">				<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(-100%,0,0);</div><div class="line">			&#125;</div><div class="line">			100%&#123;</div><div class="line">				<span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">				<span class="attribute">transform</span>: none;</div><div class="line">				</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">			<span class="selector-class">.fadeInLeft</span> &#123;</div><div class="line">				<span class="attribute">animation-name</span>: fadeInLeft;</div><div class="line">				<span class="attribute">animation-duration</span>: <span class="number">2s</span>;</div><div class="line">			&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> ks_area = $(<span class="built_in">window</span>).height();<span class="comment">//可视区域高度</span></div><div class="line">	<span class="keyword">var</span> scrollHeight = $(<span class="built_in">window</span>).scrollTop();<span class="comment">//被卷上去的那部分</span></div><div class="line">	<span class="keyword">var</span> divTop = $(<span class="string">"#example"</span>).offset().top;<span class="comment">//盒子距离浏览器顶部的距离</span></div><div class="line">	</div><div class="line">	<span class="keyword">if</span>(ks_area + scrollHeight &gt;= divTop)&#123;</div><div class="line">		$(<span class="string">"#example"</span>).addClass(<span class="string">"fadeInLeft"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">document</span>.title = ks_area+<span class="string">'-'</span>+scrollHeight+<span class="string">'-'</span>+divTop;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/poetries/pen/MbPqVE" target="_blank" rel="external">在线演示</a></p>
<p><strong>3.2 jquery滚动到底部和顶部加载</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://apps.bdimg.com/libs/jquery/2.1.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#example</span> &#123;</div><div class="line">			<span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">			<span class="attribute">height</span>: <span class="number">350px</span>;</div><div class="line">			<span class="attribute">background</span>: red;</div><div class="line">			<span class="attribute">margin</span>: <span class="number">1000px</span> auto <span class="number">0</span> auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> ks_area = $(<span class="built_in">window</span>).height();</div><div class="line">	<span class="keyword">var</span> scrollTop = $(<span class="built_in">window</span>).scrollTop();</div><div class="line">	<span class="keyword">var</span> wholeHeight = $(<span class="built_in">document</span>).height();</div><div class="line">	</div><div class="line">	<span class="keyword">if</span>(ks_area + scrollTop &gt;=wholeHeight )&#123;</div><div class="line">		alert(<span class="string">"已经到底部了"</span>);</div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(scrollTop == <span class="number">0</span>)&#123;</div><div class="line">		alert(<span class="string">"已经到头部了"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/poetries/pen/gLBdZa" target="_blank" rel="external">在线演示</a></p>
<p>（完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文链接 &lt;a href=&quot;http://blog.poetries.top/2016/12/13/js-props&quot;&gt;http://blog.poetries.top/2016/12/13/js-props&lt;/a&gt;&lt;br&gt;声明：本文根据慕课网学习视频整理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;强烈建议打开控制台自己动手练习一遍，这样印象才会深刻&lt;/p&gt;
&lt;h2 id=&quot;第一部分-JavaScript中的宽高属性&quot;&gt;&lt;a href=&quot;#第一部分-JavaScript中的宽高属性&quot; class=&quot;headerlink&quot; title=&quot;第一部分 JavaScript中的宽高属性&quot;&gt;&lt;/a&gt;第一部分 JavaScript中的宽高属性&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;一、与window相关的宽高属性&quot;&gt;&lt;a href=&quot;#一、与window相关的宽高属性&quot; class=&quot;headerlink&quot; title=&quot;一、与window相关的宽高属性&quot;&gt;&lt;/a&gt;一、与window相关的宽高属性&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;1-1-window-location和document-location&quot;&gt;&lt;a href=&quot;#1-1-window-location和document-location&quot; class=&quot;headerlink&quot; title=&quot;1.1 window.location和document.location&quot;&gt;&lt;/a&gt;1.1 window.location和document.location&lt;/h4&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window&lt;/code&gt;对象的&lt;code&gt;location&lt;/code&gt;属性引用的是&lt;code&gt;location&lt;/code&gt;对象，表示该窗口中当前显示文档的&lt;code&gt;URL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document&lt;/code&gt;的对象的&lt;code&gt;location&lt;/code&gt;属性也是引用&lt;code&gt;location&lt;/code&gt;对象&lt;/li&gt;
&lt;li&gt;所以 &lt;code&gt;window.location === document.location&lt;/code&gt;    &lt;code&gt;//true&lt;/code&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript数组详解</title>
    <link href="http://blog.poetries.top/2016/12/13/js-arr/"/>
    <id>http://blog.poetries.top/2016/12/13/js-arr/</id>
    <published>2016-12-13T06:55:24.000Z</published>
    <updated>2017-02-15T11:25:30.956Z</updated>
    
    <content type="html"><![CDATA[<h4 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h4><hr>
<ul>
<li>数组是按序号排列的一组值，每个值的位置都有编号（从<code>0</code>开始）。数组本质上是一种特殊的对象。它的键名是按（<code>0，1，2...</code>）排列的一组数字<a id="more"></a>
</li>
</ul>
<h5 id="创建数组："><a href="#创建数组：" class="headerlink" title="创建数组："></a>创建数组：</h5><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(values);</div><div class="line"><span class="keyword">var</span> arr = [vaules];</div></pre></td></tr></table></figure>
<h5 id="判断比是否是个数组"><a href="#判断比是否是个数组" class="headerlink" title="判断比是否是个数组"></a>判断比是否是个数组</h5><hr>
<ul>
<li><p><code>Array.isArray(arr)</code></p>
</li>
<li><p><code>arr instanceof Array</code></p>
</li>
</ul>
<h5 id="增加数组元素"><a href="#增加数组元素" class="headerlink" title="增加数组元素"></a>增加数组元素</h5><hr>
<ul>
<li><code>push()</code>方法 在数组的末尾增加一个或多个元素，并返回数组的新长度。</li>
<li><code>unshift()</code>方法 在数组的开头增加一个或多个元素，并返回数组的新长度。</li>
<li><code>length</code> 属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">arr.push(<span class="number">4</span>)</div><div class="line">arr  <span class="comment">// 1, 2, 3, 4</span></div><div class="line">arr.unshift(<span class="number">6</span>)</div><div class="line">arr  <span class="comment">// 6, 1, 2, 3, 4</span></div><div class="line">arr[arr.length] = <span class="number">7</span>  <span class="comment">// 与push()方法类似</span></div><div class="line">arr  <span class="comment">// 6, 1, 2, 3, 4, 7</span></div></pre></td></tr></table></figure>
<h5 id="删除数组中的元素"><a href="#删除数组中的元素" class="headerlink" title="删除数组中的元素"></a>删除数组中的元素</h5><hr>
<ul>
<li><code>delete</code> 运算符，可以删除数组中的某个元素，但这不会改变<code>length</code>属性的值.</li>
<li><code>pop()</code> 方法 删除数组的最后一个元素，并返回这个元素</li>
<li><code>shift()</code> 方法 删除数组的第一个元素，并返回这个元素</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">delete</span> arr[<span class="number">0</span>];</div><div class="line">arr   <span class="comment">// [undefined,2,3]</span></div><div class="line">arr.length  <span class="comment">// 3</span></div><div class="line"><span class="keyword">var</span> last = arr.pop()</div><div class="line"><span class="keyword">var</span> first = arr.shift()</div><div class="line">last <span class="comment">// 3</span></div><div class="line">first <span class="comment">// undefined</span></div><div class="line">arr <span class="comment">//2</span></div></pre></td></tr></table></figure>
<h4 id="类数组对象"><a href="#类数组对象" class="headerlink" title="类数组对象"></a>类数组对象</h4><hr>
<ul>
<li>在<code>js</code>中，有些对象被叫做“类数组对象<code>”（array-like object）</code>，因为这些对象看起来很像数组，可以使用<code>length</code>属性，但是无法使用数组的方法。 </li>
<li>典型的类数组对象是函数的<code>arguments</code>对象，以及大多数<code>DOM</code>元素集，还有字符串</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// arguments对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">args</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="built_in">arguments</span>; &#125;</div><div class="line"><span class="keyword">var</span> arraylike = args(<span class="string">'a'</span>,<span class="string">'b'</span>)</div><div class="line">arrayLike[<span class="number">0</span>]  <span class="comment">// 'a'</span></div><div class="line">arrayLike.length <span class="comment">// 2</span></div><div class="line">arrayLike <span class="keyword">instanceof</span> <span class="built_in">Array</span> <span class="comment">// false</span></div><div class="line"><span class="built_in">Array</span>.isArray(arrayLike)  <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="comment">// DOM元素集</span></div><div class="line"><span class="keyword">var</span> elts = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>);</div><div class="line">elts.length  <span class="comment">// 3</span></div><div class="line">eles <span class="keyword">instanceof</span> <span class="built_in">Array</span>  <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="comment">//字符串</span></div><div class="line"><span class="string">'abc'</span>[<span class="number">1</span>]  <span class="comment">// 'b'</span></div><div class="line"><span class="string">'abc'</span>.length  <span class="comment">// 3</span></div><div class="line"><span class="string">'abc'</span> <span class="keyword">instanceof</span> <span class="built_in">Array</span>  <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h4 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h4><hr>
<h5 id="for…in-循环"><a href="#for…in-循环" class="headerlink" title="for…in 循环"></a>for…in 循环</h5><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a =[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">a.other = <span class="string">'other'</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arr)&#123;</div><div class="line">    <span class="built_in">console</span>.log( arr[i]);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 1, 2, 3, other</span></div></pre></td></tr></table></figure>
<ul>
<li>从上面的输出结果可以看出，利用<code>for..in</code>循环会将动态添加的非数字键的值遍历出来，因此需要使用的时候需要注意</li>
</ul>
<h5 id="for-循环和-while-循环"><a href="#for-循环和-while-循环" class="headerlink" title="for 循环和 while 循环"></a>for 循环和 while 循环</h5><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="comment">// for循环</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</div><div class="line">  <span class="built_in">console</span>.log(a[i]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// while循环</span></div><div class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> (i &lt; a.length) &#123;</div><div class="line">  <span class="built_in">console</span>.log(a[i]);</div><div class="line">  i++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> l = a.length;</div><div class="line"><span class="keyword">while</span> (l--) &#123;</div><div class="line">  <span class="built_in">console</span>.log(a[l]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="forEach-方法"><a href="#forEach-方法" class="headerlink" title="forEach()方法"></a>forEach()方法</h5><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//array.forEach(callback[, thisArg])</span></div><div class="line"><span class="comment">//callback 在数组的每一项上执行的函数，接受三个参数：item: 数组当前项的值，index: 当前项的索引，arr:数组本身。</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, arr</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(item, index);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//1 0</span></div><div class="line"><span class="comment">//2 1</span></div><div class="line"><span class="comment">//3 2</span></div></pre></td></tr></table></figure>
<h4 id="数组常用的方法"><a href="#数组常用的方法" class="headerlink" title="数组常用的方法"></a>数组常用的方法</h4><hr>
<p><img src="https://segmentfault.com/img/bVzkqq" alt=""></p>
<h5 id="join-将数值转换为字符串"><a href="#join-将数值转换为字符串" class="headerlink" title="join() 将数值转换为字符串"></a>join() 将数值转换为字符串</h5><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">arr.join(); <span class="comment">// "1,2,3"</span></div><div class="line">arr.join(<span class="string">"_"</span>); <span class="comment">// "1_2_3"</span></div></pre></td></tr></table></figure>
<h5 id="reverse-将数组逆序"><a href="#reverse-将数组逆序" class="headerlink" title="reverse() 将数组逆序"></a>reverse() 将数组逆序</h5><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 原数组会被修改</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">arr.reverse(); <span class="comment">// [3, 2, 1]</span></div><div class="line">arr; <span class="comment">// [3, 2, 1]</span></div></pre></td></tr></table></figure>
<h5 id="sort-数组排序"><a href="#sort-数组排序" class="headerlink" title="sort() 数组排序"></a>sort() 数组排序</h5><hr>
<ul>
<li>默认情况下是升序排列的，底层是调用了每个数组项的 <code>toString()</code> 方法，然后比较得到字符串，即使每个数组项的数值是数字，比较的也是字符串</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 原数组会被修改</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">12</span>, <span class="number">213</span>, <span class="number">1432</span>, <span class="string">'a'</span>];</div><div class="line">arr.sort(); <span class="comment">// [1, 12, 1432, 213, "a"]</span></div><div class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> b-a; <span class="comment">//按倒序排列数组</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h5 id="slice-返回部分数组"><a href="#slice-返回部分数组" class="headerlink" title="slice() 返回部分数组"></a>slice() 返回部分数组</h5><hr>
<ul>
<li><code>slice</code>用于复制数组，复制完后旧数组不变，返回得到的新数组是旧数组的子集</li>
<li>第一个参数begin是开始复制的位置，需要注意的是，可以设负数。设负数表示从尾往前数几个位置开始复制</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//原数组不会被修改</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line">arr.slice(); <span class="comment">//[1, 2, 3, 4, 5]</span></div><div class="line">arr.slice(<span class="number">1</span>,<span class="number">3</span>); <span class="comment">// [2, 3]</span></div><div class="line">arr.slice(<span class="number">1</span>, <span class="number">-1</span>); <span class="comment">// [2, 3, 4]</span></div><div class="line">arr; <span class="comment">// [1, 2, 3, 4, 5]</span></div></pre></td></tr></table></figure>
<h5 id="splice-数组拼接"><a href="#splice-数组拼接" class="headerlink" title="splice() 数组拼接"></a>splice() 数组拼接</h5><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//原数组会被修改</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="comment">//从第三个数组元素删除</span></div><div class="line">arr.splice(<span class="number">2</span>); <span class="comment">// returns [3, 4, 5] </span></div><div class="line">arr; <span class="comment">// [1, 2]</span></div><div class="line"><span class="comment">//从第三个数组元素删除，删除两个元素</span></div><div class="line">arr.splice(<span class="number">2</span>, <span class="number">2</span>) <span class="comment">// returns [3, 4]</span></div><div class="line">arr; <span class="comment">// [1, 2, 5]</span></div><div class="line"><span class="comment">//将'a','b'替换到数组的第二个元素</span></div><div class="line">arr.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">'a'</span>, <span class="string">'b'</span>)</div></pre></td></tr></table></figure>
<h5 id="isArray-判断是否是数组"><a href="#isArray-判断是否是数组" class="headerlink" title="isArray() 判断是否是数组"></a>isArray() 判断是否是数组</h5><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line"><span class="keyword">var</span> a = <span class="string">"not array"</span>;</div><div class="line"><span class="built_in">Array</span>.isArray(arr); <span class="comment">// true</span></div><div class="line"><span class="built_in">Array</span>.isArray(a); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h5 id="indexOf-lastIndexOf-数组检索"><a href="#indexOf-lastIndexOf-数组检索" class="headerlink" title="indexOf() lastIndexOf() 数组检索"></a>indexOf() lastIndexOf() 数组检索</h5><hr>
<ul>
<li>两者都用于返回项目的索引值。区别是<code>indexOf</code>从头开始找，<code>lastIndexOf</code>从尾开始找。如果查找失败，无匹配，返回<code>-1</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>];</div><div class="line">arr.indexOf(<span class="string">'c'</span>);  <span class="comment">// 2 找到返回数组下标</span></div><div class="line">arr.indexOf(<span class="string">'c'</span>, <span class="number">3</span>); <span class="comment">// -1 指定从3号位开始查找</span></div><div class="line">arr.indexOf(<span class="string">'f'</span>); <span class="comment">// -1 没找到该元素</span></div><div class="line">arr.lastIndexOf(<span class="string">'c'</span>); <span class="comment">// 2</span></div><div class="line">arr.lastIndexOf(<span class="string">'c'</span>,<span class="number">2</span>); <span class="comment">// 2</span></div><div class="line">arr.lastIndexOf(<span class="string">'f'</span>); <span class="comment">// -1 没找到该元素</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;数组的定义&quot;&gt;&lt;a href=&quot;#数组的定义&quot; class=&quot;headerlink&quot; title=&quot;数组的定义&quot;&gt;&lt;/a&gt;数组的定义&lt;/h4&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;数组是按序号排列的一组值，每个值的位置都有编号（从&lt;code&gt;0&lt;/code&gt;开始）。数组本质上是一种特殊的对象。它的键名是按（&lt;code&gt;0，1，2...&lt;/code&gt;）排列的一组数字
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="数组" scheme="http://blog.poetries.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>OOP之类与对象</title>
    <link href="http://blog.poetries.top/2016/12/13/js-oop-and-class/"/>
    <id>http://blog.poetries.top/2016/12/13/js-oop-and-class/</id>
    <published>2016-12-13T06:55:24.000Z</published>
    <updated>2017-02-15T11:25:30.956Z</updated>
    
    <content type="html"><![CDATA[<h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><hr>
<h5 id="对象的含义"><a href="#对象的含义" class="headerlink" title="对象的含义"></a>对象的含义</h5><ul>
<li><p>所谓对象，就是一种无序的数据集合，由若干个“键值对”（<code>key-value</code>）构成</p>
<a id="more"></a>
<h5 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h5></li>
<li><p>使用<code>new</code>运算符创建<code>Object</code></p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">p.name = <span class="string">"Tony"</span>;</div></pre></td></tr></table></figure>
<ul>
<li>使用对象字面量的形式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//对象字面量形式</span></div><div class="line"><span class="keyword">var</span> p =&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">"tony"</span>,</div><div class="line">    <span class="attr">work</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"working...."</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">_age</span>: <span class="number">18</span>,</div><div class="line">    get age()&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._age;</div><div class="line">    &#125;,</div><div class="line">    set age(val)&#123;</div><div class="line">        <span class="keyword">if</span>( val &lt;<span class="number">0</span> || val &gt; <span class="number">150</span>)&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"invalid value"</span>);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">this</span>._age = val;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(p.name);</div></pre></td></tr></table></figure>
<h5 id="对象的基本操作"><a href="#对象的基本操作" class="headerlink" title="对象的基本操作"></a>对象的基本操作</h5><ul>
<li>成员属性的添加</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Object.defineProperty()方法</span></div><div class="line"><span class="built_in">Object</span>.defineProperty(p, <span class="string">"age"</span>,&#123;<span class="attr">value</span>: <span class="number">18</span>, <span class="attr">writable</span>: <span class="literal">false</span>&#125;);</div><div class="line"><span class="comment">//Object.defineProperties()方法 添加多个属性</span></div><div class="line"><span class="built_in">Object</span>.defineProperties(p, &#123;</div><div class="line">    <span class="attr">salary</span>:&#123;</div><div class="line">        <span class="attr">value</span>: <span class="number">1000</span>,</div><div class="line">        <span class="attr">writable</span>: <span class="literal">false</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">gender</span>:&#123;</div><div class="line">        <span class="attr">value</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li><p>成员的遍历</p>
<ul>
<li>使用 <code>for..in</code>语句</li>
<li><code>Object.keys()</code>方法 返回一个包含对象键名的字符串数组</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o =&#123;&#125;;</div><div class="line">o.name = <span class="string">"jack"</span>;</div><div class="line">o.age = <span class="number">20</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> o)&#123;</div><div class="line">    <span class="built_in">console</span>.log(o[i]);</div><div class="line">&#125; <span class="comment">// jack, 20</span></div><div class="line"><span class="built_in">Object</span>.keys(o); <span class="comment">// ["name", "age"]</span></div></pre></td></tr></table></figure>
<ul>
<li><p>检查对象是否有某个属性</p>
<ul>
<li><code>in</code> 操作符</li>
<li><code>Object.hasOwnProperty()</code>方法</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;<span class="attr">name</span>: <span class="string">"mariya"</span>&#125;</div><div class="line"><span class="string">"name"</span> <span class="keyword">in</span> o; <span class="comment">// true</span></div><div class="line">o.hasOwnProperty(<span class="string">"name"</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<ul>
<li>得到对象的属性特性描述 <code>Object.getOwnPropertyDescriptor(obj,property)</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(o, <span class="string">"name"</span>);</div><div class="line"><span class="comment">//Object &#123;</span></div><div class="line"><span class="comment">//    value: "mariya", writable: true, enumerable: true, configurable: true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>删除属性<ul>
<li><code>delete</code>运算符,但有些对象的属性是删除不了的</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">delete</span> o.name; <span class="comment">//true</span></div><div class="line">o.name;  <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<h5 id="Constructor属性"><a href="#Constructor属性" class="headerlink" title="Constructor属性"></a>Constructor属性</h5><ul>
<li><code>constructor</code>始终指向创建当前对象的构造函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line"><span class="built_in">console</span>.log(arr.constructor === <span class="built_in">Array</span>); <span class="comment">// true</span></div><div class="line"><span class="keyword">var</span> Foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="built_in">console</span>.log(Foo.constructor === <span class="built_in">Function</span>); <span class="comment">// true</span></div><div class="line"><span class="comment">// 由构造函数实例化一个obj对象</span></div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Foo();</div><div class="line"><span class="built_in">console</span>.log(obj.constructor === Foo); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(obj.constructor.constructor === <span class="built_in">Function</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<ul>
<li>每个函数都有一个默认的属性<code>prototype</code>，而这个<code>prototype</code>的<code>constructor</code>默认指向这个函数</li>
</ul>
<h4 id="类的创建"><a href="#类的创建" class="headerlink" title="类的创建"></a>类的创建</h4><hr>
<ul>
<li><p>虽然<code>js</code>是门基于对象的语言，但是没有类这一概念的，虽然保留了<code>class</code>的关键字，但在<code>ES6</code>之前是无法使用的。所以，可以用构造函数模拟类的创建，也就是伪类。</p>
</li>
<li><p>所谓”构造函数”，其实就是一个普通函数，但是内部使用了<code>this</code>变量。对构造函数使用<code>new</code>运算符，就能生成实例，并且<code>this</code>变量会绑定在实例对象上</p>
</li>
<li>每一个构造函数都有一个<code>prototype</code>属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//构造函数模式</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">age, name</span>)</span>&#123; <span class="comment">//Class</span></div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"><span class="comment">//将公共的属性或方法放在prototype属性上</span></div><div class="line">Person.prototype.headCount = <span class="number">1</span>;</div><div class="line"><span class="comment">//创建实例对象</span></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="number">19</span>, <span class="string">'johnsom'</span>);</div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="number">20</span>, <span class="string">'allen'</span>);</div></pre></td></tr></table></figure>
<h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><hr>
<ul>
<li><code>this</code>表示当前对象，如果在全局作用范围内使用<code>this</code>，则指代当前页面对象<code>window</code>； 如果在函数中使用<code>this</code>，则<code>this</code>指代什么是根据运行时此函数在什么对象上被调用。 我们还可以使用<code>apply</code>和<code>call</code>两个全局方法来改变函数中<code>this</code>的具体指向</li>
</ul>
<h5 id="全局代码中的this"><a href="#全局代码中的this" class="headerlink" title="全局代码中的this"></a>全局代码中的this</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">//true 全局范围内使用this指向window对象</span></div></pre></td></tr></table></figure>
<h5 id="普通的函数调用"><a href="#普通的函数调用" class="headerlink" title="普通的函数调用"></a>普通的函数调用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">this</span>.name = <span class="string">"tony"</span>; <span class="comment">// this在运行时指向window对象,在严格模式下则是undefined</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="在对象中使用"><a href="#在对象中使用" class="headerlink" title="在对象中使用"></a>在对象中使用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">"tony"</span>,</div><div class="line">    <span class="attr">print</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);  <span class="comment">//this指向对象o，但是可以改变其指向</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h5 id="作为构造函数"><a href="#作为构造函数" class="headerlink" title="作为构造函数"></a>作为构造函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> F(); <span class="comment">// 函数内部的this指向新创建的对象。</span></div></pre></td></tr></table></figure>
<h5 id="多层嵌套的内部函数"><a href="#多层嵌套的内部函数" class="headerlink" title="多层嵌套的内部函数"></a>多层嵌套的内部函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"global"</span>;</div><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">    <span class="attr">name</span> : <span class="string">"person"</span>,</div><div class="line">    <span class="attr">hello</span> : <span class="function"><span class="keyword">function</span>(<span class="params">sth</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> sayhello = <span class="function"><span class="keyword">function</span>(<span class="params">sth</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" says "</span> + sth);</div><div class="line">        &#125;;</div><div class="line">        sayhello(sth);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">person.hello(<span class="string">"hello world"</span>);<span class="comment">//global says hello world</span></div></pre></td></tr></table></figure>
<ul>
<li>在内部函数中，<code>this</code>没有按预想的绑定到外层函数对象上，而是绑定到了全局对象。这里普遍被认为是<code>JavaScript</code>语言的设计错误，因为没有人想让内部函数中的<code>this</code>指向全局对象。一般的处理方式是将<code>this</code>作为变量保存下来，一般约定为<code>that</code>或者<code>self</code>：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"global"</span>;</div><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">    <span class="attr">name</span> : <span class="string">"person"</span>,</div><div class="line">    <span class="attr">hello</span> : <span class="function"><span class="keyword">function</span>(<span class="params">sth</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">var</span> sayhello = <span class="function"><span class="keyword">function</span>(<span class="params">sth</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(that.name + <span class="string">" says "</span> + sth);</div><div class="line">        &#125;;</div><div class="line">        sayhello(sth);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">person.hello(<span class="string">"hello world"</span>);<span class="comment">//person says hello world</span></div></pre></td></tr></table></figure>
<h5 id="事件中的this"><a href="#事件中的this" class="headerlink" title="事件中的this"></a>事件中的this</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ele = <span class="built_in">document</span>.getElementById(<span class="string">"id"</span>);</div><div class="line">ele.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">//this指向dom元素</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h5 id="使用apply和call改变this的指向"><a href="#使用apply和call改变this的指向" class="headerlink" title="使用apply和call改变this的指向"></a>使用apply和call改变this的指向</h5><ul>
<li><code>apply</code>和<code>call</code>类似，只是后面的参数是通过一个数组传入，而不是分开传入。两者都是将某个函数绑定到某个具体对象上使用，自然此时的<code>this</code>会被显式的设置为第一个参数。两者的方法定义：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">call( thisArg [，arg1，arg2，… ] );  <span class="comment">// 参数列表，arg1，arg2，...</span></div><div class="line">apply(thisArg [，argArray] );     <span class="comment">// 参数数组，argArray</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'global'</span>;</div><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'job'</span>,</div><div class="line">    <span class="attr">getName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">o.getName(); <span class="comment">// job</span></div><div class="line"></div><div class="line"><span class="comment">//用call或apply改变函数中this的指向</span></div><div class="line">o.getName.call(<span class="keyword">this</span>); <span class="comment">// global</span></div></pre></td></tr></table></figure>
<ul>
<li><p><strong>简单的总结：</strong></p>
<ul>
<li>当函数作为对象的方法调用时，<code>this</code>指向该对象。</li>
<li>构造函数中的<code>this</code>指向新创建的对象</li>
<li>嵌套函数中的<code>this</code>不会继承上层函数的<code>this</code>，如果需要，可以用一个变量保存上层函数的<code>this</code></li>
</ul>
</li>
</ul>
<h5 id="bind（）"><a href="#bind（）" class="headerlink" title="bind（）"></a>bind（）</h5><ul>
<li>该方法创建一个新函数，称为绑定函数，绑定函数会以创建它时传入<code>bind</code>方法的第一个参数作为<code>this</code>，传入<code>bind</code>方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#ele"</span>).click(person.hello.bind(person));</div><div class="line"><span class="comment">//相应元素被点击时，输出person says hello world</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;对象&quot;&gt;&lt;a href=&quot;#对象&quot; class=&quot;headerlink&quot; title=&quot;对象&quot;&gt;&lt;/a&gt;对象&lt;/h4&gt;&lt;hr&gt;
&lt;h5 id=&quot;对象的含义&quot;&gt;&lt;a href=&quot;#对象的含义&quot; class=&quot;headerlink&quot; title=&quot;对象的含义&quot;&gt;&lt;/a&gt;对象的含义&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;所谓对象，就是一种无序的数据集合，由若干个“键值对”（&lt;code&gt;key-value&lt;/code&gt;）构成&lt;/p&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="面向对象" scheme="http://blog.poetries.top/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>OOP之原型与原型链</title>
    <link href="http://blog.poetries.top/2016/12/13/js-prototype/"/>
    <id>http://blog.poetries.top/2016/12/13/js-prototype/</id>
    <published>2016-12-13T06:55:24.000Z</published>
    <updated>2017-02-15T11:25:30.956Z</updated>
    
    <content type="html"><![CDATA[<h4 id="prototype原型对象"><a href="#prototype原型对象" class="headerlink" title="prototype原型对象"></a>prototype原型对象</h4><hr>
<ul>
<li>每个函数都有一个默认的<code>prototype</code>属性，其实际上还是一个对象，如果被用在继承中，姑且叫做原型对象</li>
<li><p>在构造函数中的<code>prototype</code>中定义的属性和方法，会被创建的对象所继承下来。举个栗子：</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">F.prototype.work = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'F is working..'</span>);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> F();</div><div class="line">f.work(); <span class="comment">// F is working..</span></div></pre></td></tr></table></figure>
</li>
<li><p>当你创建函数时，<code>JS</code>会为这个函数自动添加 <code>prototype</code> 属性，值是空对象。而一旦你把这个函数当作构造函数（ <code>constructor</code> ）调用（即通过 <code>new</code>关键字调用），那么<code>JS</code>就会帮你创建该构造函数的实例，实例继承构造函数 <code>prototype</code> 的所有属性和方法（实例通过设置自己的<code>__proto__</code> 指向构造函数的 <code>prototype</code> 来实现这种继承）</p>
</li>
</ul>
<h4 id="神秘的proto"><a href="#神秘的proto" class="headerlink" title="神秘的proto"></a>神秘的<strong>proto</strong></h4><hr>
<ul>
<li><code>JS</code>的对象中都包含了一个<code>__proto__</code>属性，其指向的是创建该对象时的构造函数的原型对象<code>prototype</code></li>
</ul>
<p><img src="https://segmentfault.com/img/bVzPrk" alt=""></p>
<ul>
<li>从上面的输出结果看出，<code>f.__proto__</code>指向了其构造函数<code>F</code>的<code>prototype</code>，而<code>F.prototype</code>本身也是一个对象，其内部也有<code>__proto__</code>属性，其指向的是<code>Object.prototype</code>,直到最后<code>Object.prototype</code>指向<code>null</code>，这条原型链才结束</li>
<li>因此，<code>__proto__</code>这个神秘的属性才是原型链形成的真正原因</li>
</ul>
<h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><hr>
<ul>
<li>由于原型对象本身也是对象，根据上边的定义，它也有自己的原型，而它自己的原型对象又可以有自己的原型，这样就组成了一条链，这个就是原型链，<code>JavaScritp</code>引擎在访问对象的属性时，如果在对象本身中没有找到，则会去原型链中查找，如果找到，直接返回值，如果整个链都遍历且没有找到属性，则返回<code>undefined</code>。原型链一般实现为一个链表，这样就可以按照一定的顺序来查找</li>
</ul>
<p><img src="https://segmentfault.com/img/bVcXNb" alt=""></p>
<ul>
<li><p>从上图看出：</p>
<ul>
<li><code>Object.prototype</code>是顶级对象，所有对象都继承自它。</li>
<li><code>Function</code>继承 <code>Function</code>本身， <code>Function.prototype</code> 继承 <code>Object.prototype</code></li>
<li><code>Function.prototype</code> 和 <code>Function.__proto__</code> 都指向 <code>Function.prototype</code></li>
<li><code>Object.prototype.__proto__ === null</code> ，说明原型链到 <code>Object.prototype</code>终止</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;prototype原型对象&quot;&gt;&lt;a href=&quot;#prototype原型对象&quot; class=&quot;headerlink&quot; title=&quot;prototype原型对象&quot;&gt;&lt;/a&gt;prototype原型对象&lt;/h4&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;每个函数都有一个默认的&lt;code&gt;prototype&lt;/code&gt;属性，其实际上还是一个对象，如果被用在继承中，姑且叫做原型对象&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在构造函数中的&lt;code&gt;prototype&lt;/code&gt;中定义的属性和方法，会被创建的对象所继承下来。举个栗子：&lt;/p&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="原型链" scheme="http://blog.poetries.top/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>arguments详解</title>
    <link href="http://blog.poetries.top/2016/12/13/arguments%E8%AF%A6%E8%A7%A3/"/>
    <id>http://blog.poetries.top/2016/12/13/arguments详解/</id>
    <published>2016-12-13T06:55:24.000Z</published>
    <updated>2017-02-15T11:25:30.948Z</updated>
    
    <content type="html"><![CDATA[<p>每个函数都会有一个Arguments对象实例arguments，它引用着函数的实参，可以用数组下标的方式”[]”引用arguments的元素。<code>arguments.length</code>为函数实参个数，<code>arguments.callee</code>引用函数自身。</p>
<a id="more"></a>
<h3 id="Arguments对象介绍"><a href="#Arguments对象介绍" class="headerlink" title="Arguments对象介绍"></a>Arguments对象介绍</h3><p>Arguments对象是一个伪数组对象，它有length属性，可以arguments[i]来访问对象中的元素，但它不能用数组的一些方法，例如push，pop，slice等。</p>
<h4 id="Arguments的length属性"><a href="#Arguments的length属性" class="headerlink" title="Arguments的length属性"></a>Arguments的length属性</h4><p>Arguments的length属性，表示function函数实际所传参数的个数。函数名点length可以获取函数期望的传参个数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">argTest</span>(<span class="params">a,b,c</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> t = <span class="built_in">arguments</span>.length; <span class="comment">//实际传参个数</span></div><div class="line">	<span class="keyword">var</span> e = argTest.length;   <span class="comment">//期望传参个数</span></div><div class="line"></div><div class="line">	<span class="built_in">console</span>.log(t);</div><div class="line">	<span class="built_in">console</span>.log(e);</div><div class="line">&#125;</div><div class="line"></div><div class="line">argTest(<span class="number">11</span>,<span class="number">12</span>);       <span class="comment">//t=2,e=3</span></div><div class="line">argTest(<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>);    <span class="comment">//t=3,e=3</span></div><div class="line">argTest(<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>); <span class="comment">//t=4,e=3</span></div></pre></td></tr></table></figure>
<h4 id="Arguments的参数访问"><a href="#Arguments的参数访问" class="headerlink" title="Arguments的参数访问"></a>Arguments的参数访问</h4><p>Arguments对象的参数访问可以用arguments[i]来访问函数所传的参数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">argTest</span>(<span class="params">a,b,c</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> arg = [];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</div><div class="line">		arg.push(<span class="built_in">arguments</span>[i]);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">console</span>.log(arg);</div><div class="line">&#125;</div><div class="line"></div><div class="line">argTest(<span class="number">11</span>,<span class="number">12</span>);       <span class="comment">//[11, 12]</span></div><div class="line">argTest(<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>);    <span class="comment">//[11, 12, 13]</span></div><div class="line">argTest(<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>); <span class="comment">//[11, 12, 13, 14]</span></div></pre></td></tr></table></figure>
<h4 id="Arguments的callee调用"><a href="#Arguments的callee调用" class="headerlink" title="Arguments的callee调用"></a>Arguments的callee调用</h4><p>Arguments的callee属性可以调用函数本身，当函数正在执行时才可调用，可以实现方法的递归调用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">argTest</span>(<span class="params">a,b,c</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> e = <span class="built_in">arguments</span>.callee.toString();</div><div class="line">	<span class="built_in">console</span>.log(e);</div><div class="line">&#125;</div><div class="line"></div><div class="line">argTest(); <span class="comment">//打印出函数本身</span></div></pre></td></tr></table></figure>
<h4 id="Function对象caller属性"><a href="#Function对象caller属性" class="headerlink" title="Function对象caller属性"></a>Function对象caller属性</h4><p>Function对象的caller属性可以指向当前函数的调用者，当调用者函数正在执行时才可调用，</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">callerTest</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(callerTest.caller)&#123;</div><div class="line">		<span class="keyword">var</span> caller = callerTest.caller.toString();</div><div class="line">		<span class="built_in">console</span>.log(caller);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"no caller"</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	callerTest();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlerToHandler</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	handler();</div><div class="line">&#125;</div><div class="line"></div><div class="line">callerTest();        <span class="comment">//no caller</span></div><div class="line">handler();           <span class="comment">//返回调用者handler函数</span></div><div class="line">handlerToHandler();  <span class="comment">//返回调用者handler函数</span></div></pre></td></tr></table></figure>
<h3 id="Arguments的作用"><a href="#Arguments的作用" class="headerlink" title="Arguments的作用"></a>Arguments的作用</h3><h4 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h4><p>方法重载是指在一个类中定义多个同名的方法，但要求每个方法具有不同的参数的类型或参数的个数。<br>Javascript并没有重载函数的功能，但是Arguments对象能够模拟重载。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//普通方法实现方法重载</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b,c</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(a &amp;&amp; b &amp;&amp; c)&#123;</div><div class="line">		<span class="built_in">console</span>.log(a + b + c);</div><div class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a &amp;&amp; b)&#123;</div><div class="line">		<span class="built_in">console</span>.log(a + b);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(a);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">test();           <span class="comment">//undefined</span></div><div class="line">test(<span class="number">11</span>,<span class="number">12</span>);      <span class="comment">//23</span></div><div class="line">test(<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>)    <span class="comment">//36</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Arguments对象实现方法重载</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</div><div class="line">		sum += <span class="built_in">arguments</span>[i];</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">console</span>.log(sum);</div><div class="line">&#125;</div><div class="line"></div><div class="line">test();          <span class="comment">//0</span></div><div class="line">test(<span class="number">11</span>,<span class="number">12</span>);     <span class="comment">//23</span></div><div class="line">test(<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>);  <span class="comment">//36</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES6实现方法重载</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">...nums</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</div><div class="line">		sum += nums[i];</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">console</span>.log(sum);</div><div class="line">&#125;</div><div class="line"></div><div class="line">test();          <span class="comment">//0</span></div><div class="line">test(<span class="number">11</span>,<span class="number">12</span>);     <span class="comment">//23</span></div><div class="line">test(<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>);  <span class="comment">//36</span></div></pre></td></tr></table></figure>
<h4 id="递归调用"><a href="#递归调用" class="headerlink" title="递归调用"></a>递归调用</h4><p>这样的好处就是可以实现匿名函数的递归调用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实现一个阶乘函数</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		n * <span class="built_in">arguments</span>.callee(n<span class="number">-1</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">factorial(<span class="number">1</span>); <span class="comment">//1</span></div><div class="line">factorial(<span class="number">5</span>); <span class="comment">//120</span></div></pre></td></tr></table></figure>
<h4 id="不定参问题"><a href="#不定参问题" class="headerlink" title="不定参问题"></a>不定参问题</h4><p>比如说，我想判断你传给我的一些数字的大小，取出最大的那个</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> maxNum = <span class="built_in">Number</span>.NEGATIVE_INFINITY;;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</div><div class="line">		<span class="keyword">if</span>(<span class="built_in">arguments</span>[i]&gt; maxNum)&#123;</div><div class="line">			maxNum = <span class="built_in">arguments</span>[i];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> maxNum;</div><div class="line">&#125;</div><div class="line"></div><div class="line">max(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">10</span>); <span class="comment">//11</span></div><div class="line">max(<span class="number">2</span>,<span class="number">-10</span>,<span class="number">22</span>,<span class="number">11</span>);   <span class="comment">//22</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每个函数都会有一个Arguments对象实例arguments，它引用着函数的实参，可以用数组下标的方式”[]”引用arguments的元素。&lt;code&gt;arguments.length&lt;/code&gt;为函数实参个数，&lt;code&gt;arguments.callee&lt;/code&gt;引用函数自身。&lt;/p&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS继承的几种方法总结</title>
    <link href="http://blog.poetries.top/2016/12/13/js-inherit/"/>
    <id>http://blog.poetries.top/2016/12/13/js-inherit/</id>
    <published>2016-12-13T06:55:24.000Z</published>
    <updated>2017-02-15T11:25:30.956Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>由于js不像java那样是真正面向对象的语言，js是基于对象的，它没有类的概念</li>
<li>所以，要想实现继承，可以用js的原型prototype机制或者用apply和call方法去实现。在面向对象的语言中，我们使用类来创建一个自定义对象。然而js中所有事物都是对象，那么用什么办法来创建自定义对象呢？</li>
<li>这就需要用到js的原型：我们可以简单的把prototype看做是一个模版，新创建的自定义对象都是这个模版（prototype）的一个拷贝 （实际上不是拷贝而是链接，只不过这种链接是不可见，新实例化的对象内部有一个看不见的<strong>Proto</strong>指针，指向原型对象）。</li>
</ul>
<a id="more"></a>
<h3 id="1、继承第一种方式：对象冒充"><a href="#1、继承第一种方式：对象冒充" class="headerlink" title="1、继承第一种方式：对象冒充"></a>1、继承第一种方式：对象冒充</h3><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">blogfunction Parent(username)&#123;</div><div class="line">    this.username = username;</div><div class="line">    this.hello = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">      console.log(<span class="string">'hello '</span> + this.username);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">Parent.prototype.sayMorning = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">	console.log(<span class="string">'good morning '</span> + this.username);</div><div class="line">&#125;</div><div class="line">  <span class="keyword">function</span> Child(username,password)&#123;</div><div class="line">    //通过以下3行实现将Parent的属性和方法追加到Child中，从而实现继承</div><div class="line">    //第一步：this.method是作为一个临时的属性，并且指向Parent所指向的对象，</div><div class="line">    //第二步：执行this.method方法，即执行Parent所指向的对象函数</div><div class="line">    //第三步：销毁this.method属性，即此时Child就已经拥有了Parent的所有属性和方法</div><div class="line">    this.method = Parent;</div><div class="line">    this.method(username);//最关键的一行</div><div class="line">    delete this.method;</div><div class="line"></div><div class="line">     this.password = password;</div><div class="line">    this.world = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">      console.log(this.password);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  var parent = new Parent(<span class="string">"zhangsan"</span>);</div><div class="line">  var child = new Child(<span class="string">"lisi"</span>,<span class="string">"123456"</span>);</div><div class="line">  parent.hello();</div><div class="line">  parent.sayMorning();</div><div class="line">  child.hello();</div><div class="line">  child.world();</div></pre></td></tr></table></figure>
<h3 id="2、继承第二种方式：call-方法方式"><a href="#2、继承第二种方式：call-方法方式" class="headerlink" title="2、继承第二种方式：call()方法方式"></a>2、继承第二种方式：call()方法方式</h3><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Parent(username)&#123;</div><div class="line">    this.username = username;</div><div class="line">    this.hello = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">      console.log(this.username);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">Parent.prototype.sayMorning = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">		console.log(<span class="string">'good morning '</span> + this.username);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">  <span class="keyword">function</span> Child(username,password)&#123;</div><div class="line">    Parent.call(this,username);</div><div class="line"></div><div class="line">    this.password = password;</div><div class="line">    this.world = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">      console.log(this.password);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  var parent = new Parent(<span class="string">"zhangsan"</span>);</div><div class="line">  var child = new Child(<span class="string">"lisi"</span>,<span class="string">"123456"</span>);</div><div class="line">  parent.hello();</div><div class="line">  parent.sayMorning();</div><div class="line">  child.hello();</div><div class="line">  child.world();</div><div class="line">// child.sayMorning();  通过prototype 添加的方法和属性，不能用来继承</div></pre></td></tr></table></figure>
<h3 id="3、继承的第三种方式：apply-方法方式"><a href="#3、继承的第三种方式：apply-方法方式" class="headerlink" title="3、继承的第三种方式：apply()方法方式"></a>3、继承的第三种方式：apply()方法方式</h3><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Parent(username)&#123;</div><div class="line">    this.username = username;</div><div class="line">    this.hello = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">      console.log(this.username);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">	Parent.prototype.sayMorning = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">		console.log(<span class="string">'good morning '</span> + this.username);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">  <span class="keyword">function</span> Child(username,password)&#123;</div><div class="line">    Parent.apply(this,new Array(username));</div><div class="line"></div><div class="line">    this.password = password;</div><div class="line">    this.world = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">      console.log(this.password);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">var parent = new Parent(<span class="string">"zhangsan"</span>);</div><div class="line">  var child = new Child(<span class="string">"lisi"</span>,<span class="string">"123456"</span>);</div><div class="line">  parent.hello();</div><div class="line">  parent.sayMorning();</div><div class="line">  child.hello();</div><div class="line">  child.world();</div><div class="line">// child.sayMorning(); 通过prototype 添加的方法和属性，不能用来继承</div></pre></td></tr></table></figure>
<h3 id="4、继承的第四种方式：原型链方式，即子类通过prototype将所有在父类中通过prototype追加的属性和方法都追加到Child，从而实现了继承"><a href="#4、继承的第四种方式：原型链方式，即子类通过prototype将所有在父类中通过prototype追加的属性和方法都追加到Child，从而实现了继承" class="headerlink" title="4、继承的第四种方式：原型链方式，即子类通过prototype将所有在父类中通过prototype追加的属性和方法都追加到Child，从而实现了继承"></a>4、继承的第四种方式：原型链方式，即子类通过prototype将所有在父类中通过prototype追加的属性和方法都追加到Child，从而实现了继承</h3><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Person</span></span>()&#123;</div><div class="line">  &#125;</div><div class="line">  Person.prototype.hello = <span class="string">"hello"</span>;</div><div class="line">  Person.prototype.sayHello = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    console.log(this.hello);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">function</span> <span class="function"><span class="title">Child</span></span>()&#123;</div><div class="line">  &#125;</div><div class="line">  Child.prototype = new Person();//这行的作用是：将Parent中将所有通过prototype追加的属性和方法都追加到Child，从而实现了继承</div><div class="line">  Child.prototype.world = <span class="string">"world"</span>;</div><div class="line">  Child.prototype.sayWorld = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    console.log(this.world);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  var c = new Child();</div><div class="line">  c.sayHello();</div><div class="line">  c.sayWorld();</div><div class="line">通过prototype 添加的方法和属性，不能用来继承</div></pre></td></tr></table></figure>
<h3 id="5、继承的第五种方式：混合方式-混合了call或者apply方式、原型链方式"><a href="#5、继承的第五种方式：混合方式-混合了call或者apply方式、原型链方式" class="headerlink" title="5、继承的第五种方式：混合方式, 混合了call或者apply方式、原型链方式"></a>5、继承的第五种方式：混合方式, 混合了call或者apply方式、原型链方式</h3><hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Parent(hello)&#123;</div><div class="line">    this.hello = hello;</div><div class="line">  &#125;</div><div class="line">  Parent.prototype.sayHello = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    console.log(this.hello);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">function</span> Child(hello,world)&#123;</div><div class="line">    Parent.call(this,hello);//将父类的属性继承过来</div><div class="line">    this.world = world;//新增一些属性</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  Child.prototype = new Parent();//将父类的方法继承过来</div><div class="line"></div><div class="line">  Child.prototype.sayWorld = <span class="function"><span class="title">function</span></span>()&#123;//新增一些方法</div><div class="line">    console.log(this.world);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  var c = new Child(<span class="string">"zhangsan"</span>,<span class="string">"lisi"</span>);</div><div class="line">  c.sayHello();</div><div class="line">  c.sayWorld();</div><div class="line">可以继承通过prototype 添加的方法和属性</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;由于js不像java那样是真正面向对象的语言，js是基于对象的，它没有类的概念&lt;/li&gt;
&lt;li&gt;所以，要想实现继承，可以用js的原型prototype机制或者用apply和call方法去实现。在面向对象的语言中，我们使用类来创建一个自定义对象。然而js中所有事物都是对象，那么用什么办法来创建自定义对象呢？&lt;/li&gt;
&lt;li&gt;这就需要用到js的原型：我们可以简单的把prototype看做是一个模版，新创建的自定义对象都是这个模版（prototype）的一个拷贝 （实际上不是拷贝而是链接，只不过这种链接是不可见，新实例化的对象内部有一个看不见的&lt;strong&gt;Proto&lt;/strong&gt;指针，指向原型对象）。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="继承" scheme="http://blog.poetries.top/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>JS 中的事件绑定、事件监听、事件委托</title>
    <link href="http://blog.poetries.top/2016/12/13/js-event-listener/"/>
    <id>http://blog.poetries.top/2016/12/13/js-event-listener/</id>
    <published>2016-12-13T06:55:24.000Z</published>
    <updated>2017-02-15T11:25:30.956Z</updated>
    
    <content type="html"><![CDATA[<h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><hr>
<ul>
<li>要想让 <code>JavaScript</code>对用户的操作作出响应，首先要对 <code>DOM</code> 元素绑定事件处理函数。所谓事件处理函数，就是处理用户操作的函数，不同的操作对应不同的名称</li>
</ul>
<a id="more"></a>
<ul>
<li><p>在<code>JavaScript</code>中，有三种常用的绑定事件的方法</p>
<ul>
<li>在<code>DOM</code>元素中直接绑定；</li>
<li>在<code>JavaScript</code>代码中绑定；</li>
<li>绑定事件监听函数</li>
</ul>
</li>
</ul>
<h4 id="在DOM中直接绑定事件"><a href="#在DOM中直接绑定事件" class="headerlink" title="在DOM中直接绑定事件"></a>在<code>DOM</code>中直接绑定事件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;button&quot; value=&quot;click me&quot; onclick=&quot;hello()&quot;&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">function hello()&#123;</div><div class="line">  alert(&quot;hello world!&quot;);</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h4 id="在JavaScript代码中绑定事件"><a href="#在JavaScript代码中绑定事件" class="headerlink" title="在JavaScript代码中绑定事件"></a>在<code>JavaScript</code>代码中绑定事件</h4><ul>
<li>在<code>JavaScript</code>代码中（即script标签内）绑定事件可以使<code>JavaScript</code>代码与<code>HTML</code>标签分离，文档结构清晰，便于管理和开发</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;button&quot; value=&quot;click me&quot; id=&quot;btn&quot;&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">document.getElementById(&quot;btn&quot;).onclick = function()&#123;</div><div class="line">  alert(&quot;hello world!&quot;);</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h4 id="使用事件监听绑定事件"><a href="#使用事件监听绑定事件" class="headerlink" title="使用事件监听绑定事件"></a>使用事件监听绑定事件</h4><ul>
<li>关于事件监听，W3C规范中定义了3个事件阶段，依次是捕获阶段、目标阶段、冒泡阶段</li>
<li>起初<code>Netscape</code>制定了<code>JavaScript</code>的一套事件驱动机制（即事件捕获）。随即<code>IE</code>也推出了自己的一套事件驱动机制（即事件冒泡）。最后<code>W3C</code>规范了两种事件机制，分为捕获阶段、目标阶段、冒泡阶段。IE8以前IE一直坚持自己的事件机制（前端人员一直头痛的兼容性问题），<code>IE9</code>以后<code>IE</code>也支持了W3C规范</li>
</ul>
<p><strong>W3C规范</strong></p>
<ul>
<li>语法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">element.addEventListener(event, function, useCapture)</div></pre></td></tr></table></figure>
<ul>
<li><code>event</code> : （必需）事件名，支持所有<code>DOM</code>事件。</li>
<li><code>function</code>：（必需）指定要事件触发时执行的函数。</li>
<li><p><code>useCapture</code>：（可选）指定事件是否在捕获或冒泡阶段执行。<code>true</code>，捕获。<code>false</code>，冒泡。默认<code>false</code></p>
</li>
<li><p>注：<code>IE8</code> 以下不支持</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;button&quot; value=&quot;click me&quot; id=&quot;btn1&quot;&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">document.getElementById(&quot;btn1&quot;).addEventListener(&quot;click&quot;,hello);</div><div class="line">function hello()&#123;</div><div class="line">  alert(&quot;hello world!&quot;);</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p><strong>IE标准</strong></p>
<ul>
<li>语法：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">element.attachEvent(event, function)</div></pre></td></tr></table></figure>
<ul>
<li><code>event</code>：（必需）事件类型。需加“on“，例如：<code>onclick</code>。</li>
<li><code>function</code>：（必需）指定要事件触发时执行的函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;button&quot; value=&quot;click me&quot; id=&quot;btn2&quot;&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">document.getElementById(&quot;btn2&quot;).attachEvent(&quot;onclick&quot;,hello);</div><div class="line">function hello()&#123;</div><div class="line">  alert(&quot;hello world!&quot;);</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h4 id="事件监听的优点"><a href="#事件监听的优点" class="headerlink" title="事件监听的优点"></a>事件监听的优点</h4><ul>
<li>可以绑定多个事件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;button&quot; value=&quot;click me&quot; id=&quot;btn3&quot;&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">var btn3 = document.getElementById(&quot;btn3&quot;);</div><div class="line">btn3.onclick = function()&#123;</div><div class="line">  alert(&quot;hello 1&quot;); //不执行</div><div class="line">&#125;</div><div class="line">btn3.onclick = function()&#123;</div><div class="line">  alert(&quot;hello 2&quot;); //执行</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>常规的事件绑定只执行最后绑定的事件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;button&quot; value=&quot;click me&quot; id=&quot;btn4&quot;&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">var btn4 = document.getElementById(&quot;btn4&quot;);</div><div class="line">btn4.addEventListener(&quot;click&quot;,hello1);</div><div class="line">btn4.addEventListener(&quot;click&quot;,hello2);</div><div class="line"></div><div class="line">function hello1()&#123;</div><div class="line">  alert(&quot;hello 1&quot;);</div><div class="line">&#125;</div><div class="line">function hello2()&#123;</div><div class="line">  alert(&quot;hello 2&quot;);</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>两个事件都执行了</p>
<ul>
<li>可以解除相应的绑定</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;button&quot; value=&quot;click me&quot; id=&quot;btn5&quot;&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">var btn5 = document.getElementById(&quot;btn5&quot;);</div><div class="line">btn5.addEventListener(&quot;click&quot;,hello1);//执行了</div><div class="line">btn5.addEventListener(&quot;click&quot;,hello2);//不执行</div><div class="line">btn5.removeEventListener(&quot;click&quot;,hello2);</div><div class="line"></div><div class="line">function hello1()&#123;</div><div class="line">  alert(&quot;hello 1&quot;);</div><div class="line">&#125;</div><div class="line">function hello2()&#123;</div><div class="line">  alert(&quot;hello 2&quot;);</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<ul>
<li>封装事件监听</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;button&quot; value=&quot;click me&quot; id=&quot;btn5&quot;&gt;</div><div class="line"></div><div class="line">//绑定监听事件</div><div class="line">function addEventHandler(target,type,fn)&#123;</div><div class="line">  if(target.addEventListener)&#123;</div><div class="line">    target.addEventListener(type,fn);</div><div class="line">  &#125;else&#123;</div><div class="line">    target.attachEvent(&quot;on&quot;+type,fn);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//移除监听事件</div><div class="line">function removeEventHandler(target,type,fn)&#123;</div><div class="line">  if(target.removeEventListener)&#123;</div><div class="line">    target.removeEventListener(type,fn);</div><div class="line">  &#125;else&#123;</div><div class="line">    target.detachEvent(&quot;on&quot;+type,fn);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//测试</div><div class="line">var btn5 = document.getElementById(&quot;btn5&quot;);</div><div class="line">addEventHandler(btn5,&quot;click&quot;,hello1);//添加事件hello1</div><div class="line">addEventHandler(btn5,&quot;click&quot;,hello2);//添加事件hello2</div><div class="line">removeEventHandler(btn5,&quot;click&quot;,hello1);//移除事件hello1</div></pre></td></tr></table></figure>
<h4 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h4><ul>
<li>事件委托就是利用冒泡的原理，把事件加到父元素或祖先元素上，触发执行效果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;button&quot; value=&quot;click me&quot; id=&quot;btn6&quot;&gt;</div><div class="line"></div><div class="line">var btn6 = document.getElementById(&quot;btn6&quot;);</div><div class="line">document.onclick = function(event)&#123;</div><div class="line">  event = event || window.event;</div><div class="line">  var target = event.target || event.srcElement;</div><div class="line">  if(target == btn6)&#123;</div><div class="line">    alert(btn5.value);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="事件委托优点"><a href="#事件委托优点" class="headerlink" title="事件委托优点"></a>事件委托优点</h5><ul>
<li>提高JavaScript性能。事件委托可以显著的提高事件的处理速度，减少内存的占用</li>
<li>传统写法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=&quot;list&quot;&gt;</div><div class="line">  &lt;li id=&quot;item1&quot; &gt;item1&lt;/li&gt;</div><div class="line">  &lt;li id=&quot;item2&quot; &gt;item2&lt;/li&gt;</div><div class="line">  &lt;li id=&quot;item3&quot; &gt;item3&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">var item1 = document.getElementById(&quot;item1&quot;);</div><div class="line">var item2 = document.getElementById(&quot;item2&quot;);</div><div class="line">var item3 = document.getElementById(&quot;item3&quot;);</div><div class="line"></div><div class="line">item1.onclick = function()&#123;</div><div class="line">  alert(&quot;hello item1&quot;);</div><div class="line">&#125;</div><div class="line">item2.onclick = function()&#123;</div><div class="line">  alert(&quot;hello item2&quot;);</div><div class="line">&#125;</div><div class="line">item3.onclick = function()&#123;</div><div class="line">  alert(&quot;hello item3&quot;);</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<ul>
<li>事件委托</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=&quot;list&quot;&gt;</div><div class="line">  &lt;li id=&quot;item1&quot; &gt;item1&lt;/li&gt;</div><div class="line">  &lt;li id=&quot;item2&quot; &gt;item2&lt;/li&gt;</div><div class="line">  &lt;li id=&quot;item3&quot; &gt;item3&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">var item1 = document.getElementById(&quot;item1&quot;);</div><div class="line">var item2 = document.getElementById(&quot;item2&quot;);</div><div class="line">var item3 = document.getElementById(&quot;item3&quot;);</div><div class="line"></div><div class="line">document.addEventListener(&quot;click&quot;,function(event)&#123;</div><div class="line">  var target = event.target;</div><div class="line">  if(target == item1)&#123;</div><div class="line">    alert(&quot;hello item1&quot;);</div><div class="line">  &#125;else if(target == item2)&#123;</div><div class="line">    alert(&quot;hello item2&quot;);</div><div class="line">  &#125;else if(target == item3)&#123;</div><div class="line">    alert(&quot;hello item3&quot;);</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<ul>
<li>动态的添加DOM元素，不需要因为元素的改动而修改事件绑定</li>
<li>传统写法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=&quot;list&quot;&gt;</div><div class="line">  &lt;li id=&quot;item1&quot; &gt;item1&lt;/li&gt;</div><div class="line">  &lt;li id=&quot;item2&quot; &gt;item2&lt;/li&gt;</div><div class="line">  &lt;li id=&quot;item3&quot; &gt;item3&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">var list = document.getElementById(&quot;list&quot;);</div><div class="line"></div><div class="line">var item = list.getElementsByTagName(&quot;li&quot;);</div><div class="line">for(var i=0;i&lt;item.length;i++)&#123;</div><div class="line">  (function(i)&#123;</div><div class="line">    item[i].onclick = function()&#123;</div><div class="line">      alert(item[i].innerHTML);</div><div class="line">    &#125;</div><div class="line">  &#125;)(i)</div><div class="line">&#125;</div><div class="line"></div><div class="line">var node=document.createElement(&quot;li&quot;);</div><div class="line">var textnode=document.createTextNode(&quot;item4&quot;);</div><div class="line">node.appendChild(textnode);</div><div class="line">list.appendChild(node);</div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<ul>
<li>点击item1到item3都有事件响应，但是点击item4时，没有事件响应。说明传统的事件绑定无法对动态添加的元素而动态的添加事件。</li>
<li>事件委托</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=&quot;list&quot;&gt;</div><div class="line">  &lt;li id=&quot;item1&quot; &gt;item1&lt;/li&gt;</div><div class="line">  &lt;li id=&quot;item2&quot; &gt;item2&lt;/li&gt;</div><div class="line">  &lt;li id=&quot;item3&quot; &gt;item3&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">var list = document.getElementById(&quot;list&quot;);</div><div class="line"></div><div class="line">document.addEventListener(&quot;click&quot;,function(event)&#123;</div><div class="line">  var target = event.target;</div><div class="line">  if(target.nodeName == &quot;LI&quot;)&#123;</div><div class="line">    alert(target.innerHTML);</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">var node=document.createElement(&quot;li&quot;);</div><div class="line">var textnode=document.createTextNode(&quot;item4&quot;);</div><div class="line">node.appendChild(textnode);</div><div class="line">list.appendChild(node);</div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<ul>
<li>当点击item4时，item4有事件响应。说明事件委托可以为新添加的DOM元素动态的添加事件</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;事件绑定&quot;&gt;&lt;a href=&quot;#事件绑定&quot; class=&quot;headerlink&quot; title=&quot;事件绑定&quot;&gt;&lt;/a&gt;事件绑定&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;要想让 &lt;code&gt;JavaScript&lt;/code&gt;对用户的操作作出响应，首先要对 &lt;code&gt;DOM&lt;/code&gt; 元素绑定事件处理函数。所谓事件处理函数，就是处理用户操作的函数，不同的操作对应不同的名称&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="事件" scheme="http://blog.poetries.top/tags/%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
</feed>
